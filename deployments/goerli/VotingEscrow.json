{
  "address": "0xAb68c4ff93d1ba927979E22cc0c1Acf86E83ab0F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "p12TokenAddr_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum VotingEscrow.OperationType",
          "name": "t",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Expired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevTotalLockedP12",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalLockedP12",
          "type": "uint256"
        }
      ],
      "name": "TotalLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEpoch",
          "type": "uint256"
        }
      ],
      "name": "findBlockEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getLastUserSlope",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "increaseUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "lockedEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "p12Token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointHistory",
      "outputs": [
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "slope",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slopeChanges",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedP12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPointHistory",
      "outputs": [
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "slope",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "userPointHistoryTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc27f98060a9a2500442bd31a5754f1fcb73eacde653d5203fe58bff676fa5401",
  "receipt": {
    "to": null,
    "from": "0xfeD03676c595DD1F1c6716a446cD44B4C90AD290",
    "contractAddress": "0xAb68c4ff93d1ba927979E22cc0c1Acf86E83ab0F",
    "transactionIndex": 3,
    "gasUsed": "2521904",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000001000000000000000000000000000000000000020000000000000000000800000002000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000100000000000000000000000400000000000000000000000010000000",
    "blockHash": "0x268ec1579759ecd3c593c119940116b93b54a188e7c4ed59332f7e00431c18f0",
    "transactionHash": "0xc27f98060a9a2500442bd31a5754f1fcb73eacde653d5203fe58bff676fa5401",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 7760748,
        "transactionHash": "0xc27f98060a9a2500442bd31a5754f1fcb73eacde653d5203fe58bff676fa5401",
        "address": "0xAb68c4ff93d1ba927979E22cc0c1Acf86E83ab0F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fed03676c595dd1f1c6716a446cd44b4c90ad290"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x268ec1579759ecd3c593c119940116b93b54a188e7c4ed59332f7e00431c18f0"
      }
    ],
    "blockNumber": 7760748,
    "cumulativeGasUsed": "4953195",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2844B158Bcffc0aD7d881a982D464c0ce38d8086",
    "Vote-escrowed P12",
    "veP12"
  ],
  "numDeployments": 1,
  "solcInputHash": "3ebc22a5d94db8a8f651c81db9812941",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p12TokenAddr_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum VotingEscrow.OperationType\",\"name\":\"t\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Expired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTotalLockedP12\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLockedP12\",\"type\":\"uint256\"}],\"name\":\"TotalLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEpoch\",\"type\":\"uint256\"}],\"name\":\"findBlockEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLastUserSlope\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockedEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p12Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedP12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"userPointHistoryTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\",\"params\":{\"addr\":\"User wallet address\"},\"returns\":{\"_0\":\"User voting power\"}},\"balanceOfAt(address,uint256)\":{\"details\":\"Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\",\"params\":{\"addr\":\"User's wallet address\",\"blk\":\"Block to calculate the voting power at\"},\"returns\":{\"_0\":\"Voting power\"}},\"claimOwnership()\":{\"details\":\"pending owner call this function to claim ownership\"},\"constructor\":{\"params\":{\"name_\":\"Token name\",\"p12TokenAddr_\":\"`ERC20P12` token address\",\"symbol_\":\"Token symbol\"}},\"createLock(uint256,uint256)\":{\"params\":{\"unlockTime\":\"Epoch time when tokens unlock, rounded down to whole weeks\",\"value\":\"Amount to deposit\"}},\"depositFor(address,uint256)\":{\"details\":\"Anyone (even a smart contract) can deposit for someone else, but      cannot extend their lockTime and deposit for a brand new user\",\"params\":{\"addr\":\"User's wallet address\",\"value\":\"Amount to add to user's lock\"}},\"findBlockEpoch(uint256,uint256)\":{\"params\":{\"blk\":\"Block to find\",\"maxEpoch\":\"Don't go beyond this epoch\"},\"returns\":{\"_0\":\"Approximate timestamp for block\"}},\"getLastUserSlope(address)\":{\"params\":{\"addr\":\"Address of the user wallet\"},\"returns\":{\"_0\":\"Value of the slope\"}},\"increaseAmount(uint256)\":{\"params\":{\"value\":\"Amount of tokens to deposit and add to the lock\"}},\"increaseUnlockTime(uint256)\":{\"params\":{\"unlockTime\":\"New epoch time for unlocking\"}},\"lockedEnd(address)\":{\"params\":{\"addr\":\"User wallet\"},\"returns\":{\"_0\":\"Epoch time of the lock end\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Return the address of the pending owner\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\",\"returns\":{\"_0\":\"Total voting power\"}},\"totalSupplyAt(uint256)\":{\"params\":{\"blk\":\"Block to calculate the total voting power at\"},\"returns\":{\"_0\":\"Total voting power at `_block`\"}},\"transferOwnership(address,bool)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership\"},\"userPointHistoryTs(address,uint256)\":{\"params\":{\"addr\":\"User wallet address\",\"idx\":\"User epoch number\"},\"returns\":{\"_0\":\"Epoch time of the checkpoint\"}},\"withdraw()\":{\"details\":\"Only possible if the lock has expired or contract expired\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Get the current voting power for `msg.sender`\"},\"balanceOfAt(address,uint256)\":{\"notice\":\"Measure voting power of `addr` at block height `_block`\"},\"checkPoint()\":{\"notice\":\"Record global data to checkpoint\"},\"constructor\":{\"notice\":\"Contract constructor\"},\"createLock(uint256,uint256)\":{\"notice\":\"Deposit `value` tokens for `msg.sender` and lock until `unlock_time`\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit `value` tokens for `addr` and add to the lock\"},\"findBlockEpoch(uint256,uint256)\":{\"notice\":\"Binary search to estimate timestamp for block number\"},\"getLastUserSlope(address)\":{\"notice\":\"Get the most recently recorded rate of voting power decrease for `addr`\"},\"increaseAmount(uint256)\":{\"notice\":\"Deposit `value` additional tokens for `msg.sender`         without modifying the unlock time\"},\"increaseUnlockTime(uint256)\":{\"notice\":\"Extend the unlock time for `msg.sender` to `unlock_time`\"},\"lockedEnd(address)\":{\"notice\":\"Get timestamp when `addr`'s lock finishes\"},\"totalSupply()\":{\"notice\":\"Calculate total voting power\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Calculate total voting power at some point in the past\"},\"userPointHistoryTs(address,uint256)\":{\"notice\":\"Get the timestamp for checkpoint `idx` for `addr`\"},\"withdraw()\":{\"notice\":\"Withdraw all tokens for `msg.sender`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/VotingEscrow.sol\":\"VotingEscrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/access/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// Refer to https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol and https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\ncontract SafeOwnable is Context {\\n  address private _owner;\\n  address private _pendingOwner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Return the address of the pending owner\\n   */\\n  function pendingOwner() public view virtual returns (address) {\\n    return _pendingOwner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), 'SafeOwnable: caller not owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   * Note If direct is false, it will set an pending owner and the OwnerShipTransferring\\n   * only happens when the pending owner claim the ownership\\n   */\\n  function transferOwnership(address newOwner, bool direct) public virtual onlyOwner {\\n    require(newOwner != address(0), 'SafeOwnable: new owner is 0');\\n\\n    if (direct) {\\n      _transferOwnership(newOwner);\\n    } else {\\n      _transferPendingOwnership(newOwner);\\n    }\\n  }\\n\\n  /**\\n   * @dev pending owner call this function to claim ownership\\n   */\\n  function claimOwnership() public {\\n    require(msg.sender == _pendingOwner, 'SafeOwnable: caller != pending');\\n\\n    _claimOwnership();\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev set the pending owner address\\n   * Internal function without access restriction.\\n   */\\n  function _transferPendingOwnership(address newOwner) internal virtual {\\n    _pendingOwner = newOwner;\\n  }\\n\\n  /**\\n   * @dev claim ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _claimOwnership() internal virtual {\\n    address oldOwner = _owner;\\n    emit OwnershipTransferred(oldOwner, _pendingOwner);\\n\\n    _owner = _pendingOwner;\\n    _pendingOwner = address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xb905338a5fec3b943cc830697d24e524a779767d76b27c4e83c924c228685acb\",\"license\":\"GPL-3.0-only\"},\"contracts/token/VotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\n\\nimport '../access/SafeOwnable.sol';\\nimport './interfaces/IVotingEscrow.sol';\\n\\ncontract VotingEscrow is ReentrancyGuard, SafeOwnable, Pausable, IVotingEscrow {\\n  using SafeERC20 for IERC20;\\n  // all future times are rounded by week\\n  uint256 constant WEEK = 7 * 86400;\\n  // 4 years\\n  uint256 constant MAXTIME = 4 * 365 * 86400;\\n  uint256 constant MULTIPLIER = 10**18;\\n\\n  address public p12Token;\\n  // total amount of locked P12token\\n  uint256 public totalLockedP12;\\n  mapping(address => LockedBalance) public locked;\\n  uint256 public epoch;\\n  bool public expired; // true if the contract end\\n\\n  mapping(uint256 => Point) public pointHistory;\\n  mapping(address => mapping(uint256 => Point)) public userPointHistory;\\n  mapping(address => uint256) public userPointEpoch;\\n  mapping(uint256 => int256) public slopeChanges;\\n\\n  string public name;\\n  string public symbol;\\n  uint256 public constant decimals = 18;\\n\\n  enum OperationType {\\n    DEPOSIT_FOR_TYPE,\\n    CREATE_LOCK_TYPE,\\n    INCREASE_LOCK_AMOUNT,\\n    INCREASE_UNLOCK_TIME\\n  }\\n\\n  event Expired(address addr, uint256 timestamp);\\n  event Deposit(address indexed provider, uint256 value, uint256 indexed lockTime, OperationType t, uint256 ts);\\n  event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n  event TotalLocked(uint256 prevTotalLockedP12, uint256 totalLockedP12);\\n\\n  struct Point {\\n    int256 bias;\\n    int256 slope;\\n    uint256 ts;\\n    uint256 blk;\\n  }\\n\\n  struct LockedBalance {\\n    int256 amount;\\n    uint256 end;\\n  }\\n\\n  struct CheckPointState {\\n    int256 oldDslope;\\n    int256 newDslope;\\n    uint256 _epoch;\\n  }\\n\\n  /**\\n   * @notice Contract constructor\\n   * @param p12TokenAddr_ `ERC20P12` token address\\n   * @param name_ Token name\\n   * @param symbol_ Token symbol\\n   */\\n  constructor(\\n    address p12TokenAddr_,\\n    string memory name_,\\n    string memory symbol_\\n  ) {\\n    require(p12TokenAddr_ != address(0), 'VotingEscrow: token cannot be 0');\\n    name = name_;\\n    symbol = symbol_;\\n    p12Token = p12TokenAddr_;\\n    pointHistory[0].blk = block.number;\\n    pointHistory[0].ts = block.timestamp;\\n  }\\n\\n  function expire() external onlyOwner contractNotExpired {\\n    expired = true;\\n    emit Expired(msg.sender, block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Get the most recently recorded rate of voting power decrease for `addr`\\n   * @param addr Address of the user wallet\\n   * @return Value of the slope\\n   */\\n\\n  function getLastUserSlope(address addr) external view returns (int256) {\\n    uint256 uEpoch = userPointEpoch[addr];\\n    return userPointHistory[addr][uEpoch].slope;\\n  }\\n\\n  /**\\n   * @notice Get the timestamp for checkpoint `idx` for `addr`\\n   * @param addr User wallet address\\n   * @param idx User epoch number\\n   * @return Epoch time of the checkpoint\\n   */\\n  function userPointHistoryTs(address addr, uint256 idx) external view returns (uint256) {\\n    return userPointHistory[addr][idx].ts;\\n  }\\n\\n  /**\\n   * @notice Get timestamp when `addr`'s lock finishes\\n   * @param addr User wallet\\n   * @return Epoch time of the lock end\\n   */\\n  function lockedEnd(address addr) external view returns (uint256) {\\n    return locked[addr].end;\\n  }\\n\\n  /**\\n   * @notice Record global data to checkpoint\\n   */\\n  function checkPoint() external {\\n    _checkPoint(address(0), LockedBalance({ amount: 0, end: 0 }), LockedBalance({ amount: 0, end: 0 }));\\n  }\\n\\n  /**\\n   * @notice Deposit `value` tokens for `addr` and add to the lock\\n   * @dev Anyone (even a smart contract) can deposit for someone else, but\\n   *      cannot extend their lockTime and deposit for a brand new user\\n   * @param addr User's wallet address\\n   * @param value Amount to add to user's lock\\n   */\\n  function depositFor(address addr, uint256 value) external nonReentrant whenNotPaused contractNotExpired {\\n    LockedBalance memory _locked = locked[addr];\\n    require(value > 0, 'VotingEscrow: invalid value');\\n    require(_locked.amount > 0, 'VotingEscrow: no existing lock');\\n    require(_locked.end > block.timestamp, 'VotingEscrow: lock expired');\\n    _depositFor(addr, value, 0, locked[addr], OperationType.DEPOSIT_FOR_TYPE);\\n  }\\n\\n  /**\\n   * @notice Deposit `value` tokens for `msg.sender` and lock until `unlock_time`\\n   * @param value Amount to deposit\\n   * @param unlockTime Epoch time when tokens unlock, rounded down to whole weeks\\n   */\\n  function createLock(uint256 value, uint256 unlockTime) external nonReentrant whenNotPaused contractNotExpired {\\n    //lockTime is rounded down to weeks\\n    uint256 _unlockTime = (unlockTime / WEEK) * WEEK;\\n    LockedBalance memory _locked = locked[msg.sender];\\n    require(value > 0, 'VotingEscrow: invalid value');\\n    require(_locked.amount == 0, 'VotingEscrow: old tokens locked');\\n    require(_unlockTime > block.timestamp, 'VotingEscrow: lock later');\\n    require(_unlockTime <= block.timestamp + MAXTIME, 'VotingEscrow: exceed cap period');\\n    _depositFor(msg.sender, value, _unlockTime, _locked, OperationType.CREATE_LOCK_TYPE);\\n  }\\n\\n  /**\\n   * @notice Deposit `value` additional tokens for `msg.sender`\\n   *         without modifying the unlock time\\n   * @param value Amount of tokens to deposit and add to the lock\\n   */\\n  function increaseAmount(uint256 value) external nonReentrant whenNotPaused contractNotExpired {\\n    LockedBalance memory _locked = locked[msg.sender];\\n    require(value > 0, 'VotingEscrow: invalid value');\\n    require(_locked.amount > 0, 'VotingEscrow: no existing lock');\\n    require(_locked.end > block.timestamp, 'VotingEscrow: lock expired');\\n    _depositFor(msg.sender, value, 0, _locked, OperationType.INCREASE_LOCK_AMOUNT);\\n  }\\n\\n  /**\\n   * @notice Extend the unlock time for `msg.sender` to `unlock_time`\\n   * @param unlockTime New epoch time for unlocking\\n   */\\n  function increaseUnlockTime(uint256 unlockTime) external nonReentrant whenNotPaused contractNotExpired {\\n    LockedBalance memory _locked = locked[msg.sender];\\n    uint256 _unlockTime = (unlockTime / WEEK) * WEEK;\\n    require(_locked.end > block.timestamp, 'VotingEscrow: Lock expired');\\n    require(_locked.amount > 0, 'VotingEscrow: Nothing is locked');\\n    require(_unlockTime > _locked.end, 'VotingEscrow: invalid unlockTime');\\n    require(_unlockTime <= block.timestamp + MAXTIME, 'VotingEscrow: exceed cap period');\\n    _depositFor(msg.sender, 0, _unlockTime, _locked, OperationType.INCREASE_LOCK_AMOUNT);\\n  }\\n\\n  /**\\n   * @notice Withdraw all tokens for `msg.sender`\\n   * @dev Only possible if the lock has expired or contract expired\\n   */\\n  function withdraw() external nonReentrant whenNotPaused {\\n    LockedBalance memory _locked = locked[msg.sender];\\n    require(_locked.amount > 0, 'VotingEscrow: no locked token');\\n    // Check if the contract is expired or unlocked\\n    require(block.timestamp >= _locked.end || expired, 'VotingEscrow: condition not met');\\n    uint256 value = uint256(_locked.amount);\\n    LockedBalance memory oldLocked = _locked;\\n    _locked.end = 0;\\n    _locked.amount = 0;\\n    locked[msg.sender] = _locked;\\n    uint256 totalLockedP12Before = totalLockedP12;\\n    totalLockedP12 = totalLockedP12Before - value;\\n\\n    // old_locked can have either expired <= timestamp or zero end\\n    // _locked has only 0 end\\n    // Both can have >= 0 amount\\n\\n    _checkPoint(msg.sender, oldLocked, _locked);\\n    IERC20(p12Token).safeTransfer(msg.sender, value);\\n\\n    emit Withdraw(msg.sender, value, block.timestamp);\\n    emit TotalLocked(totalLockedP12Before, totalLockedP12Before - value);\\n  }\\n\\n  /**\\n   * @notice Get the current voting power for `msg.sender`\\n   * @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n   * @param addr User wallet address\\n   * @return User voting power\\n   */\\n  function balanceOf(address addr) external view returns (int256) {\\n    uint256 _epoch = userPointEpoch[addr];\\n    if (_epoch == 0) {\\n      return 0;\\n    } else {\\n      Point memory lastPoint = userPointHistory[addr][_epoch];\\n      lastPoint.bias -= lastPoint.slope * int256(block.timestamp - lastPoint.ts);\\n      if (lastPoint.bias < 0) {\\n        lastPoint.bias = 0;\\n      }\\n      return lastPoint.bias;\\n    }\\n  }\\n\\n  /**\\n   * @notice Measure voting power of `addr` at block height `_block`\\n   * @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\\n   * @param addr User's wallet address\\n   * @param blk Block to calculate the voting power at\\n   * @return Voting power\\n   */\\n  function balanceOfAt(address addr, uint256 blk) external view returns (int256) {\\n    require(blk <= block.number, 'VotingEscrow: invalid block');\\n    // Binary search\\n    uint256 _min = 0;\\n    uint256 _max = userPointEpoch[addr];\\n    for (uint256 i = 1; i <= 128; i++) {\\n      if (_min >= _max) {\\n        break;\\n      }\\n      uint256 _mid = (_min + _max + 1) / 2;\\n      if (userPointHistory[addr][_mid].blk <= blk) {\\n        _min = _mid;\\n      } else {\\n        _max = _mid - 1;\\n      }\\n    }\\n    Point memory uPoint = userPointHistory[addr][_min];\\n    uint256 maxEpoch = epoch;\\n    uint256 _epoch = findBlockEpoch(blk, maxEpoch);\\n    Point memory point0 = pointHistory[_epoch];\\n    uint256 dBlock = 0;\\n    uint256 dt = 0;\\n    if (_epoch < maxEpoch) {\\n      Point memory point1 = pointHistory[_epoch + 1];\\n      dBlock = point1.blk - point0.blk;\\n      dt = point1.ts - point0.ts;\\n    } else {\\n      dBlock = block.number - point0.blk;\\n      dt = block.timestamp - point0.ts;\\n    }\\n    uint256 blockTime = point0.ts;\\n    if (dBlock != 0) {\\n      blockTime += (dt * (blk - point0.blk)) / dBlock;\\n    }\\n    uPoint.bias -= uPoint.slope * int256(blockTime - uPoint.ts);\\n    if (uPoint.bias >= 0) {\\n      return uPoint.bias;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate total voting power\\n   * @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n   * @return Total voting power\\n   */\\n\\n  function totalSupply() external view returns (uint256) {\\n    uint256 _epoch = epoch;\\n    Point memory lastPoint = pointHistory[_epoch];\\n    return supplyAt(lastPoint, block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Calculate total voting power at some point in the past\\n   * @param blk Block to calculate the total voting power at\\n   * @return Total voting power at `_block`\\n   */\\n  function totalSupplyAt(uint256 blk) external view returns (uint256) {\\n    require(blk <= block.number, 'VotingEscrow: invalid block');\\n    uint256 _epoch = epoch;\\n    uint256 targetEpoch = findBlockEpoch(blk, _epoch);\\n\\n    Point memory point = pointHistory[targetEpoch];\\n    uint256 dt = 0;\\n    if (targetEpoch < _epoch) {\\n      Point memory pointNext = pointHistory[targetEpoch + 1];\\n      if (point.blk != pointNext.blk) {\\n        dt = ((blk - point.blk) * (pointNext.ts - point.ts)) / (pointNext.blk - point.blk);\\n      }\\n    } else {\\n      if (point.blk != block.number) {\\n        dt = ((blk - point.blk) * (block.timestamp - point.ts)) / (block.number - point.blk);\\n      }\\n    }\\n    // Now dt contains info on how far are we beyond point\\n    return supplyAt(point, point.ts + dt);\\n  }\\n\\n  //------------------public---------------\\n\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Binary search to estimate timestamp for block number\\n   * @param blk Block to find\\n   * @param maxEpoch Don't go beyond this epoch\\n   * @return Approximate timestamp for block\\n   */\\n\\n  function findBlockEpoch(uint256 blk, uint256 maxEpoch) public view returns (uint256) {\\n    uint256 _min = 0;\\n    uint256 _max = maxEpoch;\\n    for (uint256 i = 0; i <= 128; i++) {\\n      if (_min >= _max) {\\n        break;\\n      }\\n      uint256 _mid = (_min + _max + 1) / 2;\\n      if (pointHistory[_mid].blk <= blk) {\\n        _min = _mid;\\n      } else {\\n        _max = _mid - 1;\\n      }\\n    }\\n    return _min;\\n  }\\n\\n  // -------------internal------------------\\n\\n  /**\\n   * @notice Record global and per-user data to checkpoint\\n   * @param addr User's wallet address. No user checkpoint if 0x0\\n   * @param oldLocked Previous locked amount / end lock time for the user\\n   * @param newLocked New locked amount / end lock time for the user\\n   */\\n\\n  function _checkPoint(\\n    address addr,\\n    LockedBalance memory oldLocked,\\n    LockedBalance memory newLocked\\n  ) internal {\\n    Point memory uOld;\\n    Point memory uNew;\\n\\n    CheckPointState memory cpState;\\n    cpState.oldDslope = 0;\\n    cpState.newDslope = 0;\\n    cpState._epoch = epoch;\\n    if (addr != address(0)) {\\n      // Calculate slopes and biases\\n      // Kept at zero when they have to\\n      if (oldLocked.end > block.timestamp && oldLocked.amount > 0) {\\n        uOld.slope = oldLocked.amount / int256(MAXTIME);\\n        uOld.bias = uOld.slope * int256(oldLocked.end - block.timestamp);\\n      }\\n      if (newLocked.end > block.timestamp && newLocked.amount > 0) {\\n        uNew.slope = newLocked.amount / int256(MAXTIME);\\n        uNew.bias = uNew.slope * int256(newLocked.end - block.timestamp);\\n      }\\n      // Read values of scheduled changes in the slope\\n      // old_locked.end can be in the past and in the future\\n      // new_locked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n\\n      cpState.oldDslope = slopeChanges[oldLocked.end];\\n      if (newLocked.end != 0) {\\n        if (newLocked.end == oldLocked.end) {\\n          cpState.newDslope = cpState.oldDslope;\\n        } else {\\n          cpState.newDslope = slopeChanges[newLocked.end];\\n        }\\n      }\\n    }\\n    Point memory lastPoint = Point(0, 0, block.timestamp, block.number);\\n    if (cpState._epoch > 0) {\\n      lastPoint = pointHistory[cpState._epoch];\\n    }\\n    uint256 lastCheckPoint = lastPoint.ts;\\n    // initial_last_point is used for extrapolation to calculate block number\\n    // (approximately, for *At methods) and save them\\n    // as we cannot figure that out exactly from inside the contract\\n\\n    Point memory initialLastPoint = lastPoint;\\n    uint256 blockSlope = 0;\\n    if (block.timestamp > lastPoint.ts) {\\n      blockSlope = (MULTIPLIER * (block.number - lastPoint.blk)) / (block.timestamp - lastPoint.ts);\\n    }\\n    // If last point is already recorded in this block, slope=0\\n    // But that's ok b/c we know the block in such case\\n\\n    // Go over weeks to fill history and calculate what the current point is\\n    uint256 ti = (lastCheckPoint / WEEK) * WEEK;\\n\\n    for (uint24 i = 0; i < 255; i++) {\\n      ti += WEEK;\\n      int256 dSlope = 0;\\n      if (ti > block.timestamp) {\\n        ti = block.timestamp;\\n      } else {\\n        dSlope = slopeChanges[ti];\\n      }\\n\\n      lastPoint.bias -= lastPoint.slope * int256(ti - lastCheckPoint);\\n      lastPoint.slope += dSlope;\\n      if (lastPoint.bias < 0) {\\n        lastPoint.bias = 0;\\n      }\\n      if (lastPoint.slope < 0) {\\n        lastPoint.slope = 0;\\n      }\\n      lastCheckPoint = ti;\\n      lastPoint.ts = ti;\\n      lastPoint.blk = initialLastPoint.blk + (blockSlope * (ti - initialLastPoint.ts)) / MULTIPLIER;\\n      cpState._epoch += 1;\\n      if (ti == block.timestamp) {\\n        lastPoint.blk = block.number;\\n        break;\\n      } else {\\n        pointHistory[cpState._epoch] = lastPoint;\\n      }\\n    }\\n    epoch = cpState._epoch;\\n    // Now point_history is filled until t=now\\n    if (addr != address(0)) {\\n      // CalculateIf last point was in this block, the slope change has been applied already\\n      // But in such case we have 0 slope(s)\\n\\n      lastPoint.slope += (uNew.slope - uOld.slope);\\n      lastPoint.bias += (uNew.bias - uOld.bias);\\n      if (lastPoint.slope < 0) {\\n        lastPoint.slope = 0;\\n      }\\n      if (lastPoint.bias < 0) {\\n        lastPoint.bias = 0;\\n      }\\n    }\\n    // Record the changed point into history\\n    pointHistory[cpState._epoch] = lastPoint;\\n    if (addr != address(0)) {\\n      // Schedule the slope changes (slope is going down)\\n      // We subtract new_user_slope from [new_locked.end]\\n      // and add old_user_slope to [old_locked.end]\\n      if (oldLocked.end > block.timestamp) {\\n        cpState.oldDslope += uOld.slope;\\n        if (newLocked.end == oldLocked.end) {\\n          cpState.oldDslope -= uNew.slope;\\n        }\\n        slopeChanges[oldLocked.end] = cpState.oldDslope;\\n      }\\n      if (newLocked.end > block.timestamp) {\\n        if (newLocked.end > oldLocked.end) {\\n          cpState.newDslope -= uNew.slope;\\n          slopeChanges[newLocked.end] = cpState.newDslope;\\n        }\\n      }\\n\\n      // Now handle user history\\n      uint256 userEpoch = userPointEpoch[addr] + 1;\\n      userPointEpoch[addr] = userEpoch;\\n      uNew.ts = block.timestamp;\\n      uNew.blk = block.number;\\n      userPointHistory[addr][userEpoch] = uNew;\\n    }\\n  }\\n\\n  /**\\n   * @notice Deposit and lock tokens for a user\\n   * @param addr User's wallet address\\n   * @param value Amount to deposit\\n   * @param unlockTime New time when to unlock the tokens, or 0 if unchanged\\n   * @param lockedBalance Previous locked amount / timestamp\\n   * @param t Operation type\\n   */\\n\\n  function _depositFor(\\n    address addr,\\n    uint256 value,\\n    uint256 unlockTime,\\n    LockedBalance memory lockedBalance,\\n    OperationType t\\n  ) internal {\\n    LockedBalance memory _locked = lockedBalance;\\n    uint256 totalLockedP12Before = totalLockedP12;\\n    totalLockedP12 = totalLockedP12Before + value;\\n    LockedBalance memory oldLocked = LockedBalance({ amount: _locked.amount, end: _locked.end });\\n    // Adding to existing lock, or if a lock is expired - creating a new one\\n    _locked.amount += int256(value);\\n    if (unlockTime != 0) {\\n      _locked.end = unlockTime;\\n    }\\n    locked[addr] = _locked;\\n    // Possibilities:\\n    // Both old_locked.end could be current or expired (>/< block.timestamp)\\n    // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n    // _locked.end > block.timestamp (always)\\n\\n    _checkPoint(addr, oldLocked, _locked);\\n    if (value != 0) {\\n      IERC20(p12Token).safeTransferFrom(addr, address(this), value);\\n    }\\n    emit Deposit(addr, value, _locked.end, t, block.timestamp);\\n    emit TotalLocked(totalLockedP12Before, totalLockedP12Before + value);\\n  }\\n\\n  /**\\n   * @notice Calculate total voting power at some point in the past\\n   * @param point The point (bias/slope) to start search from\\n   * @param t Time to calculate the total voting power at\\n   * @return Total voting power at that time\\n   */\\n  function supplyAt(Point memory point, uint256 t) internal view returns (uint256) {\\n    Point memory lastPoint = point;\\n    uint256 ti = (lastPoint.ts / WEEK) * WEEK;\\n    for (uint24 i = 0; i < 255; i++) {\\n      ti += WEEK;\\n      int256 dSlope = 0;\\n      if (ti > t) {\\n        ti = t;\\n      } else {\\n        dSlope = slopeChanges[ti];\\n      }\\n      lastPoint.bias -= lastPoint.slope * int256(ti - lastPoint.ts);\\n      if (ti == t) {\\n        break;\\n      }\\n      lastPoint.slope += dSlope;\\n      lastPoint.ts = ti;\\n    }\\n    if (lastPoint.bias < 0) {\\n      lastPoint.bias = 0;\\n    }\\n    return uint256(lastPoint.bias);\\n  }\\n\\n  //------------modifier-------------\\n\\n  modifier contractNotExpired() {\\n    require(!expired, 'VotingEscrow: contract stopped');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x86ccce96752f418e11705b4c11d6fac9802d28e238a0a32f98bcecc6568bbfee\",\"license\":\"GPL-3.0-only\"},\"contracts/token/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\ninterface IVotingEscrow {\\n  function getLastUserSlope(address addr) external returns (int256);\\n\\n  function lockedEnd(address addr) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b86f26484c0360029da65eb81b461fb0ec612c4ff3290dc82f5396b5733c6b9\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "Adheres to the ERC20 `balanceOf` interface for Aragon compatibility",
        "params": {
          "addr": "User wallet address"
        },
        "returns": {
          "_0": "User voting power"
        }
      },
      "balanceOfAt(address,uint256)": {
        "details": "Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime",
        "params": {
          "addr": "User's wallet address",
          "blk": "Block to calculate the voting power at"
        },
        "returns": {
          "_0": "Voting power"
        }
      },
      "claimOwnership()": {
        "details": "pending owner call this function to claim ownership"
      },
      "constructor": {
        "params": {
          "name_": "Token name",
          "p12TokenAddr_": "`ERC20P12` token address",
          "symbol_": "Token symbol"
        }
      },
      "createLock(uint256,uint256)": {
        "params": {
          "unlockTime": "Epoch time when tokens unlock, rounded down to whole weeks",
          "value": "Amount to deposit"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Anyone (even a smart contract) can deposit for someone else, but      cannot extend their lockTime and deposit for a brand new user",
        "params": {
          "addr": "User's wallet address",
          "value": "Amount to add to user's lock"
        }
      },
      "findBlockEpoch(uint256,uint256)": {
        "params": {
          "blk": "Block to find",
          "maxEpoch": "Don't go beyond this epoch"
        },
        "returns": {
          "_0": "Approximate timestamp for block"
        }
      },
      "getLastUserSlope(address)": {
        "params": {
          "addr": "Address of the user wallet"
        },
        "returns": {
          "_0": "Value of the slope"
        }
      },
      "increaseAmount(uint256)": {
        "params": {
          "value": "Amount of tokens to deposit and add to the lock"
        }
      },
      "increaseUnlockTime(uint256)": {
        "params": {
          "unlockTime": "New epoch time for unlocking"
        }
      },
      "lockedEnd(address)": {
        "params": {
          "addr": "User wallet"
        },
        "returns": {
          "_0": "Epoch time of the lock end"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Return the address of the pending owner"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "details": "Adheres to the ERC20 `totalSupply` interface for Aragon compatibility",
        "returns": {
          "_0": "Total voting power"
        }
      },
      "totalSupplyAt(uint256)": {
        "params": {
          "blk": "Block to calculate the total voting power at"
        },
        "returns": {
          "_0": "Total voting power at `_block`"
        }
      },
      "transferOwnership(address,bool)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership"
      },
      "userPointHistoryTs(address,uint256)": {
        "params": {
          "addr": "User wallet address",
          "idx": "User epoch number"
        },
        "returns": {
          "_0": "Epoch time of the checkpoint"
        }
      },
      "withdraw()": {
        "details": "Only possible if the lock has expired or contract expired"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Get the current voting power for `msg.sender`"
      },
      "balanceOfAt(address,uint256)": {
        "notice": "Measure voting power of `addr` at block height `_block`"
      },
      "checkPoint()": {
        "notice": "Record global data to checkpoint"
      },
      "constructor": {
        "notice": "Contract constructor"
      },
      "createLock(uint256,uint256)": {
        "notice": "Deposit `value` tokens for `msg.sender` and lock until `unlock_time`"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit `value` tokens for `addr` and add to the lock"
      },
      "findBlockEpoch(uint256,uint256)": {
        "notice": "Binary search to estimate timestamp for block number"
      },
      "getLastUserSlope(address)": {
        "notice": "Get the most recently recorded rate of voting power decrease for `addr`"
      },
      "increaseAmount(uint256)": {
        "notice": "Deposit `value` additional tokens for `msg.sender`         without modifying the unlock time"
      },
      "increaseUnlockTime(uint256)": {
        "notice": "Extend the unlock time for `msg.sender` to `unlock_time`"
      },
      "lockedEnd(address)": {
        "notice": "Get timestamp when `addr`'s lock finishes"
      },
      "totalSupply()": {
        "notice": "Calculate total voting power"
      },
      "totalSupplyAt(uint256)": {
        "notice": "Calculate total voting power at some point in the past"
      },
      "userPointHistoryTs(address,uint256)": {
        "notice": "Get the timestamp for checkpoint `idx` for `addr`"
      },
      "withdraw()": {
        "notice": "Withdraw all tokens for `msg.sender`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2113,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8112,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8114,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2012,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "_paused",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 17383,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "p12Token",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17385,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "totalLockedP12",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17390,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "locked",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(LockedBalance)17473_storage)"
      },
      {
        "astId": 17392,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "epoch",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 17394,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "expired",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 17399,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "pointHistory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Point)17468_storage)"
      },
      {
        "astId": 17406,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "userPointHistory",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Point)17468_storage))"
      },
      {
        "astId": 17410,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "userPointEpoch",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17414,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "slopeChanges",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 17416,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "name",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 17418,
        "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
        "label": "symbol",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Point)17468_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct VotingEscrow.Point))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Point)17468_storage)"
      },
      "t_mapping(t_address,t_struct(LockedBalance)17473_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotingEscrow.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)17473_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_struct(Point)17468_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VotingEscrow.Point)",
        "numberOfBytes": "32",
        "value": "t_struct(Point)17468_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockedBalance)17473_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.LockedBalance",
        "members": [
          {
            "astId": 17470,
            "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 17472,
            "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)17468_storage": {
        "encoding": "inplace",
        "label": "struct VotingEscrow.Point",
        "members": [
          {
            "astId": 17461,
            "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 17463,
            "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
            "label": "slope",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 17465,
            "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
            "label": "ts",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17467,
            "contract": "contracts/token/VotingEscrow.sol:VotingEscrow",
            "label": "blk",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}