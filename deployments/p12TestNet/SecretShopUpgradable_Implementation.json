{
  "address": "0x59d7Cab3aedD66A47B242752E599F5D557bdbc12",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "itemHash",
          "type": "bytes32"
        }
      ],
      "name": "EvCancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isRemoval",
          "type": "bool"
        }
      ],
      "name": "EvCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isRemoval",
          "type": "bool"
        }
      ],
      "name": "EvDelegate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "error",
          "type": "bytes"
        }
      ],
      "name": "EvFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "EvFeeCapUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "itemHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderSalt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settleSalt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "intent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delegateType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "currency",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Market.OrderItem",
          "name": "item",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum Market.Op",
              "name": "op",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "orderIdx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemIdx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "itemHash",
              "type": "bytes32"
            },
            {
              "internalType": "contract IDelegate",
              "name": "executionDelegate",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "percentage",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                }
              ],
              "internalType": "struct Market.Fee[]",
              "name": "fees",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Market.SettleDetail",
          "name": "detail",
          "type": "tuple"
        }
      ],
      "name": "EvInventory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "itemHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EvProfit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCapPct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeCapPct_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "inventoryStatus",
      "outputs": [
        {
          "internalType": "enum Market.InvStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "network",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "intent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "delegateType",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IERC20Upgradeable",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "price",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Market.OrderItem[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "signVersion",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Market.Order[]",
              "name": "orders",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum Market.Op",
                  "name": "op",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "orderIdx",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemIdx",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "itemHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "contract IDelegate",
                  "name": "executionDelegate",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "percentage",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Market.Fee[]",
                  "name": "fees",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Market.SettleDetail[]",
              "name": "details",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "user",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "canFail",
                  "type": "bool"
                }
              ],
              "internalType": "struct Market.SettleShared",
              "name": "shared",
              "type": "tuple"
            }
          ],
          "internalType": "struct Market.RunInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "network",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "intent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegateType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20Upgradeable",
              "name": "currency",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Market.OrderItem[]",
              "name": "items",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "signVersion",
              "type": "uint8"
            }
          ],
          "internalType": "struct Market.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "canFail",
              "type": "bool"
            }
          ],
          "internalType": "struct Market.SettleShared",
          "name": "shared",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum Market.Op",
              "name": "op",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "orderIdx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemIdx",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "itemHash",
              "type": "bytes32"
            },
            {
              "internalType": "contract IDelegate",
              "name": "executionDelegate",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "percentage",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                }
              ],
              "internalType": "struct Market.Fee[]",
              "name": "fees",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Market.SettleDetail",
          "name": "detail",
          "type": "tuple"
        }
      ],
      "name": "runSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "toAdd",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "toRemove",
          "type": "address[]"
        }
      ],
      "name": "updateCurrencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "toAdd",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "toRemove",
          "type": "address[]"
        }
      ],
      "name": "updateDelegates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "updateFeeCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETHUpgradable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7dfc244371eba8191b115a4ce4e27ff2f74a23beb2310f38e6282d8f71e8614d",
  "receipt": {
    "to": null,
    "from": "0xfeD03676c595DD1F1c6716a446cD44B4C90AD290",
    "contractAddress": "0x59d7Cab3aedD66A47B242752E599F5D557bdbc12",
    "transactionIndex": 0,
    "gasUsed": "3474425",
    "logsBloom": "0x
    "blockHash": "0xb86909a8a9a8743d9c0e0024eecaa9c54ef470476e9a73db38929b0e71719918",
    "transactionHash": "0x7dfc244371eba8191b115a4ce4e27ff2f74a23beb2310f38e6282d8f71e8614d",
    "logs": [],
    "blockNumber": 1206193,
    "cumulativeGasUsed": "3474425",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1f7f80fb95b6efcc6f464d7df403eaaa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"itemHash\",\"type\":\"bytes32\"}],\"name\":\"EvCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRemoval\",\"type\":\"bool\"}],\"name\":\"EvCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRemoval\",\"type\":\"bool\"}],\"name\":\"EvDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"error\",\"type\":\"bytes\"}],\"name\":\"EvFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"EvFeeCapUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"itemHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderSalt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settleSalt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"intent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delegateType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"currency\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Market.OrderItem\",\"name\":\"item\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Market.Op\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itemHash\",\"type\":\"bytes32\"},{\"internalType\":\"contract IDelegate\",\"name\":\"executionDelegate\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct Market.Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct Market.SettleDetail\",\"name\":\"detail\",\"type\":\"tuple\"}],\"name\":\"EvInventory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"itemHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCapPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeCapPct_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"inventoryStatus\",\"outputs\":[{\"internalType\":\"enum Market.InvStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegateType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"currency\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Market.OrderItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"signVersion\",\"type\":\"uint8\"}],\"internalType\":\"struct Market.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum Market.Op\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itemHash\",\"type\":\"bytes32\"},{\"internalType\":\"contract IDelegate\",\"name\":\"executionDelegate\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct Market.Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Market.SettleDetail[]\",\"name\":\"details\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canFail\",\"type\":\"bool\"}],\"internalType\":\"struct Market.SettleShared\",\"name\":\"shared\",\"type\":\"tuple\"}],\"internalType\":\"struct Market.RunInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"network\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegateType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"currency\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Market.OrderItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"signVersion\",\"type\":\"uint8\"}],\"internalType\":\"struct Market.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"canFail\",\"type\":\"bool\"}],\"internalType\":\"struct Market.SettleShared\",\"name\":\"shared\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Market.Op\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"orderIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"itemHash\",\"type\":\"bytes32\"},{\"internalType\":\"contract IDelegate\",\"name\":\"executionDelegate\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct Market.Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Market.SettleDetail\",\"name\":\"detail\",\"type\":\"tuple\"}],\"name\":\"runSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"toAdd\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"toRemove\",\"type\":\"address[]\"}],\"name\":\"updateCurrencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toRemove\",\"type\":\"address[]\"}],\"name\":\"updateDelegates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"updateFeeCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETHUpgradable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"pending owner call this function to claim ownership\"},\"initialize(uint256,address)\":{\"details\":\"initialize\",\"params\":{\"feeCapPct_\":\"max fee percentage\",\"weth_\":\"address of wrapped eth\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Return the address of the pending owner\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"run(((uint256,address,uint256,uint256,uint256,uint256,address,(uint256,bytes)[],bytes32,bytes32,uint8,uint8)[],(uint8,uint256,uint256,uint256,bytes32,address,(uint256,address)[])[],(uint256,uint256,address,bool)))\":{\"details\":\"Entry of a contract call\",\"params\":{\"input\":\"a struct that contains all data\"}},\"runSingle((uint256,address,uint256,uint256,uint256,uint256,address,(uint256,bytes)[],bytes32,bytes32,uint8,uint8),(uint256,uint256,address,bool),(uint8,uint256,uint256,uint256,bytes32,address,(uint256,address)[]))\":{\"details\":\"run a single order\",\"params\":{\"detail\":\"detail by the taker\",\"order\":\"order by the maker\",\"shared\":\"some option of the taker\"}},\"transferOwnership(address,bool)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership\"},\"updateCurrencies(address[],address[])\":{\"details\":\"update Currencies address\",\"params\":{\"toAdd\":\"the array of currency address that want to add\",\"toRemove\":\"the array to currency address that want to remove\"}},\"updateDelegates(address[],address[])\":{\"details\":\"update Delegates address\",\"params\":{\"toAdd\":\"the array of delegate address that want to add\",\"toRemove\":\"the array to delegate address that want to remove\"}},\"updateFeeCap(uint256)\":{\"params\":{\"val\":\"new Fee Cap\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"RATE_BASE\":{\"details\":\"precision of the parameters \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/secretShop/SecretShopUpgradable.sol\":\"SecretShopUpgradable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// Refer to https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol and https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/access/OwnableUpgradeable.sol\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\n\\ncontract SafeOwnableUpgradeable is Initializable, ContextUpgradeable {\\n  address private _owner;\\n  address private _pendingOwner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  function __Ownable_init() internal onlyInitializing {\\n    __Ownable_init_unchained();\\n  }\\n\\n  function __Ownable_init_unchained() internal onlyInitializing {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Return the address of the pending owner\\n   */\\n  function pendingOwner() public view virtual returns (address) {\\n    return _pendingOwner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), 'SafeOwnable: caller not owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   * Note If direct is false, it will set an pending owner and the OwnerShipTransferring\\n   * only happens when the pending owner claim the ownership\\n   */\\n  function transferOwnership(address newOwner, bool direct) public virtual onlyOwner {\\n    require(newOwner != address(0), 'SafeOwnable: new owner is 0');\\n    if (direct) {\\n      _transferOwnership(newOwner);\\n    } else {\\n      _transferPendingOwnership(newOwner);\\n    }\\n  }\\n\\n  /**\\n   * @dev pending owner call this function to claim ownership\\n   */\\n  function claimOwnership() public {\\n    require(msg.sender == _pendingOwner, 'SafeOwnable: caller != pending');\\n\\n    _claimOwnership();\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev set the pending owner address\\n   * Internal function without access restriction.\\n   */\\n  function _transferPendingOwnership(address newOwner) internal virtual {\\n    _pendingOwner = newOwner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _claimOwnership() internal virtual {\\n    address oldOwner = _owner;\\n    emit OwnershipTransferred(oldOwner, _pendingOwner);\\n\\n    _owner = _pendingOwner;\\n    _pendingOwner = address(0);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x8de5eb1e824cf860909d77028719522b6bcf5b4cb96293e7f95c2d1f4299147b\",\"license\":\"GPL-3.0-only\"},\"contracts/secretShop/MarketConsts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport './interfaces/IDelegate.sol';\\nimport './interfaces/IWETHUpgradable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\n\\nlibrary Market {\\n  uint256 public constant INTENT_SELL = 1;\\n  uint256 public constant INTENT_BUY = 2;\\n\\n  uint8 public constant SIGN_V1 = 1;\\n\\n  struct OrderItem {\\n    uint256 price;\\n    /** why bytes: because struct too complex will be omitted */\\n    bytes data;\\n  }\\n\\n  // An Order\\n  struct Order {\\n    /* salt, a random number */\\n    uint256 salt;\\n    /* address which create order */\\n    address user;\\n    /** ChainId explain which network */\\n    uint256 network;\\n    /** which intent, 1 for sell */\\n    uint256 intent;\\n    /** just 1 at v1 */\\n    uint256 delegateType;\\n    /** order end ddl */\\n    uint256 deadline;\\n    /**\\n      address of the ERC20 coin to trade\\n    */\\n    IERC20Upgradeable currency;\\n    /**\\n      items in an Order\\n    */\\n    OrderItem[] items;\\n    /**\\n      signature for Order, eip 2098 would be better\\n    */\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    /**\\n      could be 1 now\\n    */\\n    uint8 signVersion;\\n  }\\n\\n  struct Fee {\\n    uint256 percentage;\\n    address to;\\n  }\\n\\n  struct SettleDetail {\\n    // order operation type\\n    Market.Op op;\\n    //\\n    uint256 orderIdx;\\n    //\\n    uint256 itemIdx;\\n    //\\n    uint256 price;\\n    //\\n    bytes32 itemHash;\\n    // delegate which address to transfer token\\n    IDelegate executionDelegate;\\n    Fee[] fees;\\n  }\\n\\n  /**\\n   * @dev information from who send this tx\\n   */\\n  struct SettleShared {\\n    uint256 salt;\\n    uint256 deadline;\\n    address user;\\n    /**\\n     * can one order fail\\n     * if true, tx will revert if one order fail\\n     * else, tx didn't fail if one\\n     */\\n    bool canFail;\\n  }\\n\\n  struct RunInput {\\n    // one Order match one SettleDetail\\n    Order[] orders;\\n    SettleDetail[] details;\\n    SettleShared shared;\\n  }\\n\\n  enum InvStatus {\\n    NEW,\\n    COMPLETE,\\n    CANCELLED\\n  }\\n\\n  /**\\n    Operation\\n  */\\n  enum Op {\\n    INVALID,\\n    COMPLETE_SELL_OFFER,\\n    COMPLETE_BUY_OFFER,\\n    CANCEL_OFFER\\n  }\\n\\n  enum DelegationType {\\n    INVALID,\\n    ERC1155,\\n    ERC721\\n  }\\n}\\n\",\"keccak256\":\"0xb46dc7d278f3ca8049bd16ded6aefe9d40ea89a1040ca03b91e4216881da19e4\",\"license\":\"GPL-3.0-only\"},\"contracts/secretShop/SecretShopStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport './MarketConsts.sol';\\n\\nabstract contract SecretShopStorage {\\n  /**\\n   * @dev fee Cap\\n   */\\n  uint256 public feeCapPct;\\n  /**\\n   * @dev DOMAIN_SEPARATOR for EIP712\\n   */\\n  bytes32 public domainSeparator;\\n\\n  IWETHUpgradable public weth;\\n\\n  uint256[47] private __gap;\\n\\n  /**\\n   * @dev store delegator contract status\\n   */\\n  mapping(address => bool) public delegates;\\n\\n  /**\\n   * @dev store currency supported\\n   */\\n  mapping(IERC20Upgradeable => bool) public currencies;\\n\\n  /**\\n   * @dev store itemHash status\\n   */\\n  mapping(bytes32 => Market.InvStatus) public inventoryStatus;\\n}\\n\",\"keccak256\":\"0xdfaed0aff150b8b5e5ca62730e214646c58a8ece823397ecbe257e8ae23f88ab\",\"license\":\"GPL-3.0-only\"},\"contracts/secretShop/SecretShopUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport './interfaces/IDelegate.sol';\\nimport './interfaces/IWETHUpgradable.sol';\\n\\nimport './interfaces/ISecretShopUpgradable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport './SecretShopStorage.sol';\\nimport '../access/SafeOwnableUpgradeable.sol';\\n\\ncontract SecretShopUpgradable is\\n  SecretShopStorage,\\n  ISecretShopUpgradable,\\n  ReentrancyGuardUpgradeable,\\n  SafeOwnableUpgradeable,\\n  PausableUpgradeable,\\n  UUPSUpgradeable\\n{\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /** @dev precision of the parameters */\\n  uint256 public constant RATE_BASE = 1e6;\\n\\n  /**\\n   * @dev for contract to receive native token\\n   */\\n  receive() external payable {}\\n\\n  /**\\n   * @dev run a single order\\n   * @param order order by the maker\\n   * @param shared some option of the taker\\n   * @param detail detail by the taker\\n   */\\n  function runSingle(\\n    Market.Order memory order,\\n    Market.SettleShared memory shared,\\n    Market.SettleDetail memory detail\\n  ) external virtual override returns (uint256) {\\n    require(msg.sender == address(this), 'SecretShop: unsafe call');\\n\\n    return _run(order, shared, detail);\\n  }\\n\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @dev initialize\\n   * @param feeCapPct_ max fee percentage\\n   * @param weth_ address of wrapped eth\\n   */\\n  function initialize(uint256 feeCapPct_, address weth_) public initializer {\\n    feeCapPct = feeCapPct_;\\n    weth = IWETHUpgradable(weth_);\\n    bytes32 eip712DomainTypeHash = keccak256(\\n      'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n    );\\n\\n    // if changed, not compatible with old version\\n    domainSeparator = keccak256(\\n      abi.encode(\\n        eip712DomainTypeHash,\\n        keccak256(bytes('P12 SecretShop')),\\n        keccak256(bytes('1.0.0')),\\n        block.chainid,\\n        address(this)\\n      )\\n    );\\n\\n    __ReentrancyGuard_init_unchained();\\n    __Pausable_init_unchained();\\n    __Ownable_init_unchained();\\n  }\\n\\n  /**\\n   * @param val new Fee Cap\\n   */\\n  function updateFeeCap(uint256 val) public virtual override onlyOwner {\\n    feeCapPct = val;\\n    emit EvFeeCapUpdate(val);\\n  }\\n\\n  /**\\n   * @dev update Delegates address\\n   * @param toAdd the array of delegate address that want to add\\n   * @param toRemove the array to delegate address that want to remove\\n   */\\n  function updateDelegates(address[] calldata toAdd, address[] calldata toRemove) public virtual override onlyOwner {\\n    for (uint256 i = 0; i < toAdd.length; i++) {\\n      delegates[toAdd[i]] = true;\\n      emit EvDelegate(toAdd[i], false);\\n    }\\n    for (uint256 i = 0; i < toRemove.length; i++) {\\n      delete delegates[toRemove[i]];\\n      emit EvDelegate(toRemove[i], true);\\n    }\\n  }\\n\\n  /**\\n   * @dev update Currencies address\\n   * @param toAdd the array of currency address that want to add\\n   * @param toRemove the array to currency address that want to remove\\n   */\\n  function updateCurrencies(IERC20Upgradeable[] memory toAdd, IERC20Upgradeable[] memory toRemove) public override onlyOwner {\\n    for (uint256 i = 0; i < toAdd.length; i++) {\\n      currencies[toAdd[i]] = true;\\n      emit EvCurrency(toAdd[i], false);\\n    }\\n    for (uint256 i = 0; i < toRemove.length; i++) {\\n      delete currencies[toRemove[i]];\\n      emit EvCurrency(toRemove[i], true);\\n    }\\n  }\\n\\n  /**\\n   * @dev Entry of a contract call\\n   * @param input a struct that contains all data\\n   */\\n  function run(Market.RunInput memory input) public payable virtual override nonReentrant whenNotPaused {\\n    require(input.shared.deadline > block.timestamp, 'SecretShop: deadline reached');\\n    require(msg.sender == input.shared.user, 'SecretShop: sender not match');\\n\\n    uint256 amountEth = msg.value;\\n\\n    /**\\n     * @dev Iterate over multiple orders and verify signatures\\n     */\\n    for (uint256 i = 0; i < input.orders.length; i++) {\\n      _verifyOrderSignature(input.orders[i]);\\n    }\\n\\n    /**\\n     * @dev try to execute after verify\\n     */\\n    for (uint256 i = 0; i < input.details.length; i++) {\\n      Market.SettleDetail memory detail = input.details[i];\\n      Market.Order memory order = input.orders[detail.orderIdx];\\n      if (input.shared.canFail) {\\n        try ISecretShopUpgradable(address(this)).runSingle(order, input.shared, detail) returns (uint256 ethPayment) {\\n          amountEth -= ethPayment;\\n        } catch Error(string memory err) {\\n          emit EvFailure(i, bytes(err));\\n        } catch (bytes memory err) {\\n          emit EvFailure(i, err);\\n        }\\n      } else {\\n        amountEth -= _run(order, input.shared, detail);\\n      }\\n    }\\n\\n    // refund extra native token\\n    require(payable(msg.sender).send(amountEth), 'SecretShop: refund token fail');\\n  }\\n\\n  function _emitInventory(\\n    bytes32 itemHash,\\n    Market.Order memory order,\\n    Market.OrderItem memory item,\\n    Market.SettleShared memory shared,\\n    Market.SettleDetail memory detail\\n  ) internal virtual {\\n    emit EvInventory(\\n      itemHash,\\n      order.user,\\n      shared.user,\\n      order.salt,\\n      shared.salt,\\n      order.intent,\\n      order.delegateType,\\n      order.deadline,\\n      order.currency,\\n      item,\\n      detail\\n    );\\n  }\\n\\n  /**\\n   * @dev internal function, real implementation\\n   * @dev make single trade to be achieved\\n   * @param order order by the maker\\n   * @param shared some option of the taker\\n   * @param detail detail by the taker\\n   */\\n  function _run(\\n    Market.Order memory order,\\n    Market.SettleShared memory shared,\\n    Market.SettleDetail memory detail\\n  ) internal virtual returns (uint256) {\\n    uint256 nativeAmount = 0;\\n\\n    Market.OrderItem memory item = order.items[detail.itemIdx];\\n    bytes32 itemHash = _hashItem(order, item);\\n\\n    {\\n      require(itemHash == detail.itemHash, 'SecretShop: hash not match');\\n      require(order.network == block.chainid, 'SecretShop: wrong network');\\n      require(\\n        address(detail.executionDelegate) != address(0) && delegates[address(detail.executionDelegate)],\\n        'SecretShop: unknown delegate'\\n      );\\n      require(currencies[order.currency], 'SecretShop: wrong currency');\\n    }\\n\\n    bytes memory data = item.data;\\n\\n    if (detail.op == Market.Op.COMPLETE_SELL_OFFER) {\\n      /** @dev COMPLETE_SELL_OFFER */\\n      require(inventoryStatus[itemHash] == Market.InvStatus.NEW, 'SecretShop: sold or canceled');\\n      require(order.intent == Market.INTENT_SELL, 'SecretShop: intent != sell');\\n      _assertDelegation(order, detail);\\n      require(order.deadline > block.timestamp, 'SecretShop: deadline reached');\\n      require(detail.price >= item.price, 'SecretShop: underpaid');\\n\\n      /**\\n       * @dev transfer token from buyer address to this contract\\n       */\\n      nativeAmount = _takePayment(order.currency, shared.user, detail.price);\\n      require(detail.executionDelegate.executeSell(order.user, shared.user, data), 'SecretShop: delegation error');\\n\\n      _distributeFeeAndProfit(itemHash, order.user, order.currency, detail, detail.price);\\n      inventoryStatus[itemHash] = Market.InvStatus.COMPLETE;\\n    } else if (detail.op == Market.Op.COMPLETE_BUY_OFFER) {\\n      /** @dev COMPLETE_BUY_OFFER */\\n      require(inventoryStatus[itemHash] == Market.InvStatus.NEW, 'SecretShop: sold or canceled');\\n      require(order.intent == Market.INTENT_BUY, 'SecretShop: intent != sell');\\n\\n      _assertDelegation(order, detail);\\n\\n      require(order.deadline > block.timestamp, 'SecretShop: deadline reached');\\n      require(detail.price >= item.price, 'SecretShop: underpaid');\\n\\n      /**\\n       * @dev transfer token from buyer address to this contract\\n       */\\n      nativeAmount = _takePayment(order.currency, order.user, detail.price);\\n      require(detail.executionDelegate.executeSell(shared.user, order.user, data), 'SecretShop: delegation error');\\n\\n      _distributeFeeAndProfit(itemHash, shared.user, order.currency, detail, detail.price);\\n      inventoryStatus[itemHash] = Market.InvStatus.COMPLETE;\\n    } else if (detail.op == Market.Op.CANCEL_OFFER) {\\n      /** CANCEL_OFFER */\\n      require(inventoryStatus[itemHash] == Market.InvStatus.NEW, 'SecretShop: unable to cancel');\\n      require(order.user == msg.sender, 'SecretShop: no permit cancel');\\n      require(order.deadline > block.timestamp, 'SecretShop: deadline reached');\\n      inventoryStatus[itemHash] = Market.InvStatus.CANCELLED;\\n      emit EvCancel(itemHash);\\n    } else {\\n      revert('SecretShop: unknown op');\\n    }\\n\\n    _emitInventory(itemHash, order, item, shared, detail);\\n    return nativeAmount;\\n  }\\n\\n  /**\\n   * @dev transfer some kind ERC20 to this contract\\n   * @param currency currency's address\\n   * @param from who pays\\n   * @param amount how much pay\\n   */\\n  function _takePayment(\\n    IERC20Upgradeable currency,\\n    address from,\\n    uint256 amount\\n  ) internal virtual returns (uint256) {\\n    if (amount > 0) {\\n      if (_isNative(currency)) {\\n        return amount;\\n      } else {\\n        currency.safeTransferFrom(from, address(this), amount);\\n      }\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev transfer some kind ERC20\\n   * @param currency currency's address\\n   * @param to who receive\\n   * @param amount how much receive\\n   */\\n  function _transferTo(\\n    IERC20Upgradeable currency,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {\\n    if (amount > 0) {\\n      if (_isNative(currency)) {\\n        AddressUpgradeable.sendValue(payable(to), amount);\\n      } else {\\n        currency.safeTransfer(to, amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev distribute fees and give extra to seller\\n   * @param itemHash the item's hash\\n   * @param seller who sell the item\\n   * @param currency currency's address\\n   * @param sd detail by the taker\\n   * @param price the item's price\\n   */\\n  function _distributeFeeAndProfit(\\n    bytes32 itemHash,\\n    address seller,\\n    IERC20Upgradeable currency,\\n    Market.SettleDetail memory sd,\\n    uint256 price\\n  ) internal virtual {\\n    uint256 payment = price;\\n    uint256 totalFeePct;\\n\\n    /**\\n     * @dev distribute fees\\n     */\\n    for (uint256 i = 0; i < sd.fees.length; i++) {\\n      Market.Fee memory fee = sd.fees[i];\\n      totalFeePct += fee.percentage;\\n      uint256 amount = (price * fee.percentage) / RATE_BASE;\\n      payment -= amount;\\n      _transferTo(currency, fee.to, amount);\\n    }\\n\\n    require(feeCapPct >= totalFeePct, 'total fee cap exceeded');\\n\\n    /**\\n     * @dev give extra to seller\\n     */\\n    _transferTo(currency, seller, payment);\\n    emit EvProfit(itemHash, address(currency), seller, payment);\\n  }\\n\\n  /** upgrade function */\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n  /**\\n   * @dev judge whether token is chain native token\\n   * @param currency address of the currency, 0 for native token\\n   * @return bool whether the token is a native token\\n   */\\n  function _isNative(IERC20Upgradeable currency) internal view virtual returns (bool) {\\n    return address(currency) == address(0);\\n  }\\n\\n  /**\\n   * @dev verify whether the order data is real, necessary for security\\n   * @param order order by the maker\\n   */\\n  function _verifyOrderSignature(Market.Order memory order) internal view virtual {\\n    address orderSigner;\\n\\n    if (order.signVersion == Market.SIGN_V1) {\\n      bytes32 dataHash = ECDSA.toTypedDataHash(domainSeparator, _hash(order));\\n      orderSigner = ECDSA.recover(dataHash, order.v, order.r, order.s);\\n    } else {\\n      revert('SecretShop: wrong sig version');\\n    }\\n\\n    require(orderSigner == order.user, 'SecretShop: sig not match');\\n  }\\n\\n  /**\\n   * @dev hash an item Data to calculate itemHash\\n   * @param order order by the maker\\n   * @param item which item to be hashed in the order\\n   * @return hash the item's hash, which is unique\\n   */\\n  function _hashItem(Market.Order memory order, Market.OrderItem memory item) internal view virtual returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          order.salt,\\n          order.user,\\n          order.network,\\n          order.intent,\\n          order.delegateType,\\n          order.deadline,\\n          order.currency,\\n          item\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev judge delegate type\\n   * @param order order by the maker\\n   * @param detail settle detail by the taker\\n   */\\n  function _assertDelegation(Market.Order memory order, Market.SettleDetail memory detail) internal view virtual {\\n    require(detail.executionDelegate.delegateType() == order.delegateType, 'SecretShop: delegation error');\\n  }\\n\\n  /**\\n   * @dev hash typed data of an Order\\n   * @param order order by the maker\\n   * @return hash typed data hash\\n   */\\n  function _hash(Market.Order memory order) private pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          keccak256(\\n            'Order(uint256 salt,address user,uint256 network,uint256 intent,uint256 delegateType,uint256 deadline,address currency,uint256 length,OrderItem[] items)OrderItem(uint256 price,bytes data)'\\n          ),\\n          order.salt,\\n          order.user,\\n          order.network,\\n          order.intent,\\n          order.delegateType,\\n          order.deadline,\\n          order.currency,\\n          order.items.length,\\n          _hash(order.items)\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev hash typed data of a array of orderItem\\n   * @param orderItems[] the array of the orderItem\\n   * @return hash typed data hash\\n   */\\n  function _hash(Market.OrderItem[] memory orderItems) private pure returns (bytes32) {\\n    bytes memory h;\\n    for (uint256 i = 0; i < orderItems.length; i++) {\\n      h = abi.encodePacked(h, _hash(orderItems[i]));\\n    }\\n    return keccak256(h);\\n  }\\n\\n  /**\\n   * @dev hash typed data of an orderItem\\n   * @param orderItem orderItem\\n   * @return hash typed data hash\\n   */\\n\\n  function _hash(Market.OrderItem memory orderItem) private pure returns (bytes32) {\\n    return keccak256(abi.encode(keccak256('OrderItem(uint256 price,bytes data)'), orderItem.price, keccak256(orderItem.data)));\\n  }\\n}\\n\",\"keccak256\":\"0x3277aabc80f7ef9e4c722dbe91446a52ca5a2ecb8b25ebf9a9a085888140d067\",\"license\":\"GPL-3.0-only\"},\"contracts/secretShop/interfaces/IDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\ninterface IDelegate {\\n  function delegateType() external view returns (uint256);\\n\\n  function executeSell(\\n    address seller,\\n    address buyer,\\n    bytes calldata data\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x6fc77df4bc7f0676906f87e16a5c7ed1f0e38945e7f82f32ff064e6e189d800a\",\"license\":\"GPL-3.0-only\"},\"contracts/secretShop/interfaces/ISecretShopUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\nimport '../MarketConsts.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\ninterface ISecretShopUpgradable {\\n  /**\\n   * @dev event to record how much seller earns\\n   */\\n  event EvProfit(bytes32 itemHash, address currency, address to, uint256 amount);\\n\\n  /**\\n   * @dev event to record a item order matched\\n   */\\n  event EvInventory(\\n    bytes32 indexed itemHash,\\n    address maker,\\n    address taker,\\n    uint256 orderSalt,\\n    uint256 settleSalt,\\n    uint256 intent,\\n    uint256 delegateType,\\n    uint256 deadline,\\n    IERC20Upgradeable currency,\\n    Market.OrderItem item,\\n    Market.SettleDetail detail\\n  );\\n\\n  /**\\n   * @dev event to record delegator contract change\\n   */\\n  event EvDelegate(address delegate, bool isRemoval);\\n\\n  /**\\n   * @dev event to record currency supported change\\n   */\\n  event EvCurrency(IERC20Upgradeable currency, bool isRemoval);\\n\\n  /**\\n   * @dev event to record fee update\\n   */\\n  event EvFeeCapUpdate(uint256 newValue);\\n  /**\\n   * @dev event to record a order canceled\\n   */\\n  event EvCancel(bytes32 indexed itemHash);\\n  /**\\n   * @dev event to record a order failing\\n   */\\n  event EvFailure(uint256 index, bytes error);\\n\\n  function runSingle(\\n    Market.Order memory,\\n    Market.SettleShared memory,\\n    Market.SettleDetail memory\\n  ) external returns (uint256);\\n\\n  function updateFeeCap(uint256) external;\\n\\n  function updateDelegates(address[] calldata, address[] calldata) external;\\n\\n  function updateCurrencies(IERC20Upgradeable[] calldata, IERC20Upgradeable[] calldata) external;\\n\\n  function run(Market.RunInput memory input) external payable;\\n}\\n\",\"keccak256\":\"0x4921105232bccf4d6061b091d90a30ea75b90ff63ff1daeac782305dbafe927e\",\"license\":\"GPL-3.0-only\"},\"contracts/secretShop/interfaces/IWETHUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\ninterface IWETHUpgradable is IERC20Upgradeable {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0xf8362bb88f787666b366b08a70ba214adecf9973af8956b651f24f264f5b488b\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c80638456cb59116100b6578063a90419121161006f578063a9041912146103b4578063b242e534146103c7578063da35a26f146103e7578063e30c397814610407578063e59f739a14610425578063f698da251461044557600080fd5b80638456cb59146102ee5780638c7c8f84146103035780638da5cb5b14610323578063912c860c1461034157806395835fea1461037e5780639fb514671461039e57600080fd5b80634f1ef286116101085780634f1ef2861461022957806352d1902d1461023c578063587cde1e146102515780635c975abb146102915780636036cba3146102a9578063715018a6146102d957600080fd5b80630873c6ec1461015b5780631819ecc9146101855780633659cfe6146101a55780633f4ba83a146101c75780633fc8cef3146101dc5780634e71e0c81461021457600080fd5b3661015657005b600080fd5b34801561016757600080fd5b50610172620f424081565b6040519081526020015b60405180910390f35b34801561019157600080fd5b506101726101a036600461318a565b61045b565b3480156101b157600080fd5b506101c56101c03660046131fe565b6104c6565b005b3480156101d357600080fd5b506101c56105a5565b3480156101e857600080fd5b506002546101fc906001600160a01b031681565b6040516001600160a01b03909116815260200161017c565b34801561022057600080fd5b506101c56105d9565b6101c561023736600461321b565b61063b565b34801561024857600080fd5b5061017261070b565b34801561025d57600080fd5b5061028161026c3660046131fe565b60326020526000908152604090205460ff1681565b604051901515815260200161017c565b34801561029d57600080fd5b5060cc5460ff16610281565b3480156102b557600080fd5b506102816102c43660046131fe565b60336020526000908152604090205460ff1681565b3480156102e557600080fd5b506101c56107bf565b3480156102fa57600080fd5b506101c56107f3565b34801561030f57600080fd5b506101c561031e3660046132e4565b610825565b34801561032f57600080fd5b50609a546001600160a01b03166101fc565b34801561034d57600080fd5b5061037161035c36600461333d565b60346020526000908152604090205460ff1681565b60405161017c919061336c565b34801561038a57600080fd5b506101c561039936600461333d565b610a08565b3480156103aa57600080fd5b5061017260005481565b6101c56103c2366004613410565b610a6d565b3480156103d357600080fd5b506101c56103e236600461352e565b610e2e565b3480156103f357600080fd5b506101c5610402366004613567565b610edc565b34801561041357600080fd5b50609b546001600160a01b03166101fc565b34801561043157600080fd5b506101c56104403660046135d7565b6110ae565b34801561045157600080fd5b5061017260015481565b60003330146104b15760405162461bcd60e51b815260206004820152601760248201527f53656372657453686f703a20756e736166652063616c6c00000000000000000060448201526064015b60405180910390fd5b6104bc84848461128d565b90505b9392505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361050e5760405162461bcd60e51b81526004016104a890613642565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610557600080516020613d6d833981519152546001600160a01b031690565b6001600160a01b03161461057d5760405162461bcd60e51b81526004016104a89061368e565b61058681611a73565b604080516000808252602082019092526105a291839190611a9d565b50565b609a546001600160a01b031633146105cf5760405162461bcd60e51b81526004016104a8906136da565b6105d7611c08565b565b609b546001600160a01b031633146106335760405162461bcd60e51b815260206004820152601e60248201527f536166654f776e61626c653a2063616c6c657220213d2070656e64696e67000060448201526064016104a8565b6105d7611c9b565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106835760405162461bcd60e51b81526004016104a890613642565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106cc600080516020613d6d833981519152546001600160a01b031690565b6001600160a01b0316146106f25760405162461bcd60e51b81526004016104a89061368e565b6106fb82611a73565b61070782826001611a9d565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107ab5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016104a8565b50600080516020613d6d8339815191525b90565b609a546001600160a01b031633146107e95760405162461bcd60e51b81526004016104a8906136da565b6105d76000611d04565b609a546001600160a01b0316331461081d5760405162461bcd60e51b81526004016104a8906136da565b6105d7611d56565b609a546001600160a01b0316331461084f5760405162461bcd60e51b81526004016104a8906136da565b60005b825181101561092d5760016033600085848151811061087357610873613711565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f394e2e27feefcc03344b82ebb5995989b1d85a589c0cba6643f4e87f774a89ee8382815181106108e5576108e5613711565b602002602001015160006040516109139291906001600160a01b039290921682521515602082015260400190565b60405180910390a1806109258161373d565b915050610852565b5060005b8151811015610a03576033600083838151811061095057610950613711565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81549060ff02191690557f394e2e27feefcc03344b82ebb5995989b1d85a589c0cba6643f4e87f774a89ee8282815181106109bb576109bb613711565b602002602001015160016040516109e99291906001600160a01b039290921682521515602082015260400190565b60405180910390a1806109fb8161373d565b915050610931565b505050565b609a546001600160a01b03163314610a325760405162461bcd60e51b81526004016104a8906136da565b60008190556040518181527f19fc3beddeea399f0966d5f8664ad94006f16a10fb28c4e2fe6fae62626b71289060200160405180910390a150565b600260365403610abf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104a8565b600260365560cc5460ff1615610b0a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104a8565b4281604001516020015111610b315760405162461bcd60e51b81526004016104a890613756565b8060400151604001516001600160a01b0316336001600160a01b031614610b9a5760405162461bcd60e51b815260206004820152601c60248201527f53656372657453686f703a2073656e646572206e6f74206d617463680000000060448201526064016104a8565b3460005b825151811015610be057610bce83600001518281518110610bc157610bc1613711565b6020026020010151611dd1565b80610bd88161373d565b915050610b9e565b5060005b826020015151811015610dbc57600083602001518281518110610c0957610c09613711565b6020026020010151905060008460000151826020015181518110610c2f57610c2f613711565b6020026020010151905084604001516060015115610d8b576040808601519051631819ecc960e01b81523091631819ecc991610c719185918790600401613916565b6020604051808303816000875af1925050508015610cac575060408051601f3d908101601f19168201909252610ca991810190613a38565b60015b610d7957610cb8613a51565b806308c379a003610d165750610ccc613a6c565b80610cd75750610d18565b7f97c789f43a3e7ac27906b5fbdac832f54441771021fba06f71207d9be6d4b6238482604051610d08929190613af5565b60405180910390a150610da7565b505b3d808015610d42576040519150601f19603f3d011682016040523d82523d6000602084013e610d47565b606091505b507f97c789f43a3e7ac27906b5fbdac832f54441771021fba06f71207d9be6d4b6238482604051610d08929190613af5565b610d838186613b0e565b945050610da7565b610d9a8186604001518461128d565b610da49085613b0e565b93505b50508080610db49061373d565b915050610be4565b50604051339082156108fc029083906000818181858888f19350505050610e255760405162461bcd60e51b815260206004820152601d60248201527f53656372657453686f703a20726566756e6420746f6b656e206661696c00000060448201526064016104a8565b50506001603655565b609a546001600160a01b03163314610e585760405162461bcd60e51b81526004016104a8906136da565b6001600160a01b038216610eae5760405162461bcd60e51b815260206004820152601b60248201527f536166654f776e61626c653a206e6577206f776e65722069732030000000000060448201526064016104a8565b8015610ebd5761070782611d04565b609b80546001600160a01b0319166001600160a01b0384161790555050565b603554610100900460ff16610ef75760355460ff1615610efb565b303b155b610f5e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104a8565b603554610100900460ff16158015610f80576035805461ffff19166101011790555b6000839055600280546001600160a01b0319166001600160a01b038416179055604080518082018252600e81526d05031322053656372657453686f760941b6020918201528151808301835260058152640312e302e360dc1b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9181018290527f33c9c717ac4f1d9042c21834c184a1e067e7806976206baad1ec9a5cc5aba1d0928101929092527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60608301524660808301523060a08301529060c00160408051601f198184030181529190528051602090910120600155611087611ece565b61108f611efc565b611097611f2f565b508015610a03576035805461ff0019169055505050565b609a546001600160a01b031633146110d85760405162461bcd60e51b81526004016104a8906136da565b60005b838110156111b3576001603260008787858181106110fb576110fb613711565b905060200201602081019061111091906131fe565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557f4a31a64b928a0e8aff42ef84d144ffe82d08cb41c8027060593135e2026899b285858381811061116b5761116b613711565b905060200201602081019061118091906131fe565b604080516001600160a01b039092168252600060208301520160405180910390a1806111ab8161373d565b9150506110db565b5060005b8181101561128657603260008484848181106111d5576111d5613711565b90506020020160208101906111ea91906131fe565b6001600160a01b031681526020810191909152604001600020805460ff191690557f4a31a64b928a0e8aff42ef84d144ffe82d08cb41c8027060593135e2026899b283838381811061123e5761123e613711565b905060200201602081019061125391906131fe565b604080516001600160a01b039092168252600160208301520160405180910390a18061127e8161373d565b9150506111b7565b5050505050565b6000806000905060008560e001518460400151815181106112b0576112b0613711565b6020026020010151905060006112c68783611f5f565b90508460800151811461131b5760405162461bcd60e51b815260206004820152601a60248201527f53656372657453686f703a2068617368206e6f74206d6174636800000000000060448201526064016104a8565b4687604001511461136e5760405162461bcd60e51b815260206004820152601960248201527f53656372657453686f703a2077726f6e67206e6574776f726b0000000000000060448201526064016104a8565b60a08501516001600160a01b0316158015906113a6575060a08501516001600160a01b031660009081526032602052604090205460ff165b6113f25760405162461bcd60e51b815260206004820152601c60248201527f53656372657453686f703a20756e6b6e6f776e2064656c65676174650000000060448201526064016104a8565b60c08701516001600160a01b031660009081526033602052604090205460ff1661145e5760405162461bcd60e51b815260206004820152601a60248201527f53656372657453686f703a2077726f6e672063757272656e637900000000000060448201526064016104a8565b602082015160018651600381111561147857611478613356565b036116a65760008281526034602052604081205460ff1660028111156114a0576114a0613356565b146114ed5760405162461bcd60e51b815260206004820152601c60248201527f53656372657453686f703a20736f6c64206f722063616e63656c65640000000060448201526064016104a8565b60018860600151146115415760405162461bcd60e51b815260206004820152601a60248201527f53656372657453686f703a20696e74656e7420213d2073656c6c00000000000060448201526064016104a8565b61154b8887611fb4565b428860a001511161156e5760405162461bcd60e51b81526004016104a890613756565b8251606087015110156115bb5760405162461bcd60e51b815260206004820152601560248201527414d958dc995d14da1bdc0e881d5b99195c9c185a59605a1b60448201526064016104a8565b6115d28860c001518860400151886060015161203c565b93508560a001516001600160a01b031663bc553f0f89602001518960400151846040518463ffffffff1660e01b815260040161161093929190613b25565b6020604051808303816000875af115801561162f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116539190613b51565b61166f5760405162461bcd60e51b81526004016104a890613b6e565b6116888289602001518a60c00151898a60600151612078565b6000828152603460205260409020805460ff19166001179055611a5a565b6002865160038111156116bb576116bb613356565b036118cb5760008281526034602052604081205460ff1660028111156116e3576116e3613356565b146117305760405162461bcd60e51b815260206004820152601c60248201527f53656372657453686f703a20736f6c64206f722063616e63656c65640000000060448201526064016104a8565b60028860600151146117845760405162461bcd60e51b815260206004820152601a60248201527f53656372657453686f703a20696e74656e7420213d2073656c6c00000000000060448201526064016104a8565b61178e8887611fb4565b428860a00151116117b15760405162461bcd60e51b81526004016104a890613756565b8251606087015110156117fe5760405162461bcd60e51b815260206004820152601560248201527414d958dc995d14da1bdc0e881d5b99195c9c185a59605a1b60448201526064016104a8565b6118158860c001518960200151886060015161203c565b93508560a001516001600160a01b031663bc553f0f88604001518a60200151846040518463ffffffff1660e01b815260040161185393929190613b25565b6020604051808303816000875af1158015611872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118969190613b51565b6118b25760405162461bcd60e51b81526004016104a890613b6e565b6116888288604001518a60c00151898a60600151612078565b6003865160038111156118e0576118e0613356565b03611a195760008281526034602052604081205460ff16600281111561190857611908613356565b146119555760405162461bcd60e51b815260206004820152601c60248201527f53656372657453686f703a20756e61626c6520746f2063616e63656c0000000060448201526064016104a8565b60208801516001600160a01b031633146119b15760405162461bcd60e51b815260206004820152601c60248201527f53656372657453686f703a206e6f207065726d69742063616e63656c0000000060448201526064016104a8565b428860a00151116119d45760405162461bcd60e51b81526004016104a890613756565b600082815260346020526040808220805460ff191660021790555183917f5b0b06d07e20243724d90e17a20034972f339eb28bd1c9437a71999bd15a1e7a91a2611a5a565b60405162461bcd60e51b8152602060048201526016602482015275053656372657453686f703a20756e6b6e6f776e206f760541b60448201526064016104a8565b611a678289858a8a6121c0565b50919695505050505050565b609a546001600160a01b031633146105a25760405162461bcd60e51b81526004016104a8906136da565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611ad057610a0383612231565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611b2a575060408051601f3d908101601f19168201909252611b2791810190613a38565b60015b611b8d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016104a8565b600080516020613d6d8339815191528114611bfc5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016104a8565b50610a038383836122cd565b60cc5460ff16611c515760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104a8565b60cc805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b609a54609b546040516001600160a01b03928316929091169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350609b8054609a80546001600160a01b03199081166001600160a01b03841617909155169055565b609a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60cc5460ff1615611d9c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104a8565b60cc805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c7e3390565b6000600160ff1682610160015160ff1603611e21576000611dfc600154611df7856122f8565b6123c7565b9050611e19818461014001518561010001518661012001516123ee565b915050611e69565b60405162461bcd60e51b815260206004820152601d60248201527f53656372657453686f703a2077726f6e67207369672076657273696f6e00000060448201526064016104a8565b81602001516001600160a01b0316816001600160a01b0316146107075760405162461bcd60e51b815260206004820152601960248201527f53656372657453686f703a20736967206e6f74206d617463680000000000000060448201526064016104a8565b603554610100900460ff16611ef55760405162461bcd60e51b81526004016104a890613ba5565b6001603655565b603554610100900460ff16611f235760405162461bcd60e51b81526004016104a890613ba5565b60cc805460ff19169055565b603554610100900460ff16611f565760405162461bcd60e51b81526004016104a890613ba5565b6105d733611d04565b81516020808401516040808601516060870151608088015160a089015160c08a01519451600098611f9698909796918b9101613bf0565b60405160208183030381529060405280519060200120905092915050565b81608001518160a001516001600160a01b0316632c436e5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201f9190613a38565b146107075760405162461bcd60e51b81526004016104a890613b6e565b6000811561206e576001600160a01b0384166120595750806104bf565b61206e6001600160a01b038516843085612416565b5060009392505050565b806000805b8460c00151518110156121105760008560c0015182815181106120a2576120a2613711565b602002602001015190508060000151836120bc9190613c49565b92506000620f42408260000151876120d49190613c61565b6120de9190613c80565b90506120ea8186613b0e565b94506120fb88836020015183612481565b505080806121089061373d565b91505061207d565b5080600054101561215c5760405162461bcd60e51b81526020600482015260166024820152751d1bdd185b081999594818d85c08195e18d95959195960521b60448201526064016104a8565b612167858784612481565b604080518881526001600160a01b0387811660208301528816818301526060810184905290517fe2c49856b032c255ae7e325d18109bc4e22a2804e2e49a017ec0f59f19cd447b9181900360800190a150505050505050565b847fbc7faddfa2d67a527d007c7779c5ce64b8a108c2fcbfe4b13a0b1d3551a1a175856020015184604001518760000151866000015189606001518a608001518b60a001518c60c001518c8b6040516122229a99989796959493929190613ca2565b60405180910390a25050505050565b6001600160a01b0381163b61229e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016104a8565b600080516020613d6d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6122d6836124b3565b6000825111806122e35750805b15610a03576122f283836124f3565b50505050565b60007f1897435d74cd983f2d094af2a83a02fd7acae45cbbee767ee4538a4c31bc79d6826000015183602001518460400151856060015186608001518760a001518860c001518960e00151516123518b60e001516125e7565b60408051602081019b909b528a01989098526001600160a01b0396871660608a0152608089019590955260a088019390935260c087019190915260e0860152909116610100840152610120830152610140820152610160015b604051602081830303815290604052805190602001209050919050565b60405161190160f01b60208201526022810183905260428101829052600090606201611f96565b60008060006123ff8787878761265e565b9150915061240c8161274b565b5095945050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526122f29085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612901565b8015610a03576001600160a01b03831661249f57610a0382826129d3565b610a036001600160a01b0384168383612aec565b6124bc81612231565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61255b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104a8565b600080846001600160a01b0316846040516125769190613d1b565b600060405180830381855af49150503d80600081146125b1576040519150601f19603f3d011682016040523d82523d6000602084013e6125b6565b606091505b50915091506125de8282604051806060016040528060278152602001613d8d60279139612b1c565b95945050505050565b6000606060005b835181101561264f578161261a85838151811061260d5761260d613711565b6020026020010151612b55565b60405160200161262b929190613d37565b604051602081830303815290604052915080806126479061373d565b9150506125ee565b50805160209091012092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156126955750600090506003612742565b8460ff16601b141580156126ad57508460ff16601c14155b156126be5750600090506004612742565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612712573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661273b57600060019250925050612742565b9150600090505b94509492505050565b600081600481111561275f5761275f613356565b036127675750565b600181600481111561277b5761277b613356565b036127c85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104a8565b60028160048111156127dc576127dc613356565b036128295760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104a8565b600381600481111561283d5761283d613356565b036128955760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104a8565b60048160048111156128a9576128a9613356565b036105a25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104a8565b6000612956826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ba89092919063ffffffff16565b805190915015610a0357808060200190518101906129749190613b51565b610a035760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a8565b80471015612a235760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016104a8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612a70576040519150601f19603f3d011682016040523d82523d6000602084013e612a75565b606091505b5050905080610a035760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016104a8565b6040516001600160a01b038316602482015260448101829052610a0390849063a9059cbb60e01b9060640161244a565b60608315612b2b5750816104bf565b825115612b3b5782518084602001fd5b8160405162461bcd60e51b81526004016104a89190613d59565b80516020808301518051908201206040516000936123aa937fc3a0c300c66ade339734c0629cf933940eaccc55b682952080d263a95c718462939192019283526020830191909152604082015260600190565b60606104bc8484600085856001600160a01b0385163b612c0a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a8565b600080866001600160a01b03168587604051612c269190613d1b565b60006040518083038185875af1925050503d8060008114612c63576040519150601f19603f3d011682016040523d82523d6000602084013e612c68565b606091505b5091509150612c78828286612b1c565b979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604081018181106001600160401b0382111715612cb857612cb8612c83565b60405250565b606081018181106001600160401b0382111715612cb857612cb8612c83565b601f8201601f191681016001600160401b0381118282101715612d0257612d02612c83565b6040525050565b60405161018081016001600160401b0381118282101715612d2c57612d2c612c83565b60405290565b60405160e081016001600160401b0381118282101715612d2c57612d2c612c83565b6001600160a01b03811681146105a257600080fd5b8035612d7481612d54565b919050565b60006001600160401b03821115612d9257612d92612c83565b5060051b60200190565b600082601f830112612dad57600080fd5b81356001600160401b03811115612dc657612dc6612c83565b604051612ddd601f8301601f191660200182612cdd565b818152846020838601011115612df257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612e2057600080fd5b81356020612e2d82612d79565b60408051612e3b8382612cdd565b84815260059490941b8601830193838101925087851115612e5b57600080fd5b8387015b85811015612edc5780356001600160401b0380821115612e7f5760008081fd5b90890190818b03601f1901851315612e975760008081fd5b8451612ea281612c99565b8783013581528583013582811115612eba5760008081fd5b612ec88d8a83870101612d9c565b828a01525086525050928401928401612e5f565b50979650505050505050565b803560ff81168114612d7457600080fd5b60006101808284031215612f0c57600080fd5b612f14612d09565b905081358152612f2660208301612d69565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a0820152612f5f60c08301612d69565b60c082015260e08201356001600160401b03811115612f7d57600080fd5b612f8984828501612e0f565b60e08301525061010082810135908201526101208083013590820152610140612fb3818401612ee8565b90820152610160612fc5838201612ee8565b9082015292915050565b80151581146105a257600080fd5b600060808284031215612fef57600080fd5b604051608081018181106001600160401b038211171561301157613011612c83565b80604052508091508235815260208301356020820152604083013561303581612d54565b6040820152606083013561304881612fcf565b6060919091015292915050565b803560048110612d7457600080fd5b600082601f83011261307557600080fd5b8135602061308282612d79565b604080516130908382612cdd565b84815260069490941b86018301938381019250878511156130b057600080fd5b8387015b85811015612edc5782818a0312156130cc5760008081fd5b82516130d781612c99565b81358152858201356130e881612d54565b8187015284529284019282016130b4565b600060e0828403121561310b57600080fd5b613113612d32565b905061311e82613055565b81526020820135602082015260408201356040820152606082013560608201526080820135608082015261315460a08301612d69565b60a082015260c08201356001600160401b0381111561317257600080fd5b61317e84828501613064565b60c08301525092915050565b600080600060c0848603121561319f57600080fd5b83356001600160401b03808211156131b657600080fd5b6131c287838801612ef9565b94506131d18760208801612fdd565b935060a08601359150808211156131e757600080fd5b506131f4868287016130f9565b9150509250925092565b60006020828403121561321057600080fd5b81356104bf81612d54565b6000806040838503121561322e57600080fd5b823561323981612d54565b915060208301356001600160401b0381111561325457600080fd5b61326085828601612d9c565b9150509250929050565b600082601f83011261327b57600080fd5b8135602061328882612d79565b6040516132958282612cdd565b83815260059390931b85018201928281019150868411156132b557600080fd5b8286015b848110156132d95780356132cc81612d54565b83529183019183016132b9565b509695505050505050565b600080604083850312156132f757600080fd5b82356001600160401b038082111561330e57600080fd5b61331a8683870161326a565b9350602085013591508082111561333057600080fd5b506132608582860161326a565b60006020828403121561334f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061338057613380613356565b91905290565b600082601f83011261339757600080fd5b813560206133a482612d79565b6040516133b18282612cdd565b83815260059390931b85018201928281019150868411156133d157600080fd5b8286015b848110156132d95780356001600160401b038111156133f45760008081fd5b6134028986838b01016130f9565b8452509183019183016133d5565b6000602080838503121561342357600080fd5b82356001600160401b038082111561343a57600080fd5b9084019060c0828703121561344e57600080fd5b60405161345a81612cbe565b82358281111561346957600080fd5b8301601f8101881361347a57600080fd5b803561348581612d79565b6040516134928282612cdd565b82815260059290921b830187019187810191508a8311156134b257600080fd5b8784015b838110156134ea578035878111156134ce5760008081fd5b6134dc8d8b83890101612ef9565b8452509188019188016134b6565b508452505050828401358281111561350157600080fd5b61350d88828601613386565b858301525061351f8760408501612fdd565b60408201529695505050505050565b6000806040838503121561354157600080fd5b823561354c81612d54565b9150602083013561355c81612fcf565b809150509250929050565b6000806040838503121561357a57600080fd5b82359150602083013561355c81612d54565b60008083601f84011261359e57600080fd5b5081356001600160401b038111156135b557600080fd5b6020830191508360208260051b85010111156135d057600080fd5b9250929050565b600080600080604085870312156135ed57600080fd5b84356001600160401b038082111561360457600080fd5b6136108883890161358c565b9096509450602087013591508082111561362957600080fd5b506136368782880161358c565b95989497509550505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252601d908201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e6572000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161374f5761374f613727565b5060010190565b6020808252601c908201527f53656372657453686f703a20646561646c696e65207265616368656400000000604082015260600190565b60005b838110156137a8578181015183820152602001613790565b838111156122f25750506000910152565b600081518084526137d181602086016020860161378d565b601f01601f19169290920160200192915050565b80518252600060208201516040602085015261380460408501826137b9565b949350505050565b600081518084526020808501808196508360051b8101915082860160005b858110156138545782840389526138428483516137e5565b9885019893509084019060010161382a565b5091979650505050505050565b600060e0830182516004811061387957613879613356565b84526020838101518186015260408085015181870152606080860151908701526080808601519087015260a0808601516001600160a01b039081169188019190915260c08087015160e091890191909152805194859052830193600091906101008901905b80841015613909578651805183528601518316868301529585019560019390930192908401906138de565b5098975050505050505050565b60c08152835160c08201526000602085015161393d60e08401826001600160a01b03169052565b506040850151610100818185015260608701519150610120828186015260808801519250610140838187015260a08901519350610160848188015260c08a01519450610180613996818901876001600160a01b03169052565b60e08b01519550806101a0890152506139b361024088018661380c565b938a01516101c0880152918901516101e087015288015160ff9081166102008701529088015190811661022086015290915050613a1c602084018680518252602080820151908301526040808201516001600160a01b0316908301526060908101511515910152565b82810360a0840152613a2e8185613861565b9695505050505050565b600060208284031215613a4a57600080fd5b5051919050565b600060033d11156107bc5760046000803e5060005160e01c90565b600060443d1015613a7a5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613aa957505050505090565b8285019150815181811115613ac15750505050505090565b843d8701016020828501011115613adb5750505050505090565b613aea60208286010187612cdd565b509095945050505050565b8281526040602082015260006104bc60408301846137b9565b600082821015613b2057613b20613727565b500390565b6001600160a01b038481168252831660208201526060604082018190526000906125de908301846137b9565b600060208284031215613b6357600080fd5b81516104bf81612fcf565b6020808252601c908201527f53656372657453686f703a2064656c65676174696f6e206572726f7200000000604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006101008a835260018060a01b03808b1660208501528960408501528860608501528760808501528660a085015280861660c0850152508060e0840152613c3a818401856137e5565b9b9a5050505050505050505050565b60008219821115613c5c57613c5c613727565b500190565b6000816000190483118215151615613c7b57613c7b613727565b500290565b600082613c9d57634e487b7160e01b600052601260045260246000fd5b500490565b600061014060018060a01b03808e168452808d1660208501528b60408501528a60608501528960808501528860a08501528760c085015280871660e08501525080610100840152613cf5818401866137e5565b9050828103610120840152613d0a8185613861565b9d9c50505050505050505050505050565b60008251613d2d81846020870161378d565b9190910192915050565b60008351613d4981846020880161378d565b9190910191825250602001919050565b6020815260006104bf60208301846137b956fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208a975ecd58f8e7ef7e511ac1218f9ef3bf0e40a24c276ca42bae8fa6adcd578a64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "pending owner call this function to claim ownership"
      },
      "initialize(uint256,address)": {
        "details": "initialize",
        "params": {
          "feeCapPct_": "max fee percentage",
          "weth_": "address of wrapped eth"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Return the address of the pending owner"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "run(((uint256,address,uint256,uint256,uint256,uint256,address,(uint256,bytes)[],bytes32,bytes32,uint8,uint8)[],(uint8,uint256,uint256,uint256,bytes32,address,(uint256,address)[])[],(uint256,uint256,address,bool)))": {
        "details": "Entry of a contract call",
        "params": {
          "input": "a struct that contains all data"
        }
      },
      "runSingle((uint256,address,uint256,uint256,uint256,uint256,address,(uint256,bytes)[],bytes32,bytes32,uint8,uint8),(uint256,uint256,address,bool),(uint8,uint256,uint256,uint256,bytes32,address,(uint256,address)[]))": {
        "details": "run a single order",
        "params": {
          "detail": "detail by the taker",
          "order": "order by the maker",
          "shared": "some option of the taker"
        }
      },
      "transferOwnership(address,bool)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership"
      },
      "updateCurrencies(address[],address[])": {
        "details": "update Currencies address",
        "params": {
          "toAdd": "the array of currency address that want to add",
          "toRemove": "the array to currency address that want to remove"
        }
      },
      "updateDelegates(address[],address[])": {
        "details": "update Delegates address",
        "params": {
          "toAdd": "the array of delegate address that want to add",
          "toRemove": "the array to delegate address that want to remove"
        }
      },
      "updateFeeCap(uint256)": {
        "params": {
          "val": "new Fee Cap"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "RATE_BASE": {
        "details": "precision of the parameters "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10430,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "feeCapPct",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10433,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "domainSeparator",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 10436,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "weth",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IWETHUpgradable)11898"
      },
      {
        "astId": 10440,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 10445,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "delegates",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10451,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "currencies",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_contract(IERC20Upgradeable)846,t_bool)"
      },
      {
        "astId": 10457,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "inventoryStatus",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_bytes32,t_enum(InvStatus)10413)"
      },
      {
        "astId": 395,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "_initialized",
        "offset": 0,
        "slot": "53",
        "type": "t_bool"
      },
      {
        "astId": 398,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "_initializing",
        "offset": 1,
        "slot": "53",
        "type": "t_bool"
      },
      {
        "astId": 723,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "_status",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 767,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1354,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7440,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "_owner",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 7442,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 7625,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 619,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "_paused",
        "offset": 0,
        "slot": "204",
        "type": "t_bool"
      },
      {
        "astId": 708,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 377,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 597,
        "contract": "contracts/secretShop/SecretShopUpgradable.sol:SecretShopUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)846": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IWETHUpgradable)11898": {
        "encoding": "inplace",
        "label": "contract IWETHUpgradable",
        "numberOfBytes": "20"
      },
      "t_enum(InvStatus)10413": {
        "encoding": "inplace",
        "label": "enum Market.InvStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_enum(InvStatus)10413)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum Market.InvStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(InvStatus)10413"
      },
      "t_mapping(t_contract(IERC20Upgradeable)846,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)846",
        "label": "mapping(contract IERC20Upgradeable => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}