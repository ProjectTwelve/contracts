{
  "address": "0xFF8189376BF651852eB066DBB0bBe1AE872ed18c",
  "abi": [
    {
      "inputs": [],
      "name": "NoPermission",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "gameId",
          "type": "string"
        }
      ],
      "name": "NotGameDeveloper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "developer",
          "type": "address"
        }
      ],
      "name": "CollectionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldP12Factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newP12Factory",
          "type": "address"
        }
      ],
      "name": "SetP12Factory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SftCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "createAssetAndMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "gameId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "contractURI",
          "type": "string"
        }
      ],
      "name": "createCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "p12CoinFactory_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "p12CoinFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newP12CoinFactory",
          "type": "address"
        }
      ],
      "name": "setP12CoinFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "updateCollectionUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newUri",
          "type": "string"
        }
      ],
      "name": "updateSftUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x88b3c3db94783f738b964d16612d5a6214de1864f821883e9614b6e31b1a2e3d",
  "receipt": {
    "to": "0x2844B158Bcffc0aD7d881a982D464c0ce38d8086",
    "from": "0xfeD03676c595DD1F1c6716a446cD44B4C90AD290",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3569848",
    "logsBloom": "0x
    "blockHash": "0xa6cc584f116d9191c6ec1c80618528bc8aec2342dd930853ad727a95083491bb",
    "transactionHash": "0x88b3c3db94783f738b964d16612d5a6214de1864f821883e9614b6e31b1a2e3d",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "3569848",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "83b4c5e44455b5b29d1a7a6f01d741e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NoPermission\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"}],\"name\":\"NotGameDeveloper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"}],\"name\":\"CollectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldP12Factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newP12Factory\",\"type\":\"address\"}],\"name\":\"SetP12Factory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SftCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"createAssetAndMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"gameId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p12CoinFactory_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p12CoinFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newP12CoinFactory\",\"type\":\"address\"}],\"name\":\"setP12CoinFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"updateCollectionUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"updateSftUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimOwnership()\":{\"details\":\"pending owner call this function to claim ownership\"},\"createAssetAndMint(address,uint256,string)\":{\"details\":\"create asset and mint to msg.sender address\",\"params\":{\"amount\":\"amount of asset\",\"collection\":\"which collection want to create\",\"uri\":\"new asset's metadata uri\"}},\"createCollection(string,string)\":{\"details\":\"create Collection\",\"params\":{\"contractURI\":\"contract-level metadata uri\",\"gameId\":\"a off-chain game id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Return the address of the pending owner\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setP12CoinFactory(address)\":{\"params\":{\"newP12CoinFactory\":\"address of p12CoinFactory\"}},\"transferOwnership(address,bool)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership\"},\"updateCollectionUri(address,string)\":{\"details\":\"update Collection Uri\",\"params\":{\"collection\":\"collection address\",\"newUri\":\"new Contract-level metadata uri\"}},\"updateSftUri(address,uint256,string)\":{\"details\":\"update Sft Uri\",\"params\":{\"collection\":\"collection address\",\"newUri\":\"new metadata uri\",\"tokenId\":\"token id\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"p12CoinFactory()\":{\"notice\":\"p12CoinFactory address, for reading game and developer relationship\"},\"setP12CoinFactory(address)\":{\"notice\":\"set new p12CoinFactory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assetFactory/P12AssetFactoryUpgradable.sol\":\"P12AssetFactoryUpgradable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/access/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// Refer to https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol and https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '../libraries/CommonError.sol';\\n\\ncontract SafeOwnable is Context {\\n  address private _owner;\\n  address private _pendingOwner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the owner manually.\\n   */\\n  constructor(address owner_) {\\n    _transferOwnership(owner_);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Return the address of the pending owner\\n   */\\n  function pendingOwner() public view virtual returns (address) {\\n    return _pendingOwner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    _checkOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   * Note If direct is false, it will set an pending owner and the OwnerShipTransferring\\n   * only happens when the pending owner claim the ownership\\n   */\\n  function transferOwnership(address newOwner, bool direct) public virtual onlyOwner {\\n    if (newOwner == address(0)) revert CommonError.ZeroAddressSet();\\n\\n    if (direct) {\\n      _transferOwnership(newOwner);\\n    } else {\\n      _transferPendingOwnership(newOwner);\\n    }\\n  }\\n\\n  /**\\n   * @dev pending owner call this function to claim ownership\\n   */\\n  function claimOwnership() public {\\n    if (msg.sender != _pendingOwner) revert CommonError.NoPermission();\\n\\n    _claimOwnership();\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev set the pending owner address\\n   * Internal function without access restriction.\\n   */\\n  function _transferPendingOwnership(address newOwner) internal virtual {\\n    _pendingOwner = newOwner;\\n  }\\n\\n  /**\\n   * @dev claim ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _claimOwnership() internal virtual {\\n    address oldOwner = _owner;\\n    emit OwnershipTransferred(oldOwner, _pendingOwner);\\n\\n    _owner = _pendingOwner;\\n    _pendingOwner = address(0);\\n  }\\n\\n  /**\\n   * @dev Throws if the sender is not the owner.\\n   */\\n  function _checkOwner() internal view virtual {\\n    if (owner() != _msgSender()) revert CommonError.NoPermission();\\n  }\\n}\\n\",\"keccak256\":\"0xcfd76c0d0a688e52ac02cc546cc4cdc14e9cc51b7a21f3aff10944ff8a976752\",\"license\":\"GPL-3.0-only\"},\"contracts/access/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// Refer to https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol and https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/access/OwnableUpgradeable.sol\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol';\\nimport '../libraries/CommonError.sol';\\n\\ncontract SafeOwnableUpgradeable is Initializable, ContextUpgradeable, ERC1967UpgradeUpgradeable {\\n  address private _owner;\\n  address private _pendingOwner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the owner manually.\\n   */\\n  function __Ownable_init(address owner_) internal onlyInitializing {\\n    __Ownable_init_unchained(owner_);\\n  }\\n\\n  function __Ownable_init_unchained(address owner_) internal onlyInitializing {\\n    _transferOwnership(owner_);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Return the address of the pending owner\\n   */\\n  function pendingOwner() public view virtual returns (address) {\\n    return _pendingOwner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    _checkOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   * Note If direct is false, it will set an pending owner and the OwnerShipTransferring\\n   * only happens when the pending owner claim the ownership\\n   */\\n  function transferOwnership(address newOwner, bool direct) public virtual onlyOwner {\\n    if (newOwner == address(0)) revert CommonError.ZeroAddressSet();\\n    if (direct) {\\n      _transferOwnership(newOwner);\\n    } else {\\n      _transferPendingOwnership(newOwner);\\n    }\\n  }\\n\\n  /**\\n   * @dev pending owner call this function to claim ownership\\n   */\\n  function claimOwnership() public {\\n    if (msg.sender != _pendingOwner) revert CommonError.NoPermission();\\n\\n    _claimOwnership();\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    // compatible with hardhat-deploy, maybe removed later\\n    assembly {\\n      sstore(_ADMIN_SLOT, newOwner)\\n    }\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev set the pending owner address\\n   * Internal function without access restriction.\\n   */\\n  function _transferPendingOwnership(address newOwner) internal virtual {\\n    _pendingOwner = newOwner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _claimOwnership() internal virtual {\\n    address oldOwner = _owner;\\n    emit OwnershipTransferred(oldOwner, _pendingOwner);\\n\\n    _owner = _pendingOwner;\\n    _pendingOwner = address(0);\\n  }\\n\\n  /**\\n   * @dev Throws if the sender is not the owner.\\n   */\\n  function _checkOwner() internal view virtual {\\n    if (owner() != _msgSender()) revert CommonError.NoPermission();\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xffd2297afae734f712015aee5babe50d0a404618f4db447fb33ca5103297dfd4\",\"license\":\"GPL-3.0-only\"},\"contracts/assetFactory/P12Asset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport './interfaces/IP12Asset.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/ERC1155.sol';\\nimport '../access/SafeOwnable.sol';\\n\\ncontract P12Asset is IP12Asset, ERC1155(''), SafeOwnable {\\n  /**\\n   * @dev contract-level metadata uri, refer to https://docs.opensea.io/docs/contract-level-metadata\\n   */\\n  string public contractURI;\\n\\n  /**\\n   * @dev current supply, how many a id are minted not.\\n   */\\n  mapping(uint256 => uint256) public supply;\\n\\n  /**\\n   * @dev max supply, a token id has a max supply cap\\n   */\\n  mapping(uint256 => uint256) public maxSupply;\\n  /**\\n   * @dev token id index, which will increase one by one\\n   */\\n  uint256 private idx = 0;\\n\\n  // metadata uri\\n  mapping(uint256 => string) private _uris;\\n\\n  constructor(address owner_, string memory contractURI_) SafeOwnable(owner_) {\\n    if (bytes(contractURI_).length == 0) revert EmptyContractURI();\\n    contractURI = contractURI_;\\n  }\\n\\n  /**\\n   * @dev developer create an new asset\\n   * @param amount the new asset's totalSupply\\n   * @param newUri metadata uri of the asset\\n   * @return uint256 new asset's tokenId\\n   */\\n\\n  function create(uint256 amount, string calldata newUri) public override onlyOwner returns (uint256) {\\n    // set tokenId totalSupply\\n    maxSupply[idx] = amount;\\n    // set metadata Uri\\n    _setUri(idx, newUri);\\n    // idx increment\\n    idx += 1;\\n    return idx - 1;\\n  }\\n\\n  /**\\n   * @dev update token's metadata uri\\n   * @param id tokenId\\n   * @param newUri new uri\\n   */\\n  function setUri(uint256 id, string calldata newUri) public override onlyOwner {\\n    _setUri(id, newUri);\\n  }\\n\\n  /**\\n   * See {_mint}.\\n   */\\n  function mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) public override onlyOwner {\\n    if (id >= idx) revert InvalidTokenId(id);\\n    if (amount + supply[id] > maxSupply[id]) revert MintExceedSupply(id);\\n    supply[id] += amount;\\n    _mint(to, id, amount, data);\\n  }\\n\\n  /**\\n   * @dev return token metadata uri\\n   * @param id token's id\\n   * @return uri metadata uri\\n   */\\n  function uri(uint256 id) public view virtual override returns (string memory) {\\n    if (id >= idx) revert InvalidTokenId(id);\\n    return _uris[id];\\n  }\\n\\n  /**\\n   * @dev set contract-level MetaData\\n   * @param newContractURI new Contract-level metadata uri\\n   */\\n  function setContractURI(string calldata newContractURI) public override onlyOwner {\\n    if (bytes(newContractURI).length == 0) revert EmptyContractURI();\\n    string memory oldContractURI = contractURI;\\n    contractURI = newContractURI;\\n    emit SetContractURI(oldContractURI, contractURI);\\n  }\\n\\n  /**\\n   * @dev set token metadata uri\\n   * @param id  token id\\n   * @param newUri metadata uri\\n   */\\n  function _setUri(uint256 id, string calldata newUri) private {\\n    if (bytes(newUri).length == 0) revert EmptyURI();\\n    if (id > idx) revert InvalidTokenId(id);\\n    _uris[id] = newUri;\\n    emit SetUri(id, newUri);\\n  }\\n}\\n\",\"keccak256\":\"0xf0b464a80b0b1e6056f15101d6c013f1e75f66229db0bbd3a29fa9c9f2353e2c\",\"license\":\"GPL-3.0-only\"},\"contracts/assetFactory/P12AssetFactoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\ncontract P12AssetFactoryStorage {\\n  /**\\n    @dev collection address => gameId\\n  */\\n  mapping(address => string) public registry;\\n\\n  /**\\n   * p12CoinFactory address, for reading game and developer relationship\\n   */\\n  address public p12CoinFactory;\\n\\n  uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xaf84dde4a7126d2988ff074a4be61e78c59b050f47528429f4d3002a60700ea5\",\"license\":\"GPL-3.0-only\"},\"contracts/assetFactory/P12AssetFactoryUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport './P12Asset.sol';\\nimport '../coinFactory/P12CoinFactoryUpgradeable.sol';\\nimport './interfaces/IP12AssetFactoryUpgradable.sol';\\nimport './P12AssetFactoryStorage.sol';\\nimport '../access/SafeOwnableUpgradeable.sol';\\nimport '../libraries/CommonError.sol';\\n\\ncontract P12AssetFactoryUpgradable is\\n  P12AssetFactoryStorage,\\n  IP12AssetFactoryUpgradable,\\n  ReentrancyGuardUpgradeable,\\n  SafeOwnableUpgradeable,\\n  PausableUpgradeable,\\n  UUPSUpgradeable\\n{\\n  // ============ External ============\\n\\n  /**\\n  @notice set new p12CoinFactory\\n  @param newP12CoinFactory address of p12CoinFactory\\n   */\\n  function setP12CoinFactory(address newP12CoinFactory) external virtual override onlyOwner {\\n    address oldP12Factory = p12CoinFactory;\\n    if (newP12CoinFactory == address(0)) revert CommonError.ZeroAddressSet();\\n    p12CoinFactory = newP12CoinFactory;\\n    emit SetP12Factory(oldP12Factory, newP12CoinFactory);\\n  }\\n\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  function initialize(address owner_, address p12CoinFactory_) public initializer {\\n    if (p12CoinFactory_ == address(0)) revert CommonError.ZeroAddressSet();\\n    p12CoinFactory = p12CoinFactory_;\\n\\n    __ReentrancyGuard_init_unchained();\\n    __Pausable_init_unchained();\\n    __Ownable_init_unchained(owner_);\\n  }\\n\\n  /**\\n   * @dev create Collection\\n   * @param gameId a off-chain game id\\n   * @param contractURI contract-level metadata uri\\n   */\\n  function createCollection(string calldata gameId, string calldata contractURI)\\n    public\\n    override\\n    onlyDeveloper(gameId)\\n    whenNotPaused\\n  {\\n    P12Asset collection = new P12Asset(address(this), contractURI);\\n    // record creator\\n    registry[address(collection)] = gameId;\\n\\n    emit CollectionCreated(address(collection), msg.sender);\\n  }\\n\\n  /**\\n   * @dev create asset and mint to msg.sender address\\n   * @param collection which collection want to create\\n   * @param amount amount of asset\\n   * @param uri new asset's metadata uri\\n   */\\n  function createAssetAndMint(\\n    address collection,\\n    uint256 amount,\\n    string calldata uri\\n  ) public override onlyCollectionDeveloper(collection) whenNotPaused nonReentrant {\\n    // create\\n    uint256 tokenId = P12Asset(collection).create(amount, uri);\\n    // mint to developer address\\n    P12Asset(collection).mint(msg.sender, tokenId, amount, new bytes(0));\\n\\n    emit SftCreated(address(collection), tokenId, amount);\\n  }\\n\\n  /**\\n   * @dev update Collection Uri\\n   * @param collection collection address\\n   * @param newUri new Contract-level metadata uri\\n   */\\n  function updateCollectionUri(address collection, string calldata newUri)\\n    public\\n    override\\n    onlyCollectionDeveloper(collection)\\n    whenNotPaused\\n  {\\n    P12Asset(collection).setContractURI(newUri);\\n  }\\n\\n  /**\\n   * @dev update Sft Uri\\n   * @param collection collection address\\n   * @param tokenId token id\\n   * @param newUri new metadata uri\\n   */\\n  function updateSftUri(\\n    address collection,\\n    uint256 tokenId,\\n    string calldata newUri\\n  ) public override onlyCollectionDeveloper(collection) whenNotPaused {\\n    P12Asset(collection).setUri(tokenId, newUri);\\n  }\\n\\n  /**\\n   * @dev throw error if not collection developer\\n   */\\n  function _checkCollectionDeveloper(address collection) private view {\\n    if (P12CoinFactoryUpgradeable(p12CoinFactory).allGames(registry[collection]) != msg.sender)\\n      revert CommonError.NotGameDeveloper(msg.sender, registry[collection]);\\n  }\\n\\n  /** upgrade function */\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n  modifier onlyDeveloper(string memory gameId) {\\n    if (P12CoinFactoryUpgradeable(p12CoinFactory).allGames(gameId) != msg.sender)\\n      revert CommonError.NotGameDeveloper(msg.sender, gameId);\\n    _;\\n  }\\n\\n  modifier onlyCollectionDeveloper(address collection) {\\n    _checkCollectionDeveloper(collection);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x4ed589f4e2cc376b94522ebfd87c5236d98ed3d2ccf8d601128045a401ab293c\",\"license\":\"GPL-3.0-only\"},\"contracts/assetFactory/interfaces/IP12Asset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\ninterface IP12Asset {\\n  /**\\n   * @dev Update log of contract-level MetaData\\n   */\\n  event SetContractURI(string oldContractURI, string newContractURI);\\n\\n  /**\\n   * @dev log of token metadata uri\\n   */\\n  event SetUri(uint256 id, string uri);\\n\\n  error EmptyContractURI();\\n  error EmptyURI();\\n  error InvalidTokenId(uint256 tokenId);\\n  error MintExceedSupply(uint256 tokenId);\\n\\n  function create(uint256, string calldata) external returns (uint256);\\n\\n  function mint(\\n    address,\\n    uint256,\\n    uint256,\\n    bytes memory\\n  ) external;\\n\\n  function setContractURI(string calldata) external;\\n\\n  function setUri(uint256, string calldata) external;\\n}\\n\",\"keccak256\":\"0xcd315e7f80f6ebfa451684a3271dc58f91c0f57f00253ed883db7d02212b4c57\",\"license\":\"GPL-3.0-only\"},\"contracts/assetFactory/interfaces/IP12AssetFactoryUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\ninterface IP12AssetFactoryUpgradable {\\n  /**\\n   * @dev record a new Collection Created\\n   */\\n  event CollectionCreated(address indexed collection, address indexed developer);\\n\\n  /**\\n   * @dev record a new Sft created, sft is semi-fungible token, as it's in a ERC1155 contract\\n   */\\n  event SftCreated(address indexed collection, uint256 indexed tokenId, uint256 amount);\\n\\n  event SetP12Factory(address oldP12Factory, address newP12Factory);\\n\\n  function setP12CoinFactory(address newP12Factory) external;\\n\\n  function createCollection(string calldata gameId, string calldata) external;\\n\\n  function createAssetAndMint(\\n    address,\\n    uint256,\\n    string calldata\\n  ) external;\\n\\n  function updateCollectionUri(address, string calldata) external;\\n\\n  function updateSftUri(\\n    address,\\n    uint256,\\n    string calldata\\n  ) external;\\n}\\n\",\"keccak256\":\"0x1f2b33e89fa06f5ba1e20035865200b0b6147e090cd25a47d9d3a1fed6a65cdd\",\"license\":\"GPL-3.0-only\"},\"contracts/coinFactory/P12CoinFactoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '../staking/interfaces/IP12MineUpgradeable.sol';\\nimport '../staking/interfaces/IGaugeController.sol';\\nimport './interfaces/IP12GameCoin.sol';\\n\\ncontract P12CoinFactoryStorage {\\n  /**\\n   * @dev p12 ERC20 address\\n   */\\n  address public p12;\\n  /**\\n   * @dev uniswap v2 Router address\\n   */\\n  IUniswapV2Router02 public uniswapRouter;\\n  /**\\n   * @dev uniswap v2 Factory address\\n   */\\n  IUniswapV2Factory public uniswapFactory;\\n  /**\\n   * @dev length of cast delay time is a linear function of percentage of additional issues,\\n   * @dev delayK and delayB is the linear function's parameter which could be changed later\\n   */\\n  uint256 public delayK;\\n  uint256 public delayB;\\n\\n  /**\\n   * @dev a random hash value for calculate mintId\\n   */\\n  bytes32 internal _initHash;\\n\\n  uint256 public addLiquidityEffectiveTime;\\n\\n  /**\\n   * @dev p12 staking contract\\n   */\\n  IP12MineUpgradeable public p12Mine;\\n\\n  address public dev;\\n  IGaugeController public gaugeController;\\n\\n  uint256[40] private __gap;\\n\\n  // gameId => developer address\\n  mapping(string => address) public allGames;\\n  // gameCoinAddress => gameId\\n  mapping(IP12GameCoin => string) public allGameCoins;\\n  // gameCoinAddress => declareMintId => MintCoinInfo\\n  mapping(IP12GameCoin => mapping(bytes32 => MintCoinInfo)) public coinMintRecords;\\n  // gameCoinAddress => declareMintId\\n  mapping(IP12GameCoin => bytes32) public preMintIds;\\n\\n  /**\\n   * @dev struct of each mint request\\n   */\\n  struct MintCoinInfo {\\n    uint256 amount;\\n    uint256 unlockTimestamp;\\n    bool executed;\\n  }\\n}\\n\",\"keccak256\":\"0xc89afbdd4f16bcdade9265c13e15ac02d7fc818600fb229cca8182670f24a987\",\"license\":\"GPL-3.0-only\"},\"contracts/coinFactory/P12CoinFactoryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '../access/SafeOwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport './interfaces/IP12CoinFactoryUpgradeable.sol';\\nimport '../staking/interfaces/IP12MineUpgradeable.sol';\\nimport './P12CoinFactoryStorage.sol';\\nimport '../staking/interfaces/IGaugeController.sol';\\nimport './P12GameCoin.sol';\\nimport './interfaces/IP12GameCoin.sol';\\nimport '../libraries/CommonError.sol';\\n\\ncontract P12CoinFactoryUpgradeable is\\n  P12CoinFactoryStorage,\\n  UUPSUpgradeable,\\n  IP12CoinFactoryUpgradeable,\\n  SafeOwnableUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  PausableUpgradeable\\n{\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  //============ External ============\\n  /**\\n   * @dev set dev address\\n   * @param newDev new dev address\\n   */\\n  function setDev(address newDev) external virtual override onlyOwner {\\n    if (newDev == address(0)) revert CommonError.ZeroAddressSet();\\n    address oldDev = dev;\\n    dev = newDev;\\n    emit SetDev(oldDev, newDev);\\n  }\\n\\n  /**\\n   * @dev set p12mine contract address\\n   * @param newP12Mine new p12mine address\\n   */\\n  function setP12Mine(IP12MineUpgradeable newP12Mine) external virtual override onlyOwner {\\n    if (address(newP12Mine) == address(0)) revert CommonError.ZeroAddressSet();\\n    IP12MineUpgradeable oldP12Mine = p12Mine;\\n    p12Mine = newP12Mine;\\n    emit SetP12Mine(oldP12Mine, newP12Mine);\\n  }\\n\\n  /**\\n   * @dev set gaugeController contract address\\n   * @param newGaugeController new gaugeController address\\n   */\\n  function setGaugeController(IGaugeController newGaugeController) external virtual override onlyOwner {\\n    if (address(newGaugeController) == address(0)) revert CommonError.ZeroAddressSet();\\n    IGaugeController oldGaugeController = gaugeController;\\n    gaugeController = newGaugeController;\\n    emit SetGaugeController(oldGaugeController, newGaugeController);\\n  }\\n\\n  /**\\n   * @dev set p12Token address\\n   * reserved only during development\\n   * @param newP12Token new p12Token address\\n   */\\n  function setP12Token(address newP12Token) external virtual override onlyOwner {\\n    if (address(newP12Token) == address(0)) revert CommonError.ZeroAddressSet();\\n    address oldP12Token = p12;\\n    p12 = newP12Token;\\n    emit SetP12Token(oldP12Token, newP12Token);\\n  }\\n\\n  /**\\n   * @dev set uniswapFactory address\\n   * reserved only during development\\n   * @param newUniswapFactory new UniswapFactory address\\n   */\\n  function setUniswapFactory(IUniswapV2Factory newUniswapFactory) external virtual override onlyOwner {\\n    if (address(newUniswapFactory) == address(0)) revert CommonError.ZeroAddressSet();\\n    IUniswapV2Factory oldUniswapFactory = uniswapFactory;\\n    uniswapFactory = newUniswapFactory;\\n    emit SetUniswapFactory(oldUniswapFactory, newUniswapFactory);\\n  }\\n\\n  /**\\n   * @dev set uniswapRouter address\\n   * reserved only during development\\n   * @param newUniswapRouter new uniswapRouter address\\n   */\\n  function setUniswapRouter(IUniswapV2Router02 newUniswapRouter) external virtual override onlyOwner {\\n    if (address(newUniswapRouter) == address(0)) revert CommonError.ZeroAddressSet();\\n    IUniswapV2Router02 oldUniswapRouter = uniswapRouter;\\n    uniswapRouter = newUniswapRouter;\\n    emit SetUniswapRouter(oldUniswapRouter, newUniswapRouter);\\n  }\\n\\n  /**\\n   * @dev create binding between game and developer, only called by p12 backend\\n   * @param gameId game id\\n   * @param developer developer address, who own this game\\n   */\\n  function register(string memory gameId, address developer) external virtual override onlyDev {\\n    if (address(developer) == address(0)) revert CommonError.ZeroAddressSet();\\n    allGames[gameId] = developer;\\n    emit RegisterGame(gameId, developer);\\n  }\\n\\n  /**\\n   * @dev developer first create their game coin\\n   * @param name new game coin's name\\n   * @param symbol game coin's symbol\\n   * @param gameId the game's id\\n   * @param gameCoinIconUrl game coin icon's url\\n   * @param amountGameCoin how many coin first mint\\n   * @param amountP12 how many P12 coin developer would stake\\n   * @return gameCoinAddress the address of the new game coin\\n   */\\n  function create(\\n    string memory name,\\n    string memory symbol,\\n    string memory gameId,\\n    string memory gameCoinIconUrl,\\n    uint256 amountGameCoin,\\n    uint256 amountP12\\n  ) external virtual override nonReentrant whenNotPaused returns (IP12GameCoin gameCoinAddress) {\\n    if (msg.sender != allGames[gameId]) revert CommonError.NotGameDeveloper(msg.sender, gameId);\\n    if (amountP12 == 0) revert CommonError.NotEnoughP12();\\n    gameCoinAddress = _create(name, symbol, gameId, gameCoinIconUrl, amountGameCoin);\\n    uint256 amountGameCoinDesired = amountGameCoin / 2;\\n\\n    IERC20Upgradeable(p12).safeTransferFrom(msg.sender, address(this), amountP12);\\n\\n    IERC20Upgradeable(address(gameCoinAddress)).safeApprove(address(uniswapRouter), amountGameCoinDesired);\\n\\n    uint256 liquidity0;\\n    (, , liquidity0) = uniswapRouter.addLiquidity(\\n      p12,\\n      address(gameCoinAddress),\\n      amountP12,\\n      amountGameCoinDesired,\\n      amountP12,\\n      amountGameCoinDesired,\\n      address(p12Mine),\\n      _getBlockTimestamp() + addLiquidityEffectiveTime\\n    );\\n    //get pair contract address\\n    address pair = uniswapFactory.getPair(p12, address(gameCoinAddress));\\n\\n    // check address\\n    if (address(pair) == address(0)) revert CommonError.ZeroAddressSet();\\n\\n    // get lpToken value\\n    uint256 liquidity1 = IUniswapV2Pair(pair).balanceOf(address(p12Mine));\\n    if (liquidity0 != liquidity1) revert InvalidLiquidity();\\n\\n    // add pair address to Controller,100 is init weight\\n    gaugeController.addGauge(pair, 0, 100);\\n\\n    // create a new pool and add staking info\\n    p12Mine.addLpTokenInfoForGameCreator(pair, liquidity1, msg.sender);\\n\\n    allGameCoins[gameCoinAddress] = gameId;\\n    emit CreateGameCoin(gameCoinAddress, gameId, amountP12);\\n    return IP12GameCoin(gameCoinAddress);\\n  }\\n\\n  /**\\n   * @dev if developer want to mint after create coin, developer must declare first\\n   * @param gameId game's id\\n   * @param gameCoinAddress game coin's address\\n   * @param amountGameCoin how many developer want to mint\\n   * @param success whether the operation success\\n   */\\n  function queueMintCoin(\\n    string memory gameId,\\n    IP12GameCoin gameCoinAddress,\\n    uint256 amountGameCoin\\n  ) external virtual override nonReentrant whenNotPaused returns (bool success) {\\n    if (msg.sender != allGames[gameId]) revert CommonError.NotGameDeveloper(msg.sender, gameId);\\n    if (!_compareStrings(allGameCoins[gameCoinAddress], gameId)) revert MisMatchCoinWithGameId(gameCoinAddress, gameId);\\n    // Set the correct unlock time\\n    uint256 time;\\n    uint256 currentTimestamp = _getBlockTimestamp();\\n    bytes32 _preMintId = preMintIds[gameCoinAddress];\\n    uint256 lastUnlockTimestamp = coinMintRecords[gameCoinAddress][_preMintId].unlockTimestamp;\\n    if (currentTimestamp >= lastUnlockTimestamp) {\\n      time = currentTimestamp;\\n    } else {\\n      time = lastUnlockTimestamp;\\n    }\\n\\n    // minting fee for p12\\n    uint256 p12Fee = getMintFee(gameCoinAddress, amountGameCoin);\\n\\n    // transfer the p12 to this contract\\n    IERC20Upgradeable(p12).safeTransferFrom(msg.sender, address(this), p12Fee);\\n\\n    uint256 delayD = getMintDelay(gameCoinAddress, amountGameCoin);\\n\\n    bytes32 mintId = _hashOperation(gameCoinAddress, msg.sender, amountGameCoin, time, _initHash);\\n    coinMintRecords[gameCoinAddress][mintId] = MintCoinInfo(amountGameCoin, delayD + time, false);\\n\\n    emit QueueMintCoin(mintId, gameCoinAddress, amountGameCoin, delayD + time, p12Fee);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev when time is up, anyone can call this function to make the mint executed\\n   * @param gameCoinAddress address of the game coin\\n   * @param mintId a unique id to identify a mint, developer can get it after declare\\n   * @return bool whether the operation success\\n   */\\n  function executeMintCoin(IP12GameCoin gameCoinAddress, bytes32 mintId)\\n    external\\n    virtual\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    if (coinMintRecords[gameCoinAddress][mintId].unlockTimestamp == 0) revert NonExistenceMintId(mintId);\\n    // check if it has been executed\\n    if (coinMintRecords[gameCoinAddress][mintId].executed) revert ExecutedMint(mintId);\\n\\n    uint256 time = _getBlockTimestamp();\\n\\n    // check that the current time is greater than the unlock time\\n    if (time <= coinMintRecords[gameCoinAddress][mintId].unlockTimestamp) revert NotTimeToMint(mintId);\\n\\n    // Modify status\\n    coinMintRecords[gameCoinAddress][mintId].executed = true;\\n\\n    // transfer the gameCoin to this contract first\\n\\n    IP12GameCoin(gameCoinAddress).mint(address(this), coinMintRecords[gameCoinAddress][mintId].amount);\\n\\n    emit ExecuteMintCoin(mintId, gameCoinAddress, msg.sender);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @notice called when user want to withdraw his game coin from custodian address\\n   * @param userAddress user's address\\n   * @param gameCoinAddress gameCoin's address\\n   * @param amountGameCoin how many user want to withdraw\\n   */\\n  function withdraw(\\n    address userAddress,\\n    IP12GameCoin gameCoinAddress,\\n    uint256 amountGameCoin\\n  ) external virtual override onlyDev returns (bool) {\\n    IERC20Upgradeable(address(gameCoinAddress)).safeTransfer(userAddress, amountGameCoin);\\n    emit Withdraw(userAddress, gameCoinAddress, amountGameCoin);\\n    return true;\\n  }\\n\\n  //============ Public ============\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  function initialize(\\n    address owner_,\\n    address p12_,\\n    IUniswapV2Factory uniswapFactory_,\\n    IUniswapV2Router02 uniswapRouter_,\\n    uint256 effectiveTime_,\\n    bytes32 initHash_\\n  ) public initializer {\\n    if (address(p12_) == address(0)) revert CommonError.ZeroAddressSet();\\n    if (address(uniswapFactory_) == address(0)) revert CommonError.ZeroAddressSet();\\n    if (address(uniswapRouter_) == address(0)) revert CommonError.ZeroAddressSet();\\n\\n    p12 = p12_;\\n    uniswapFactory = uniswapFactory_;\\n    uniswapRouter = uniswapRouter_;\\n    _initHash = initHash_;\\n    addLiquidityEffectiveTime = effectiveTime_;\\n    IERC20Upgradeable(p12).safeApprove(address(uniswapRouter), type(uint256).max);\\n    __ReentrancyGuard_init_unchained();\\n    __Pausable_init_unchained();\\n    __Ownable_init_unchained(owner_);\\n  }\\n\\n  /**\\n   * @dev set linear function's K parameter\\n   * @param newDelayK new K parameter\\n   */\\n  function setDelayK(uint256 newDelayK) public virtual override onlyOwner returns (bool) {\\n    uint256 oldDelayK = delayK;\\n    delayK = newDelayK;\\n    emit SetDelayK(oldDelayK, delayK);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev set linear function's B parameter\\n   * @param newDelayB new B parameter\\n   */\\n  function setDelayB(uint256 newDelayB) public virtual override onlyOwner returns (bool) {\\n    uint256 oldDelayB = delayB;\\n    delayB = newDelayB;\\n    emit SetDelayB(oldDelayB, delayB);\\n    return true;\\n  }\\n\\n  function setTokenName(IP12GameCoin token, string calldata newName) public onlyGameDev(token) {\\n    token.setName(newName);\\n  }\\n\\n  function setTokenSymbol(IP12GameCoin token, string calldata newSymbol) public onlyGameDev(token) {\\n    token.setSymbol(newSymbol);\\n  }\\n\\n  function setTokenIconUrl(IP12GameCoin token, string calldata newUrl) public onlyGameDev(token) {\\n    token.setGameCoinIconUrl(newUrl);\\n  }\\n\\n  /**\\n   * @dev calculate the MintFee in P12\\n   */\\n  function getMintFee(IP12GameCoin gameCoinAddress, uint256 amountGameCoin)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256 amountP12)\\n  {\\n    uint256 gameCoinReserved;\\n    uint256 p12Reserved;\\n    if (p12 < address(gameCoinAddress)) {\\n      (p12Reserved, gameCoinReserved, ) = IUniswapV2Pair(uniswapFactory.getPair(address(gameCoinAddress), p12)).getReserves();\\n    } else {\\n      (gameCoinReserved, p12Reserved, ) = IUniswapV2Pair(uniswapFactory.getPair(address(gameCoinAddress), p12)).getReserves();\\n    }\\n\\n    // overflow when p12Reserved * amountGameCoin > 2^256 ~= 10^77\\n    amountP12 = (p12Reserved * amountGameCoin) / (gameCoinReserved * 100);\\n\\n    return amountP12;\\n  }\\n\\n  /**\\n   * @dev linear function to calculate the delay time\\n   * @dev delayB is the minimum delay period, even someone mint zero token,\\n   * @dev there still be delayB period before someone can really mint zero token\\n   * @dev delayK is the parameter to take the ratio of new amount in to account\\n   * @dev For example, the initial supply of Game Coin is 100k. If developer want\\n   * @dev to mint 100k, developer needs to real mint it after `delayK + delayB`. If\\n   * @dev developer want to mint 200k, developer has to real mint it after `2DelayK +\\n   * @dev delayB`.\\n          ^\\n        t +            /\\n          |          /\\n          |        /\\n      2k+b|      /\\n          |    /\\n       k+b|  / \\n          |/ \\n         b|\\n          0----p---2p---------> amount\\n            \\n   */\\n  function getMintDelay(IP12GameCoin gameCoinAddress, uint256 amountGameCoin)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256 time)\\n  {\\n    time = (amountGameCoin * delayK) / (IP12GameCoin(gameCoinAddress).totalSupply()) + delayB;\\n    return time;\\n  }\\n\\n  //============ Internal ============\\n\\n  /**\\n   * @dev function to create a game coin contract\\n   * @param name game coin name\\n   * @param symbol game coin symbol\\n   * @param gameId game id\\n   * @param gameCoinIconUrl game coin icon's url\\n   * @param amountGameCoin how many for first mint\\n   */\\n  function _create(\\n    string memory name,\\n    string memory symbol,\\n    string memory gameId,\\n    string memory gameCoinIconUrl,\\n    uint256 amountGameCoin\\n  ) internal virtual returns (P12GameCoin gameCoinAddress) {\\n    P12GameCoin gameCoin = new P12GameCoin(address(this), name, symbol, gameId, gameCoinIconUrl, amountGameCoin);\\n    gameCoinAddress = gameCoin;\\n  }\\n\\n  /**\\n   * @dev hash function to general mintId\\n   * @param gameCoinAddress game coin address\\n   * @param declarer address which declare to mint game coin\\n   * @param amount how much to mint\\n   * @param timestamp time when declare\\n   * @param salt a random bytes32\\n   * @return hash mintId\\n   */\\n  function _hashOperation(\\n    IP12GameCoin gameCoinAddress,\\n    address declarer,\\n    uint256 amount,\\n    uint256 timestamp,\\n    bytes32 salt\\n  ) internal virtual returns (bytes32 hash) {\\n    bytes32 preMintId = preMintIds[gameCoinAddress];\\n\\n    bytes32 preMintIdNew = keccak256(abi.encode(gameCoinAddress, declarer, amount, timestamp, preMintId, salt));\\n    preMintIds[gameCoinAddress] = preMintIdNew;\\n    return preMintIdNew;\\n  }\\n\\n  /** upgrade function */\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n  /**\\n   * @dev get current block's timestamp\\n   */\\n  function _getBlockTimestamp() internal view virtual returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  function _verifyDev() internal view {\\n    if (msg.sender != dev) revert NotP12Dev();\\n  }\\n\\n  function _verifyGameDev(IP12GameCoin token) internal view {\\n    if (msg.sender != allGames[allGameCoins[token]]) revert CommonError.NotGameDeveloper(msg.sender, allGameCoins[token]);\\n  }\\n\\n  /**\\n   * @dev compare two string and judge whether they are the same\\n   */\\n  function _compareStrings(string memory a, string memory b) internal pure virtual returns (bool) {\\n    return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n  }\\n\\n  // ============= Modifier ================\\n  modifier onlyDev() {\\n    _verifyDev();\\n    _;\\n  }\\n\\n  modifier onlyGameDev(IP12GameCoin token) {\\n    _verifyGameDev(token);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x94daf4c1e5447b6b058d621af7bc98ebfd077a2969779edcc30f279b9d8a340e\",\"license\":\"GPL-3.0-only\"},\"contracts/coinFactory/P12GameCoin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '../access/SafeOwnable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol';\\nimport './interfaces/IP12GameCoin.sol';\\n\\ncontract P12GameCoin is IP12GameCoin, ERC20, ERC20Burnable, SafeOwnable {\\n  /**\\n   * @dev Off-chain data, game id\\n   */\\n  string private _gameId;\\n\\n  /**\\n   * @dev game coin's logo\\n   */\\n  string private _iconUrl;\\n\\n  /**\\n   * @dev override oz erc20 to update both variable\\n   */\\n  string private _name;\\n  string private _symbol;\\n\\n  /**\\n   * @param name_ game coin name\\n   * @param symbol_ game coin symbol\\n   * @param gameId_ gameId\\n   * @param iconUrl_ game coin icon's url\\n   * @param amount_ amount of first minting\\n   */\\n  constructor(\\n    address owner_,\\n    string memory name_,\\n    string memory symbol_,\\n    string memory gameId_,\\n    string memory iconUrl_,\\n    uint256 amount_\\n  ) ERC20(name_, symbol_) SafeOwnable(owner_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _gameId = gameId_;\\n    _iconUrl = iconUrl_;\\n    _mint(msg.sender, amount_);\\n  }\\n\\n  /**\\n   * @dev mint function, the Owner will only be factory contract\\n   * @param to address which receive newly-minted coin\\n   * @param amount amount of the minting\\n   */\\n  function mint(address to, uint256 amount) external override onlyOwner {\\n    _mint(to, amount);\\n  }\\n\\n  /**\\n   * @dev transfer function for just a basic transfer with an off-chain account\\n   * @dev called when a user want to deposit his coin from on-chain to off-chain\\n   * @param recipient address which receive the coin, usually be custodian address\\n   * @param account off-chain account\\n   * @param amount amount of this transfer\\n   */\\n  function transferWithAccount(\\n    address recipient,\\n    string memory account,\\n    uint256 amount\\n  ) external override {\\n    transfer(recipient, amount);\\n    emit TransferWithAccount(recipient, account, amount);\\n  }\\n\\n  /**\\n   * @dev set new name\\n   */\\n  function setName(string calldata newName) external override onlyOwner {\\n    string memory oldName = _name;\\n    _name = newName;\\n    emit NameUpdated(oldName, newName);\\n  }\\n\\n  /**\\n   * @dev set new symbol\\n   */\\n  function setSymbol(string calldata newSymbol) external override onlyOwner {\\n    string memory oldSymbol = _symbol;\\n    _symbol = newSymbol;\\n    emit SymbolUpdated(oldSymbol, newSymbol);\\n  }\\n\\n  /**\\n   * @dev set new Icon Url\\n   */\\n  function setGameCoinIconUrl(string calldata newUrl) external override onlyOwner {\\n    string memory oldUrl = _iconUrl;\\n    _iconUrl = newUrl;\\n    emit IconUrlUpdated(oldUrl, newUrl);\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the gameId of the token\\n   */\\n  function gameId() public view virtual override returns (string memory) {\\n    return _gameId;\\n  }\\n\\n  /**\\n   * @dev Returns the icon url of the token\\n   */\\n  function gameCoinIconUrl() public view virtual override returns (string memory) {\\n    return _iconUrl;\\n  }\\n}\\n\",\"keccak256\":\"0x3a9163152764652f39d71a2661d49e15bec0335193f235fb107c5a9cba00f735\",\"license\":\"GPL-3.0-only\"},\"contracts/coinFactory/interfaces/IP12CoinFactoryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '../../staking/interfaces/IP12MineUpgradeable.sol';\\nimport '../../staking/interfaces/IGaugeController.sol';\\nimport './IP12GameCoin.sol';\\n\\ninterface IP12CoinFactoryUpgradeable {\\n  // register gameId =>developer\\n  function register(string memory gameId, address developer) external;\\n\\n  // mint game coin\\n  function create(\\n    string memory name,\\n    string memory symbol,\\n    string memory gameId,\\n    string memory gameCoinIconUrl,\\n    uint256 amountGameCoin,\\n    uint256 amountP12\\n  ) external returns (IP12GameCoin);\\n\\n  //  mint coin and Launch a statement\\n  function queueMintCoin(\\n    string memory gameId,\\n    IP12GameCoin gameCoinAddress,\\n    uint256 amountGameCoin\\n  ) external returns (bool);\\n\\n  // execute Mint coin\\n  function executeMintCoin(IP12GameCoin gameCoinAddress, bytes32 mintId) external returns (bool);\\n\\n  function withdraw(\\n    address userAddress,\\n    IP12GameCoin gameCoinAddress,\\n    uint256 amountGameCoin\\n  ) external returns (bool);\\n\\n  function setDev(address newDev) external;\\n\\n  function setP12Mine(IP12MineUpgradeable newP12Mine) external;\\n\\n  function setGaugeController(IGaugeController newGaugeController) external;\\n\\n  function setUniswapFactory(IUniswapV2Factory newUniswapFactory) external;\\n\\n  function setUniswapRouter(IUniswapV2Router02 newUniswapRouter) external;\\n\\n  function setP12Token(address newP12Token) external;\\n\\n  // get mintFee\\n  function getMintFee(IP12GameCoin gameCoinAddress, uint256 amountGameCoin) external view returns (uint256);\\n\\n  // get mintDelay\\n  function getMintDelay(IP12GameCoin gameCoinAddress, uint256 amountGameCoin) external view returns (uint256);\\n\\n  // get delayK\\n  function setDelayK(uint256 delayK) external returns (bool);\\n\\n  // get delayB\\n  function setDelayB(uint256 delayB) external returns (bool);\\n\\n  error MisMatchCoinWithGameId(IP12GameCoin coin, string gameId);\\n  // not existent mint id\\n  error NonExistenceMintId(bytes32 mintId);\\n  // mintId is already executed\\n  error ExecutedMint(bytes32 mintId);\\n  // it's not time to mint this batch of coins\\n  error NotTimeToMint(bytes32 mintId);\\n  // don't have p12 dev role\\n  error NotP12Dev();\\n  // invalid liquidity when first create coin and create swap pool\\n  error InvalidLiquidity();\\n\\n  // register Game developer log\\n  event RegisterGame(string gameId, address indexed developer);\\n\\n  // register Game coin log\\n  event CreateGameCoin(IP12GameCoin indexed gameCoinAddress, string gameId, uint256 amountP12);\\n\\n  // mint coin in future log\\n  event QueueMintCoin(\\n    bytes32 indexed mintId,\\n    IP12GameCoin indexed gameCoinAddress,\\n    uint256 mintAmount,\\n    uint256 unlockTimestamp,\\n    uint256 amountP12\\n  );\\n\\n  // mint coin success log\\n  event ExecuteMintCoin(bytes32 indexed mintId, IP12GameCoin indexed gameCoinAddress, address indexed executor);\\n\\n  // game player withdraw gameCoin\\n  event Withdraw(address userAddress, IP12GameCoin gameCoinAddress, uint256 amountGameCoin);\\n\\n  event SetDev(address oldDev, address newDev);\\n\\n  // p12Mine and GaugeController address change log\\n  event SetP12Mine(IP12MineUpgradeable oldP12Mine, IP12MineUpgradeable newP12Mine);\\n\\n  event SetGaugeController(IGaugeController oldGaugeController, IGaugeController newGaugeController);\\n\\n  // uniFactory and router address change log\\n  event SetUniswapFactory(IUniswapV2Factory oldUniswapFactory, IUniswapV2Factory newUniswapFactory);\\n\\n  event SetUniswapRouter(IUniswapV2Router02 oldUniswapRouter, IUniswapV2Router02 newUniswapRouter);\\n\\n  event SetP12Token(address oldP12Token, address newP12Token);\\n\\n  // change delayB log\\n  event SetDelayB(uint256 oldDelayB, uint256 newDelayB);\\n\\n  // change delayK log\\n  event SetDelayK(uint256 oldDelayK, uint256 newDelayK);\\n}\\n\",\"keccak256\":\"0x469bad835061891030256fc7d2ee6b4b85f467a2949ebdfb8abf5a757dba11ac\",\"license\":\"GPL-3.0-only\"},\"contracts/coinFactory/interfaces/IP12GameCoin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.15;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IP12GameCoin is IERC20 {\\n  /**\\n   * @dev record the event that transfer coin with a off-chain account, which will be used when someone want to deposit his coin to off-chain game.\\n   */\\n  event TransferWithAccount(address recipient, string account, uint256 amount);\\n\\n  event NameUpdated(string oldName, string newName);\\n\\n  event SymbolUpdated(string oldSymbol, string newSymbol);\\n\\n  event IconUrlUpdated(string oldUrl, string newUrl);\\n\\n  function mint(address to, uint256 amount) external;\\n\\n  function gameId() external view returns (string memory);\\n\\n  function gameCoinIconUrl() external view returns (string memory);\\n\\n  function transferWithAccount(\\n    address recipient,\\n    string memory account,\\n    uint256 amount\\n  ) external;\\n\\n  function setName(string calldata newName) external;\\n\\n  function setSymbol(string calldata newSymbol) external;\\n\\n  function setGameCoinIconUrl(string calldata newUrl) external;\\n}\\n\",\"keccak256\":\"0xfcbc38af2a2ffc6a0b9b21b1ba138ce96c6bb335e2f5da04cad0f3ebef477d96\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/CommonError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nlibrary CommonError {\\n  // pass zero address as args\\n  error ZeroAddressSet();\\n  // pass zero uint as args;\\n  error ZeroUintSet();\\n  // not game developer and no permit to do something\\n  error NotGameDeveloper(address user, string gameId);\\n  // not enough p12, pass zero value for p12 amount\\n  error NotEnoughP12();\\n  // no permission to do something\\n  error NoPermission();\\n}\\n\",\"keccak256\":\"0x78c23aec5f4e5c01c779968e8376c6c74d61d73c7980d5b71bc61559b61ef557\",\"license\":\"GPL-3.0-only\"},\"contracts/staking/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport '../../token/interfaces/IVotingEscrow.sol';\\n\\ninterface IGaugeController {\\n  event CommitOwnership(address admin);\\n\\n  event ApplyOwnership(address admin);\\n\\n  event AddType(string name, int128 typeId);\\n\\n  event NewTypeWeight(int128 typeId, uint256 time, uint256 weight, uint256 totalWeight);\\n\\n  event NewGaugeWeight(address gaugeAddress, uint256 time, uint256 weight, uint256 totalWeight);\\n\\n  event VoteForGauge(uint256 time, address user, address gaugeAddress, uint256 weight);\\n\\n  event NewGauge(address addr, int128 gaugeType, uint256 weight);\\n\\n  event SetVotingEscrow(IVotingEscrow oldVotingEscrow, IVotingEscrow newVotingEscrow);\\n\\n  event SetP12Factory(address oldP12Factory, address newP12Factory);\\n\\n  // invalid gauge type\\n  error InvalidGaugeType();\\n  // duplicate gauge type\\n  error DuplicatedGaugeType();\\n  //\\n  error AddGaugeFail();\\n  // weight should be between 1,10000 \\n  error InvalidWeight();\\n  // user's token will be unlock util next epoch start\\n  error UnLockTooSoon();\\n  // user already vote for this epoch\\n  error VoteTooOften();\\n\\n  function getGaugeTypes(address addr) external returns (int128);\\n\\n  function checkpoint() external;\\n\\n  function gaugeRelativeWeightWrite(address addr, uint256 time) external returns (uint256);\\n\\n  function changeTypeWeight(int128 typeId, uint256 weight) external;\\n\\n  function changeGaugeWeight(address addr, uint256 weight) external;\\n\\n  function voteForGaugeWeights(address gaugeAddr, uint256 userWeight) external;\\n\\n  function checkpointGauge(address addr) external;\\n\\n  function gaugeRelativeWeight(address lpToken, uint256 time) external returns (uint256);\\n\\n  function getGaugeWeight(address addr) external returns (uint256);\\n\\n  function getTypeWeight(int128 typeId) external returns (uint256);\\n\\n  function getTotalWeight() external returns (uint256);\\n\\n  function getWeightsSumPerType(int128 typeId) external returns (uint256);\\n\\n  function addGauge(\\n    address addr,\\n    int128 gaugeType,\\n    uint256 weight\\n  ) external;\\n\\n  function addType(string memory name, uint256 weight) external;\\n\\n  function setVotingEscrow(IVotingEscrow newVotingEscrow) external;\\n\\n  function setP12CoinFactory(address newP12Factory) external;\\n}\\n\",\"keccak256\":\"0xcf57293ed7cf0e81f20c0ace0f0fc8e4896e3930aa4bbfe46c39869e585b8777\",\"license\":\"GPL-3.0-only\"},\"contracts/staking/interfaces/IP12MineUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport '../../token/interfaces/IVotingEscrow.sol';\\nimport './IGaugeController.sol';\\n\\ninterface IP12MineUpgradeable {\\n  event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 userAmount, uint256 poolAmount); // deposit lpToken log\\n  event ExecuteWithdraw(\\n    address indexed user,\\n    uint256 indexed pid,\\n    bytes32 indexed withdrawId,\\n    uint256 amount,\\n    uint256 userAmount,\\n    uint256 poolAmount\\n  ); // withdraw lpToken log\\n  event QueueWithdraw(\\n    address indexed user,\\n    uint256 pid,\\n    uint256 indexed amount,\\n    bytes32 indexed newWithdrawId,\\n    uint256 unlockTimestamp\\n  ); // delayed unStaking mining log\\n  event Claim(address indexed user, uint256 amount,address lpToken); // get rewards\\n  event SetDelayB(uint256 oldDelayB, uint256 newDelayB); // change delayB log\\n  event SetDelayK(uint256 oldDelayK, uint256 newDelayK); // change delayK log\\n  event SetRate(uint256 oldRate, uint256 newRate); // set new rate\\n  event SetP12Factory(address oldP12Factory, address newP12Factory);\\n  event SetGaugeController(IGaugeController oldGaugeController, IGaugeController newGaugeController);\\n  event WithdrawLpTokenEmergency(address lpToken, uint256 amount);\\n\\n  event Emergency(address executor, uint256 emergencyUnlockTime);\\n  event Checkpoint(address indexed lpToken, uint256 indexed poolAmount, uint256 accP12PerShare);\\n\\n  // Emergency status is already set\\n  error EmergencyAlreadySet();\\n  // no emergency now\\n  error NoEmergencyNow();\\n  // emergency withdraw status unlock yet\\n  error EmergencyUnlockYet();\\n  // invalid lp amount to add\\n  error InvalidLpAmount(uint256 amount);\\n  // lp token pool already exist\\n  error LpTokenExist();\\n  // lp token pool not exist yet\\n  error LpTokenNotExist();\\n  // withdraw much more token than user can\\n  error WithDrawTooMuch(uint256 max, uint256 request);\\n  // user has not stake token yet\\n  error NotStakeTokenYet();\\n  // this withdraw deal is already executed\\n  error AlreadyWithdrawn();\\n  // it's too early to withdrawn\\n  error TooEarlyToWithdrawn();\\n  // it's too early to check point\\n  error TooEarlyToCheck();\\n\\n\\n  function poolLength() external returns (uint256);\\n\\n  function getPid(address lpToken) external returns (uint256);\\n\\n  function getUserLpBalance(address lpToken, address user) external returns (uint256);\\n\\n  function checkpointAll() external;\\n\\n  function getWithdrawUnlockTimestamp(address lpToken, uint256 amount) external returns (uint256);\\n\\n  function withdrawEmergency() external;\\n\\n  function withdrawLpTokenEmergency(address lpToken) external;\\n\\n  function withdrawAllLpTokenEmergency() external;\\n\\n  function emergency() external;\\n\\n  function createPool(address lpToken) external; // new pool\\n\\n  function setDelayK(uint256 delayK) external returns (bool);\\n\\n  function setDelayB(uint256 delayB) external returns (bool);\\n\\n  function deposit(address lpToken, uint256 amount) external; // deposit lpToken\\n\\n  function setRate(uint256 newRate) external returns (bool);\\n\\n  function setP12CoinFactory(address newP12Factory) external;\\n\\n  function setGaugeController(IGaugeController newGaugeController) external;\\n\\n  function executeWithdraw(address lpToken, bytes32 id) external; // withdraw lpToken\\n\\n  function queueWithdraw(address lpToken, uint256 amount) external; // delayed unStaking mining\\n\\n  function addLpTokenInfoForGameCreator(\\n    address lpToken,\\n    uint256 amount,\\n    address gameCoinCreator\\n  ) external; // add lpToken info for gameCoin creator when first time\\n\\n  function claim(address lpToken) external returns (uint256); // get pending rewards\\n\\n  function claimAll() external returns (uint256); // get all pending rewards\\n\\n  function checkpoint(address lpToken) external;\\n}\\n\",\"keccak256\":\"0xbcf92d654188f10af78f2ca712ab1118e5112ae8c324515058a78d89a77863c3\",\"license\":\"GPL-3.0-only\"},\"contracts/token/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\ninterface IVotingEscrow {\\n\\n  error InValidBlockNumber();\\n\\n  error InvalidValue();\\n  // user have not lock token before\\n  error NoExistedLock();\\n  // user have locked token\\n  error LockExisted();\\n  // lock created before is expired, cannot increase amount or time\\n  error LockExpired();\\n  // lock time set is too short\\n  error LockTimeTooShort();\\n  // lock time set is too long\\n  error LockTimeTooLong();\\n  // contract is stopped in case of emergency\\n  error ContractStopped();\\n  // withdraw conditions are not met\\n  error CannotWithdraw();\\n\\n  function getLastUserSlope(address addr) external returns (int256);\\n\\n  function lockedEnd(address addr) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xfb454664d27714c569cd80331596845b0b55525476d2726e95dcdab614e55a81\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051613f9761004c6000396000818161061601528181610659015281816109c401528181610a070152610aa30152613f976000f3fe6080604052600436106200012b5760003560e01c80634f1ef28611620000ad5780638456cb59116200006c5780638456cb5914620003335780638da5cb5b146200034b578063b242e534146200036b578063d5bc3ab11462000390578063e30c397814620003b557600080fd5b80634f1ef286146200029357806352d1902d14620002aa5780635c975abb14620002d1578063715018a614620002f65780637e183ba0146200030e57600080fd5b80633f4ba83a11620000fa5780633f4ba83a14620001f4578063408a908f146200020c578063422cf3fe1462000231578063485cc95514620002565780634e71e0c8146200027b57600080fd5b8063038defd71462000130578063176b9b75146200016d5780633659cfe614620001945780633cd784f114620001b9575b600080fd5b3480156200013d57600080fd5b50620001556200014f366004620015ba565b620003d5565b60405162000164919062001637565b60405180910390f35b3480156200017a57600080fd5b50620001926200018c36600462001698565b62000477565b005b348015620001a157600080fd5b5062000192620001b3366004620015ba565b6200060c565b348015620001c657600080fd5b50600154620001db906001600160a01b031681565b6040516001600160a01b03909116815260200162000164565b3480156200020157600080fd5b5062000192620006f7565b3480156200021957600080fd5b50620001926200022b3660046200170b565b6200070d565b3480156200023e57600080fd5b50620001926200025036600462001761565b62000790565b3480156200026357600080fd5b506200019262000275366004620017bc565b62000810565b3480156200028857600080fd5b506200019262000984565b62000192620002a436600462001810565b620009ba565b348015620002b757600080fd5b50620002c262000a96565b60405190815260200162000164565b348015620002de57600080fd5b5060fc5460ff16604051901515815260200162000164565b3480156200030357600080fd5b506200019262000b4c565b3480156200031b57600080fd5b50620001926200032d366004620015ba565b62000b62565b3480156200034057600080fd5b506200019262000bfa565b3480156200035857600080fd5b5060ca546001600160a01b0316620001db565b3480156200037857600080fd5b50620001926200038a366004620018e0565b62000c0e565b3480156200039d57600080fd5b5062000192620003af3660046200170b565b62000c71565b348015620003c257600080fd5b5060cb546001600160a01b0316620001db565b60006020819052908152604090208054620003f09062001917565b80601f01602080910402602001604051908101604052809291908181526020018280546200041e9062001917565b80156200046f5780601f1062000443576101008083540402835291602001916200046f565b820191906000526020600020905b8154815290600101906020018083116200045157829003601f168201915b505050505081565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060015460405163cad2efad60e01b81523393506001600160a01b03909116915063cad2efad90620004e190859060040162001637565b602060405180830381865afa158015620004ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000525919062001953565b6001600160a01b0316146200055c573381604051633facfa2960e21b81526004016200055392919062001973565b60405180910390fd5b6200056662000e25565b6000308484604051620005799062001596565b6200058793929190620019ca565b604051809103906000f080158015620005a4573d6000803e3d6000fd5b506001600160a01b0381166000908152602081905260409020909150620005cd86888362001a43565b5060405133906001600160a01b038316907f5d0de243db1669e3a7056744cd715c625f0c1c348736c2c2d53d0ddebff1a6c790600090a3505050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003620006575760405162461bcd60e51b8152600401620005539062001b11565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316620006a260008051602062003f1b833981519152546001600160a01b031690565b6001600160a01b031614620006cb5760405162461bcd60e51b8152600401620005539062001b5d565b620006d68162000e6d565b60408051600080825260208201909252620006f49183919062000e77565b50565b6200070162000fef565b6200070b6200101b565b565b8362000719816200106f565b6200072362000e25565b604051633c17845760e11b81526001600160a01b0386169063782f08ae90620007559087908790879060040162001ba9565b600060405180830381600087803b1580156200077057600080fd5b505af115801562000785573d6000803e3d6000fd5b505050505050505050565b826200079c816200106f565b620007a662000e25565b60405163938e3d7b60e01b81526001600160a01b0385169063938e3d7b90620007d6908690869060040162001bc5565b600060405180830381600087803b158015620007f157600080fd5b505af115801562000806573d6000803e3d6000fd5b5050505050505050565b603354610100900460ff1615808015620008315750603354600160ff909116105b806200084d5750303b1580156200084d575060335460ff166001145b620008b25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000553565b6033805460ff191660011790558015620008d6576033805461ff0019166101001790555b6001600160a01b038216620008fe57604051630ae8f22360e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b038416179055620009236200113c565b6200092d6200116d565b6200093883620011a3565b80156200097f576033805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60cb546001600160a01b03163314620009b057604051639d7b369d60e01b815260040160405180910390fd5b6200070b620011d8565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300362000a055760405162461bcd60e51b8152600401620005539062001b11565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662000a5060008051602062003f1b833981519152546001600160a01b031690565b6001600160a01b03161462000a795760405162461bcd60e51b8152600401620005539062001b5d565b62000a848262000e6d565b62000a928282600162000e77565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000b385760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840162000553565b5060008051602062003f1b83398151915290565b62000b5662000fef565b6200070b600062001241565b62000b6c62000fef565b6001546001600160a01b0390811690821662000b9b57604051630ae8f22360e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527fb5004c6dd32173c6ee128faa447de600665c96ba213f764d94599ca5ceda78b1910160405180910390a15050565b62000c0462000fef565b6200070b620012b7565b62000c1862000fef565b6001600160a01b03821662000c4057604051630ae8f22360e21b815260040160405180910390fd5b801562000c525762000a928262001241565b60cb80546001600160a01b0319166001600160a01b0384161790555050565b8362000c7d816200106f565b62000c8762000e25565b60026034540362000cdb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000553565b6002603455604051630118fa4960e01b81526000906001600160a01b03871690630118fa499062000d159088908890889060040162001ba9565b6020604051808303816000875af115801562000d35573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d5b919062001bdb565b6040805160008152602081019182905263731133e960e01b9091529091506001600160a01b0387169063731133e99062000d9f90339085908a906024810162001bf5565b600060405180830381600087803b15801562000dba57600080fd5b505af115801562000dcf573d6000803e3d6000fd5b5050505080866001600160a01b03167f58be1f766b329e9aa34f854f3b08451e86df3ddc1043743469ed3fa3205984db8760405162000e1091815260200190565b60405180910390a35050600160345550505050565b60fc5460ff16156200070b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000553565b620006f462000fef565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161562000ead576200097f83620012f7565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000f0a575060408051601f3d908101601f1916820190925262000f079181019062001bdb565b60015b62000f6f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840162000553565b60008051602062003f1b833981519152811462000fe15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840162000553565b506200097f83838362001396565b60ca546001600160a01b031633146200070b57604051639d7b369d60e01b815260040160405180910390fd5b62001025620013c7565b60fc805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001546001600160a01b0382811660009081526020819052604090819020905163cad2efad60e01b815233939092169163cad2efad91620010b39160040162001cb3565b602060405180830381865afa158015620010d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010f7919062001953565b6001600160a01b031614620006f4576001600160a01b038116600090815260208190526040908190209051633facfa2960e21b81526200055391339160040162001cc8565b603354610100900460ff16620011665760405162461bcd60e51b8152600401620005539062001cee565b6001603455565b603354610100900460ff16620011975760405162461bcd60e51b8152600401620005539062001cee565b60fc805460ff19169055565b603354610100900460ff16620011cd5760405162461bcd60e51b8152600401620005539062001cee565b620006f48162001241565b60ca5460cb546040516001600160a01b03928316929091169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35060cb805460ca80546001600160a01b03199081166001600160a01b03841617909155169055565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610381905560ca80546001600160a01b038084166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620012c162000e25565b60fc805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620010523390565b6001600160a01b0381163b620013665760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000553565b60008051602062003f1b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b620013a18362001412565b600082511180620013af5750805b156200097f57620013c1838362001454565b50505050565b60fc5460ff166200070b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640162000553565b6200141d81620012f7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b620014be5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840162000553565b600080846001600160a01b031684604051620014db919062001d39565b600060405180830381855af49150503d806000811462001518576040519150601f19603f3d011682016040523d82523d6000602084013e6200151d565b606091505b509150915062001548828260405180606001604052806027815260200162003f3b6027913962001551565b95945050505050565b60608315620015625750816200158f565b825115620015735782518084602001fd5b8160405162461bcd60e51b815260040162000553919062001637565b9392505050565b6121c38062001d5883390190565b6001600160a01b0381168114620006f457600080fd5b600060208284031215620015cd57600080fd5b81356200158f81620015a4565b60005b83811015620015f7578181015183820152602001620015dd565b83811115620013c15750506000910152565b6000815180845262001623816020860160208601620015da565b601f01601f19169290920160200192915050565b6020815260006200158f602083018462001609565b60008083601f8401126200165f57600080fd5b50813567ffffffffffffffff8111156200167857600080fd5b6020830191508360208285010111156200169157600080fd5b9250929050565b60008060008060408587031215620016af57600080fd5b843567ffffffffffffffff80821115620016c857600080fd5b620016d6888389016200164c565b90965094506020870135915080821115620016f057600080fd5b50620016ff878288016200164c565b95989497509550505050565b600080600080606085870312156200172257600080fd5b84356200172f81620015a4565b935060208501359250604085013567ffffffffffffffff8111156200175357600080fd5b620016ff878288016200164c565b6000806000604084860312156200177757600080fd5b83356200178481620015a4565b9250602084013567ffffffffffffffff811115620017a157600080fd5b620017af868287016200164c565b9497909650939450505050565b60008060408385031215620017d057600080fd5b8235620017dd81620015a4565b91506020830135620017ef81620015a4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200182457600080fd5b82356200183181620015a4565b9150602083013567ffffffffffffffff808211156200184f57600080fd5b818501915085601f8301126200186457600080fd5b813581811115620018795762001879620017fa565b604051601f8201601f19908116603f01168101908382118183101715620018a457620018a4620017fa565b81604052828152886020848701011115620018be57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215620018f457600080fd5b82356200190181620015a4565b915060208301358015158114620017ef57600080fd5b600181811c908216806200192c57607f821691505b6020821081036200194d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156200196657600080fd5b81516200158f81620015a4565b6001600160a01b0383168152604060208201819052600090620019999083018462001609565b949350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152604060208201819052600090620015489083018486620019a1565b601f8211156200097f57600081815260208120601f850160051c8101602086101562001a1a5750805b601f850160051c820191505b8181101562001a3b5782815560010162001a26565b505050505050565b67ffffffffffffffff83111562001a5e5762001a5e620017fa565b62001a768362001a6f835462001917565b83620019f1565b6000601f84116001811462001aad576000851562001a945750838201355b600019600387901b1c1916600186901b17835562001b0a565b600083815260209020601f19861690835b8281101562001ae0578685013582556020948501946001909201910162001abe565b508682101562001afe5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b83815260406020820152600062001548604083018486620019a1565b60208152600062001999602083018486620019a1565b60006020828403121562001bee57600080fd5b5051919050565b60018060a01b038516815283602082015282604082015260806060820152600062001c24608083018462001609565b9695505050505050565b6000815462001c3d8162001917565b80855260206001838116801562001c5d576001811462001c785762001ca8565b60ff1985168884015283151560051b88018301955062001ca8565b866000528260002060005b8581101562001ca05781548a820186015290830190840162001c83565b890184019650505b505050505092915050565b6020815260006200158f602083018462001c2e565b6001600160a01b0383168152604060208201819052600090620019999083018462001c2e565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825162001d4d818460208701620015da565b919091019291505056fe608060405260006008553480156200001657600080fd5b50604051620021c3380380620021c3833981016040819052620000399162000116565b604080516020810190915260008152829062000055816200009c565b506200006181620000ae565b5080516000036200008557604051639fcc718560e01b815260040160405180910390fd5b6005620000938282620002a5565b50505062000371565b6002620000aa8282620002a5565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200012a57600080fd5b82516001600160a01b03811681146200014257600080fd5b602084810151919350906001600160401b03808211156200016257600080fd5b818601915086601f8301126200017757600080fd5b8151818111156200018c576200018c62000100565b604051601f8201601f19908116603f01168101908382118183101715620001b757620001b762000100565b816040528281528986848701011115620001d057600080fd5b600093505b82841015620001f45784840186015181850187015292850192620001d5565b82841115620002065760008684830101525b8096505050505050509250929050565b600181811c908216806200022b57607f821691505b6020821081036200024c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002a057600081815260208120601f850160051c810160208610156200027b5750805b601f850160051c820191505b818110156200029c5782815560010162000287565b5050505b505050565b81516001600160401b03811115620002c157620002c162000100565b620002d981620002d2845462000216565b8462000252565b602080601f831160018114620003115760008415620002f85750858301515b600019600386901b1c1916600185901b1785556200029c565b600085815260208120601f198616915b82811015620003425788860151825594840194600190910190840162000321565b5085821015620003615787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611e4280620003816000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c8063782f08ae116100ad578063b242e53411610071578063b242e534146102a2578063e30c3978146102b5578063e8a3d485146102c6578063e985e9c5146102ce578063f242432a1461030a57600080fd5b8063782f08ae14610224578063869f7594146102375780638da5cb5b14610257578063938e3d7b1461027c578063a22cb4651461028f57600080fd5b806335403023116100f457806335403023146101c15780634e1273f4146101e15780634e71e0c814610201578063715018a614610209578063731133e91461021157600080fd5b8062fdd58e146101305780630118fa491461015657806301ffc9a7146101695780630e89341c1461018c5780632eb2c2d6146101ac575b600080fd5b61014361013e3660046112de565b61031d565b6040519081526020015b60405180910390f35b610143610164366004611350565b6103b3565b61017c6101773660046113b4565b61040d565b604051901515815260200161014d565b61019f61019a3660046113d8565b61045f565b60405161014d919061143e565b6101bf6101ba36600461159a565b610524565b005b6101436101cf3660046113d8565b60066020526000908152604090205481565b6101f46101ef366004611643565b610570565b60405161014d9190611748565b6101bf610699565b6101bf6106ce565b6101bf61021f36600461175b565b6106e0565b6101bf610232366004611350565b61078a565b6101436102453660046113d8565b60076020526000908152604090205481565b6003546001600160a01b03165b6040516001600160a01b03909116815260200161014d565b6101bf61028a3660046117bb565b6107a2565b6101bf61029d3660046117fc565b6108ac565b6101bf6102b03660046117fc565b6108bb565b6004546001600160a01b0316610264565b61019f610918565b61017c6102dc366004611838565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101bf61031836600461186b565b6109a6565b60006001600160a01b03831661038d5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006103bd6109eb565b600880546000908152600760205260409020859055546103de908484610a16565b6001600860008282546103f191906118e5565b9091555050600854610405906001906118fd565b949350505050565b60006001600160e01b03198216636cdb3d1360e11b148061043e57506001600160e01b031982166303a24d0760e21b145b8061045957506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060085482106104865760405163ed15e6cf60e01b815260048101839052602401610384565b6000828152600960205260409020805461049f90611914565b80601f01602080910402602001604051908101604052809291908181526020018280546104cb90611914565b80156105185780601f106104ed57610100808354040283529160200191610518565b820191906000526020600020905b8154815290600101906020018083116104fb57829003601f168201915b50505050509050919050565b6001600160a01b038516331480610540575061054085336102dc565b61055c5760405162461bcd60e51b81526004016103849061194e565b6105698585858585610aab565b5050505050565b606081518351146105d55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610384565b600083516001600160401b038111156105f0576105f0611451565b604051908082528060200260200182016040528015610619578160200160208202803683370190505b50905060005b84518110156106915761066485828151811061063d5761063d61199d565b60200260200101518583815181106106575761065761199d565b602002602001015161031d565b8282815181106106765761067661199d565b602090810291909101015261068a816119b3565b905061061f565b509392505050565b6004546001600160a01b031633146106c457604051639d7b369d60e01b815260040160405180910390fd5b6106cc610c88565b565b6106d66109eb565b6106cc6000610cf1565b6106e86109eb565b600854831061070d5760405163ed15e6cf60e01b815260048101849052602401610384565b60008381526007602090815260408083205460069092529091205461073290846118e5565b111561075457604051631dd8770560e31b815260048101849052602401610384565b600083815260066020526040812080548492906107729084906118e5565b90915550610784905084848484610d43565b50505050565b6107926109eb565b61079d838383610a16565b505050565b6107aa6109eb565b60008190036107cc57604051639fcc718560e01b815260040160405180910390fd5b6000600580546107db90611914565b80601f016020809104026020016040519081016040528092919081815260200182805461080790611914565b80156108545780601f1061082957610100808354040283529160200191610854565b820191906000526020600020905b81548152906001019060200180831161083757829003601f168201915b5050505050905082826005918261086c929190611a12565b507f89e5b6f07571941ef88c704155a3557ef26b4fd73f9c2c18294de8e767dda34d81600560405161089f929190611ad1565b60405180910390a1505050565b6108b7338383610e57565b5050565b6108c36109eb565b6001600160a01b0382166108ea57604051630ae8f22360e21b815260040160405180910390fd5b80156108f9576108b782610cf1565b600480546001600160a01b0319166001600160a01b0384161790555050565b6005805461092590611914565b80601f016020809104026020016040519081016040528092919081815260200182805461095190611914565b801561099e5780601f106109735761010080835404028352916020019161099e565b820191906000526020600020905b81548152906001019060200180831161098157829003601f168201915b505050505081565b6001600160a01b0385163314806109c257506109c285336102dc565b6109de5760405162461bcd60e51b81526004016103849061194e565b6105698585858585610f37565b6003546001600160a01b031633146106cc57604051639d7b369d60e01b815260040160405180910390fd5b6000819003610a385760405163683d806b60e11b815260040160405180910390fd5b600854831115610a5e5760405163ed15e6cf60e01b815260048101849052602401610384565b6000838152600960205260409020610a77828483611a12565b507fcb8a581c366c006d079f78b3f29b10e2bf252c6a9df7fb60286aa83c09bbd0b183838360405161089f93929190611b6c565b8151835114610b0d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610384565b6001600160a01b038416610b335760405162461bcd60e51b815260040161038490611ba2565b3360005b8451811015610c1a576000858281518110610b5457610b5461199d565b602002602001015190506000858381518110610b7257610b7261199d565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610bc25760405162461bcd60e51b815260040161038490611be7565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610bff9084906118e5565b9250508190555050505080610c13906119b3565b9050610b37565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610c6a929190611c31565b60405180910390a4610c80818787878787611061565b505050505050565b6003546004546040516001600160a01b03928316929091169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35060048054600380546001600160a01b03199081166001600160a01b03841617909155169055565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038416610da35760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610384565b336000610daf856111bc565b90506000610dbc856111bc565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610dee9084906118e5565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610e4e83600089898989611207565b50505050505050565b816001600160a01b0316836001600160a01b031603610eca5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610384565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610f5d5760405162461bcd60e51b815260040161038490611ba2565b336000610f69856111bc565b90506000610f76856111bc565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015610fb95760405162461bcd60e51b815260040161038490611be7565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290610ff69084906118e5565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611056848a8a8a8a8a611207565b505050505050505050565b6001600160a01b0384163b15610c805760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906110a59089908990889088908890600401611c5f565b6020604051808303816000875af19250505080156110e0575060408051601f3d908101601f191682019092526110dd91810190611cbd565b60015b61118c576110ec611cda565b806308c379a0036111255750611100611cf6565b8061110b5750611127565b8060405162461bcd60e51b8152600401610384919061143e565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610384565b6001600160e01b0319811663bc197c8160e01b14610e4e5760405162461bcd60e51b815260040161038490611d7f565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106111f6576111f661199d565b602090810291909101015292915050565b6001600160a01b0384163b15610c805760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061124b9089908990889088908890600401611dc7565b6020604051808303816000875af1925050508015611286575060408051601f3d908101601f1916820190925261128391810190611cbd565b60015b611292576110ec611cda565b6001600160e01b0319811663f23a6e6160e01b14610e4e5760405162461bcd60e51b815260040161038490611d7f565b80356001600160a01b03811681146112d957600080fd5b919050565b600080604083850312156112f157600080fd5b6112fa836112c2565b946020939093013593505050565b60008083601f84011261131a57600080fd5b5081356001600160401b0381111561133157600080fd5b60208301915083602082850101111561134957600080fd5b9250929050565b60008060006040848603121561136557600080fd5b8335925060208401356001600160401b0381111561138257600080fd5b61138e86828701611308565b9497909650939450505050565b6001600160e01b0319811681146113b157600080fd5b50565b6000602082840312156113c657600080fd5b81356113d18161139b565b9392505050565b6000602082840312156113ea57600080fd5b5035919050565b6000815180845260005b81811015611417576020818501810151868301820152016113fb565b81811115611429576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006113d160208301846113f1565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561148c5761148c611451565b6040525050565b60006001600160401b038211156114ac576114ac611451565b5060051b60200190565b600082601f8301126114c757600080fd5b813560206114d482611493565b6040516114e18282611467565b83815260059390931b850182019282810191508684111561150157600080fd5b8286015b8481101561151c5780358352918301918301611505565b509695505050505050565b600082601f83011261153857600080fd5b81356001600160401b0381111561155157611551611451565b604051611568601f8301601f191660200182611467565b81815284602083860101111561157d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156115b257600080fd5b6115bb866112c2565b94506115c9602087016112c2565b935060408601356001600160401b03808211156115e557600080fd5b6115f189838a016114b6565b9450606088013591508082111561160757600080fd5b61161389838a016114b6565b9350608088013591508082111561162957600080fd5b5061163688828901611527565b9150509295509295909350565b6000806040838503121561165657600080fd5b82356001600160401b038082111561166d57600080fd5b818501915085601f83011261168157600080fd5b8135602061168e82611493565b60405161169b8282611467565b83815260059390931b85018201928281019150898411156116bb57600080fd5b948201945b838610156116e0576116d1866112c2565b825294820194908201906116c0565b965050860135925050808211156116f657600080fd5b50611703858286016114b6565b9150509250929050565b600081518084526020808501945080840160005b8381101561173d57815187529582019590820190600101611721565b509495945050505050565b6020815260006113d1602083018461170d565b6000806000806080858703121561177157600080fd5b61177a856112c2565b9350602085013592506040850135915060608501356001600160401b038111156117a357600080fd5b6117af87828801611527565b91505092959194509250565b600080602083850312156117ce57600080fd5b82356001600160401b038111156117e457600080fd5b6117f085828601611308565b90969095509350505050565b6000806040838503121561180f57600080fd5b611818836112c2565b91506020830135801515811461182d57600080fd5b809150509250929050565b6000806040838503121561184b57600080fd5b611854836112c2565b9150611862602084016112c2565b90509250929050565b600080600080600060a0868803121561188357600080fd5b61188c866112c2565b945061189a602087016112c2565b9350604086013592506060860135915060808601356001600160401b038111156118c357600080fd5b61163688828901611527565b634e487b7160e01b600052601160045260246000fd5b600082198211156118f8576118f86118cf565b500190565b60008282101561190f5761190f6118cf565b500390565b600181811c9082168061192857607f821691505b60208210810361194857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016119c5576119c56118cf565b5060010190565b601f82111561079d57600081815260208120601f850160051c810160208610156119f35750805b601f850160051c820191505b81811015610c80578281556001016119ff565b6001600160401b03831115611a2957611a29611451565b611a3d83611a378354611914565b836119cc565b6000601f841160018114611a715760008515611a595750838201355b600019600387901b1c1916600186901b178355610569565b600083815260209020601f19861690835b82811015611aa25786850135825560209485019460019092019101611a82565b5086821015611abf5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b604081526000611ae460408301856113f1565b60208382038185015260008554611afa81611914565b80855260018281168015611b155760018114611b2f57611b5d565b60ff1984168787015282151560051b870186019450611b5d565b896000528560002060005b84811015611b55578154898201890152908301908701611b3a565b880187019550505b50929998505050505050505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000611c44604083018561170d565b8281036020840152611c56818561170d565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090611c8b9083018661170d565b8281036060840152611c9d818661170d565b90508281036080840152611cb181856113f1565b98975050505050505050565b600060208284031215611ccf57600080fd5b81516113d18161139b565b600060033d1115611cf35760046000803e5060005160e01c5b90565b600060443d1015611d045790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715611d3357505050505090565b8285019150815181811115611d4b5750505050505090565b843d8701016020828501011115611d655750505050505090565b611d7460208286010187611467565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e01908301846113f1565b97965050505050505056fea26469706673582212206a368559eec260411d584280a79e3e13cb4bb13c1cb75263b525fca91a6edebc64736f6c634300080f0033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203dda81f94e9df8dfbc0245285f59f26e0ee945efe5e2e28a24af729bdfc4c10b64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106200012b5760003560e01c80634f1ef28611620000ad5780638456cb59116200006c5780638456cb5914620003335780638da5cb5b146200034b578063b242e534146200036b578063d5bc3ab11462000390578063e30c397814620003b557600080fd5b80634f1ef286146200029357806352d1902d14620002aa5780635c975abb14620002d1578063715018a614620002f65780637e183ba0146200030e57600080fd5b80633f4ba83a11620000fa5780633f4ba83a14620001f4578063408a908f146200020c578063422cf3fe1462000231578063485cc95514620002565780634e71e0c8146200027b57600080fd5b8063038defd71462000130578063176b9b75146200016d5780633659cfe614620001945780633cd784f114620001b9575b600080fd5b3480156200013d57600080fd5b50620001556200014f366004620015ba565b620003d5565b60405162000164919062001637565b60405180910390f35b3480156200017a57600080fd5b50620001926200018c36600462001698565b62000477565b005b348015620001a157600080fd5b5062000192620001b3366004620015ba565b6200060c565b348015620001c657600080fd5b50600154620001db906001600160a01b031681565b6040516001600160a01b03909116815260200162000164565b3480156200020157600080fd5b5062000192620006f7565b3480156200021957600080fd5b50620001926200022b3660046200170b565b6200070d565b3480156200023e57600080fd5b50620001926200025036600462001761565b62000790565b3480156200026357600080fd5b506200019262000275366004620017bc565b62000810565b3480156200028857600080fd5b506200019262000984565b62000192620002a436600462001810565b620009ba565b348015620002b757600080fd5b50620002c262000a96565b60405190815260200162000164565b348015620002de57600080fd5b5060fc5460ff16604051901515815260200162000164565b3480156200030357600080fd5b506200019262000b4c565b3480156200031b57600080fd5b50620001926200032d366004620015ba565b62000b62565b3480156200034057600080fd5b506200019262000bfa565b3480156200035857600080fd5b5060ca546001600160a01b0316620001db565b3480156200037857600080fd5b50620001926200038a366004620018e0565b62000c0e565b3480156200039d57600080fd5b5062000192620003af3660046200170b565b62000c71565b348015620003c257600080fd5b5060cb546001600160a01b0316620001db565b60006020819052908152604090208054620003f09062001917565b80601f01602080910402602001604051908101604052809291908181526020018280546200041e9062001917565b80156200046f5780601f1062000443576101008083540402835291602001916200046f565b820191906000526020600020905b8154815290600101906020018083116200045157829003601f168201915b505050505081565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060015460405163cad2efad60e01b81523393506001600160a01b03909116915063cad2efad90620004e190859060040162001637565b602060405180830381865afa158015620004ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000525919062001953565b6001600160a01b0316146200055c573381604051633facfa2960e21b81526004016200055392919062001973565b60405180910390fd5b6200056662000e25565b6000308484604051620005799062001596565b6200058793929190620019ca565b604051809103906000f080158015620005a4573d6000803e3d6000fd5b506001600160a01b0381166000908152602081905260409020909150620005cd86888362001a43565b5060405133906001600160a01b038316907f5d0de243db1669e3a7056744cd715c625f0c1c348736c2c2d53d0ddebff1a6c790600090a3505050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003620006575760405162461bcd60e51b8152600401620005539062001b11565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316620006a260008051602062003f1b833981519152546001600160a01b031690565b6001600160a01b031614620006cb5760405162461bcd60e51b8152600401620005539062001b5d565b620006d68162000e6d565b60408051600080825260208201909252620006f49183919062000e77565b50565b6200070162000fef565b6200070b6200101b565b565b8362000719816200106f565b6200072362000e25565b604051633c17845760e11b81526001600160a01b0386169063782f08ae90620007559087908790879060040162001ba9565b600060405180830381600087803b1580156200077057600080fd5b505af115801562000785573d6000803e3d6000fd5b505050505050505050565b826200079c816200106f565b620007a662000e25565b60405163938e3d7b60e01b81526001600160a01b0385169063938e3d7b90620007d6908690869060040162001bc5565b600060405180830381600087803b158015620007f157600080fd5b505af115801562000806573d6000803e3d6000fd5b5050505050505050565b603354610100900460ff1615808015620008315750603354600160ff909116105b806200084d5750303b1580156200084d575060335460ff166001145b620008b25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840162000553565b6033805460ff191660011790558015620008d6576033805461ff0019166101001790555b6001600160a01b038216620008fe57604051630ae8f22360e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b038416179055620009236200113c565b6200092d6200116d565b6200093883620011a3565b80156200097f576033805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60cb546001600160a01b03163314620009b057604051639d7b369d60e01b815260040160405180910390fd5b6200070b620011d8565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300362000a055760405162461bcd60e51b8152600401620005539062001b11565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662000a5060008051602062003f1b833981519152546001600160a01b031690565b6001600160a01b03161462000a795760405162461bcd60e51b8152600401620005539062001b5d565b62000a848262000e6d565b62000a928282600162000e77565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161462000b385760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840162000553565b5060008051602062003f1b83398151915290565b62000b5662000fef565b6200070b600062001241565b62000b6c62000fef565b6001546001600160a01b0390811690821662000b9b57604051630ae8f22360e21b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527fb5004c6dd32173c6ee128faa447de600665c96ba213f764d94599ca5ceda78b1910160405180910390a15050565b62000c0462000fef565b6200070b620012b7565b62000c1862000fef565b6001600160a01b03821662000c4057604051630ae8f22360e21b815260040160405180910390fd5b801562000c525762000a928262001241565b60cb80546001600160a01b0319166001600160a01b0384161790555050565b8362000c7d816200106f565b62000c8762000e25565b60026034540362000cdb5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000553565b6002603455604051630118fa4960e01b81526000906001600160a01b03871690630118fa499062000d159088908890889060040162001ba9565b6020604051808303816000875af115801562000d35573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d5b919062001bdb565b6040805160008152602081019182905263731133e960e01b9091529091506001600160a01b0387169063731133e99062000d9f90339085908a906024810162001bf5565b600060405180830381600087803b15801562000dba57600080fd5b505af115801562000dcf573d6000803e3d6000fd5b5050505080866001600160a01b03167f58be1f766b329e9aa34f854f3b08451e86df3ddc1043743469ed3fa3205984db8760405162000e1091815260200190565b60405180910390a35050600160345550505050565b60fc5460ff16156200070b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000553565b620006f462000fef565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161562000ead576200097f83620012f7565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801562000f0a575060408051601f3d908101601f1916820190925262000f079181019062001bdb565b60015b62000f6f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840162000553565b60008051602062003f1b833981519152811462000fe15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840162000553565b506200097f83838362001396565b60ca546001600160a01b031633146200070b57604051639d7b369d60e01b815260040160405180910390fd5b62001025620013c7565b60fc805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001546001600160a01b0382811660009081526020819052604090819020905163cad2efad60e01b815233939092169163cad2efad91620010b39160040162001cb3565b602060405180830381865afa158015620010d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010f7919062001953565b6001600160a01b031614620006f4576001600160a01b038116600090815260208190526040908190209051633facfa2960e21b81526200055391339160040162001cc8565b603354610100900460ff16620011665760405162461bcd60e51b8152600401620005539062001cee565b6001603455565b603354610100900460ff16620011975760405162461bcd60e51b8152600401620005539062001cee565b60fc805460ff19169055565b603354610100900460ff16620011cd5760405162461bcd60e51b8152600401620005539062001cee565b620006f48162001241565b60ca5460cb546040516001600160a01b03928316929091169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35060cb805460ca80546001600160a01b03199081166001600160a01b03841617909155169055565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610381905560ca80546001600160a01b038084166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620012c162000e25565b60fc805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620010523390565b6001600160a01b0381163b620013665760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000553565b60008051602062003f1b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b620013a18362001412565b600082511180620013af5750805b156200097f57620013c1838362001454565b50505050565b60fc5460ff166200070b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640162000553565b6200141d81620012f7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b620014be5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840162000553565b600080846001600160a01b031684604051620014db919062001d39565b600060405180830381855af49150503d806000811462001518576040519150601f19603f3d011682016040523d82523d6000602084013e6200151d565b606091505b509150915062001548828260405180606001604052806027815260200162003f3b6027913962001551565b95945050505050565b60608315620015625750816200158f565b825115620015735782518084602001fd5b8160405162461bcd60e51b815260040162000553919062001637565b9392505050565b6121c38062001d5883390190565b6001600160a01b0381168114620006f457600080fd5b600060208284031215620015cd57600080fd5b81356200158f81620015a4565b60005b83811015620015f7578181015183820152602001620015dd565b83811115620013c15750506000910152565b6000815180845262001623816020860160208601620015da565b601f01601f19169290920160200192915050565b6020815260006200158f602083018462001609565b60008083601f8401126200165f57600080fd5b50813567ffffffffffffffff8111156200167857600080fd5b6020830191508360208285010111156200169157600080fd5b9250929050565b60008060008060408587031215620016af57600080fd5b843567ffffffffffffffff80821115620016c857600080fd5b620016d6888389016200164c565b90965094506020870135915080821115620016f057600080fd5b50620016ff878288016200164c565b95989497509550505050565b600080600080606085870312156200172257600080fd5b84356200172f81620015a4565b935060208501359250604085013567ffffffffffffffff8111156200175357600080fd5b620016ff878288016200164c565b6000806000604084860312156200177757600080fd5b83356200178481620015a4565b9250602084013567ffffffffffffffff811115620017a157600080fd5b620017af868287016200164c565b9497909650939450505050565b60008060408385031215620017d057600080fd5b8235620017dd81620015a4565b91506020830135620017ef81620015a4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200182457600080fd5b82356200183181620015a4565b9150602083013567ffffffffffffffff808211156200184f57600080fd5b818501915085601f8301126200186457600080fd5b813581811115620018795762001879620017fa565b604051601f8201601f19908116603f01168101908382118183101715620018a457620018a4620017fa565b81604052828152886020848701011115620018be57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060408385031215620018f457600080fd5b82356200190181620015a4565b915060208301358015158114620017ef57600080fd5b600181811c908216806200192c57607f821691505b6020821081036200194d57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156200196657600080fd5b81516200158f81620015a4565b6001600160a01b0383168152604060208201819052600090620019999083018462001609565b949350505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0384168152604060208201819052600090620015489083018486620019a1565b601f8211156200097f57600081815260208120601f850160051c8101602086101562001a1a5750805b601f850160051c820191505b8181101562001a3b5782815560010162001a26565b505050505050565b67ffffffffffffffff83111562001a5e5762001a5e620017fa565b62001a768362001a6f835462001917565b83620019f1565b6000601f84116001811462001aad576000851562001a945750838201355b600019600387901b1c1916600186901b17835562001b0a565b600083815260209020601f19861690835b8281101562001ae0578685013582556020948501946001909201910162001abe565b508682101562001afe5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b83815260406020820152600062001548604083018486620019a1565b60208152600062001999602083018486620019a1565b60006020828403121562001bee57600080fd5b5051919050565b60018060a01b038516815283602082015282604082015260806060820152600062001c24608083018462001609565b9695505050505050565b6000815462001c3d8162001917565b80855260206001838116801562001c5d576001811462001c785762001ca8565b60ff1985168884015283151560051b88018301955062001ca8565b866000528260002060005b8581101562001ca05781548a820186015290830190840162001c83565b890184019650505b505050505092915050565b6020815260006200158f602083018462001c2e565b6001600160a01b0383168152604060208201819052600090620019999083018462001c2e565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825162001d4d818460208701620015da565b919091019291505056fe608060405260006008553480156200001657600080fd5b50604051620021c3380380620021c3833981016040819052620000399162000116565b604080516020810190915260008152829062000055816200009c565b506200006181620000ae565b5080516000036200008557604051639fcc718560e01b815260040160405180910390fd5b6005620000938282620002a5565b50505062000371565b6002620000aa8282620002a5565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200012a57600080fd5b82516001600160a01b03811681146200014257600080fd5b602084810151919350906001600160401b03808211156200016257600080fd5b818601915086601f8301126200017757600080fd5b8151818111156200018c576200018c62000100565b604051601f8201601f19908116603f01168101908382118183101715620001b757620001b762000100565b816040528281528986848701011115620001d057600080fd5b600093505b82841015620001f45784840186015181850187015292850192620001d5565b82841115620002065760008684830101525b8096505050505050509250929050565b600181811c908216806200022b57607f821691505b6020821081036200024c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002a057600081815260208120601f850160051c810160208610156200027b5750805b601f850160051c820191505b818110156200029c5782815560010162000287565b5050505b505050565b81516001600160401b03811115620002c157620002c162000100565b620002d981620002d2845462000216565b8462000252565b602080601f831160018114620003115760008415620002f85750858301515b600019600386901b1c1916600185901b1785556200029c565b600085815260208120601f198616915b82811015620003425788860151825594840194600190910190840162000321565b5085821015620003615787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611e4280620003816000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c8063782f08ae116100ad578063b242e53411610071578063b242e534146102a2578063e30c3978146102b5578063e8a3d485146102c6578063e985e9c5146102ce578063f242432a1461030a57600080fd5b8063782f08ae14610224578063869f7594146102375780638da5cb5b14610257578063938e3d7b1461027c578063a22cb4651461028f57600080fd5b806335403023116100f457806335403023146101c15780634e1273f4146101e15780634e71e0c814610201578063715018a614610209578063731133e91461021157600080fd5b8062fdd58e146101305780630118fa491461015657806301ffc9a7146101695780630e89341c1461018c5780632eb2c2d6146101ac575b600080fd5b61014361013e3660046112de565b61031d565b6040519081526020015b60405180910390f35b610143610164366004611350565b6103b3565b61017c6101773660046113b4565b61040d565b604051901515815260200161014d565b61019f61019a3660046113d8565b61045f565b60405161014d919061143e565b6101bf6101ba36600461159a565b610524565b005b6101436101cf3660046113d8565b60066020526000908152604090205481565b6101f46101ef366004611643565b610570565b60405161014d9190611748565b6101bf610699565b6101bf6106ce565b6101bf61021f36600461175b565b6106e0565b6101bf610232366004611350565b61078a565b6101436102453660046113d8565b60076020526000908152604090205481565b6003546001600160a01b03165b6040516001600160a01b03909116815260200161014d565b6101bf61028a3660046117bb565b6107a2565b6101bf61029d3660046117fc565b6108ac565b6101bf6102b03660046117fc565b6108bb565b6004546001600160a01b0316610264565b61019f610918565b61017c6102dc366004611838565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101bf61031836600461186b565b6109a6565b60006001600160a01b03831661038d5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006103bd6109eb565b600880546000908152600760205260409020859055546103de908484610a16565b6001600860008282546103f191906118e5565b9091555050600854610405906001906118fd565b949350505050565b60006001600160e01b03198216636cdb3d1360e11b148061043e57506001600160e01b031982166303a24d0760e21b145b8061045957506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060085482106104865760405163ed15e6cf60e01b815260048101839052602401610384565b6000828152600960205260409020805461049f90611914565b80601f01602080910402602001604051908101604052809291908181526020018280546104cb90611914565b80156105185780601f106104ed57610100808354040283529160200191610518565b820191906000526020600020905b8154815290600101906020018083116104fb57829003601f168201915b50505050509050919050565b6001600160a01b038516331480610540575061054085336102dc565b61055c5760405162461bcd60e51b81526004016103849061194e565b6105698585858585610aab565b5050505050565b606081518351146105d55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610384565b600083516001600160401b038111156105f0576105f0611451565b604051908082528060200260200182016040528015610619578160200160208202803683370190505b50905060005b84518110156106915761066485828151811061063d5761063d61199d565b60200260200101518583815181106106575761065761199d565b602002602001015161031d565b8282815181106106765761067661199d565b602090810291909101015261068a816119b3565b905061061f565b509392505050565b6004546001600160a01b031633146106c457604051639d7b369d60e01b815260040160405180910390fd5b6106cc610c88565b565b6106d66109eb565b6106cc6000610cf1565b6106e86109eb565b600854831061070d5760405163ed15e6cf60e01b815260048101849052602401610384565b60008381526007602090815260408083205460069092529091205461073290846118e5565b111561075457604051631dd8770560e31b815260048101849052602401610384565b600083815260066020526040812080548492906107729084906118e5565b90915550610784905084848484610d43565b50505050565b6107926109eb565b61079d838383610a16565b505050565b6107aa6109eb565b60008190036107cc57604051639fcc718560e01b815260040160405180910390fd5b6000600580546107db90611914565b80601f016020809104026020016040519081016040528092919081815260200182805461080790611914565b80156108545780601f1061082957610100808354040283529160200191610854565b820191906000526020600020905b81548152906001019060200180831161083757829003601f168201915b5050505050905082826005918261086c929190611a12565b507f89e5b6f07571941ef88c704155a3557ef26b4fd73f9c2c18294de8e767dda34d81600560405161089f929190611ad1565b60405180910390a1505050565b6108b7338383610e57565b5050565b6108c36109eb565b6001600160a01b0382166108ea57604051630ae8f22360e21b815260040160405180910390fd5b80156108f9576108b782610cf1565b600480546001600160a01b0319166001600160a01b0384161790555050565b6005805461092590611914565b80601f016020809104026020016040519081016040528092919081815260200182805461095190611914565b801561099e5780601f106109735761010080835404028352916020019161099e565b820191906000526020600020905b81548152906001019060200180831161098157829003601f168201915b505050505081565b6001600160a01b0385163314806109c257506109c285336102dc565b6109de5760405162461bcd60e51b81526004016103849061194e565b6105698585858585610f37565b6003546001600160a01b031633146106cc57604051639d7b369d60e01b815260040160405180910390fd5b6000819003610a385760405163683d806b60e11b815260040160405180910390fd5b600854831115610a5e5760405163ed15e6cf60e01b815260048101849052602401610384565b6000838152600960205260409020610a77828483611a12565b507fcb8a581c366c006d079f78b3f29b10e2bf252c6a9df7fb60286aa83c09bbd0b183838360405161089f93929190611b6c565b8151835114610b0d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610384565b6001600160a01b038416610b335760405162461bcd60e51b815260040161038490611ba2565b3360005b8451811015610c1a576000858281518110610b5457610b5461199d565b602002602001015190506000858381518110610b7257610b7261199d565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610bc25760405162461bcd60e51b815260040161038490611be7565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610bff9084906118e5565b9250508190555050505080610c13906119b3565b9050610b37565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610c6a929190611c31565b60405180910390a4610c80818787878787611061565b505050505050565b6003546004546040516001600160a01b03928316929091169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35060048054600380546001600160a01b03199081166001600160a01b03841617909155169055565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038416610da35760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610384565b336000610daf856111bc565b90506000610dbc856111bc565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610dee9084906118e5565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610e4e83600089898989611207565b50505050505050565b816001600160a01b0316836001600160a01b031603610eca5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610384565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610f5d5760405162461bcd60e51b815260040161038490611ba2565b336000610f69856111bc565b90506000610f76856111bc565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015610fb95760405162461bcd60e51b815260040161038490611be7565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290610ff69084906118e5565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611056848a8a8a8a8a611207565b505050505050505050565b6001600160a01b0384163b15610c805760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906110a59089908990889088908890600401611c5f565b6020604051808303816000875af19250505080156110e0575060408051601f3d908101601f191682019092526110dd91810190611cbd565b60015b61118c576110ec611cda565b806308c379a0036111255750611100611cf6565b8061110b5750611127565b8060405162461bcd60e51b8152600401610384919061143e565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610384565b6001600160e01b0319811663bc197c8160e01b14610e4e5760405162461bcd60e51b815260040161038490611d7f565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106111f6576111f661199d565b602090810291909101015292915050565b6001600160a01b0384163b15610c805760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061124b9089908990889088908890600401611dc7565b6020604051808303816000875af1925050508015611286575060408051601f3d908101601f1916820190925261128391810190611cbd565b60015b611292576110ec611cda565b6001600160e01b0319811663f23a6e6160e01b14610e4e5760405162461bcd60e51b815260040161038490611d7f565b80356001600160a01b03811681146112d957600080fd5b919050565b600080604083850312156112f157600080fd5b6112fa836112c2565b946020939093013593505050565b60008083601f84011261131a57600080fd5b5081356001600160401b0381111561133157600080fd5b60208301915083602082850101111561134957600080fd5b9250929050565b60008060006040848603121561136557600080fd5b8335925060208401356001600160401b0381111561138257600080fd5b61138e86828701611308565b9497909650939450505050565b6001600160e01b0319811681146113b157600080fd5b50565b6000602082840312156113c657600080fd5b81356113d18161139b565b9392505050565b6000602082840312156113ea57600080fd5b5035919050565b6000815180845260005b81811015611417576020818501810151868301820152016113fb565b81811115611429576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006113d160208301846113f1565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561148c5761148c611451565b6040525050565b60006001600160401b038211156114ac576114ac611451565b5060051b60200190565b600082601f8301126114c757600080fd5b813560206114d482611493565b6040516114e18282611467565b83815260059390931b850182019282810191508684111561150157600080fd5b8286015b8481101561151c5780358352918301918301611505565b509695505050505050565b600082601f83011261153857600080fd5b81356001600160401b0381111561155157611551611451565b604051611568601f8301601f191660200182611467565b81815284602083860101111561157d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156115b257600080fd5b6115bb866112c2565b94506115c9602087016112c2565b935060408601356001600160401b03808211156115e557600080fd5b6115f189838a016114b6565b9450606088013591508082111561160757600080fd5b61161389838a016114b6565b9350608088013591508082111561162957600080fd5b5061163688828901611527565b9150509295509295909350565b6000806040838503121561165657600080fd5b82356001600160401b038082111561166d57600080fd5b818501915085601f83011261168157600080fd5b8135602061168e82611493565b60405161169b8282611467565b83815260059390931b85018201928281019150898411156116bb57600080fd5b948201945b838610156116e0576116d1866112c2565b825294820194908201906116c0565b965050860135925050808211156116f657600080fd5b50611703858286016114b6565b9150509250929050565b600081518084526020808501945080840160005b8381101561173d57815187529582019590820190600101611721565b509495945050505050565b6020815260006113d1602083018461170d565b6000806000806080858703121561177157600080fd5b61177a856112c2565b9350602085013592506040850135915060608501356001600160401b038111156117a357600080fd5b6117af87828801611527565b91505092959194509250565b600080602083850312156117ce57600080fd5b82356001600160401b038111156117e457600080fd5b6117f085828601611308565b90969095509350505050565b6000806040838503121561180f57600080fd5b611818836112c2565b91506020830135801515811461182d57600080fd5b809150509250929050565b6000806040838503121561184b57600080fd5b611854836112c2565b9150611862602084016112c2565b90509250929050565b600080600080600060a0868803121561188357600080fd5b61188c866112c2565b945061189a602087016112c2565b9350604086013592506060860135915060808601356001600160401b038111156118c357600080fd5b61163688828901611527565b634e487b7160e01b600052601160045260246000fd5b600082198211156118f8576118f86118cf565b500190565b60008282101561190f5761190f6118cf565b500390565b600181811c9082168061192857607f821691505b60208210810361194857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016119c5576119c56118cf565b5060010190565b601f82111561079d57600081815260208120601f850160051c810160208610156119f35750805b601f850160051c820191505b81811015610c80578281556001016119ff565b6001600160401b03831115611a2957611a29611451565b611a3d83611a378354611914565b836119cc565b6000601f841160018114611a715760008515611a595750838201355b600019600387901b1c1916600186901b178355610569565b600083815260209020601f19861690835b82811015611aa25786850135825560209485019460019092019101611a82565b5086821015611abf5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b604081526000611ae460408301856113f1565b60208382038185015260008554611afa81611914565b80855260018281168015611b155760018114611b2f57611b5d565b60ff1984168787015282151560051b870186019450611b5d565b896000528560002060005b84811015611b55578154898201890152908301908701611b3a565b880187019550505b50929998505050505050505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b604081526000611c44604083018561170d565b8281036020840152611c56818561170d565b95945050505050565b6001600160a01b0386811682528516602082015260a060408201819052600090611c8b9083018661170d565b8281036060840152611c9d818661170d565b90508281036080840152611cb181856113f1565b98975050505050505050565b600060208284031215611ccf57600080fd5b81516113d18161139b565b600060033d1115611cf35760046000803e5060005160e01c5b90565b600060443d1015611d045790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715611d3357505050505090565b8285019150815181811115611d4b5750505050505090565b843d8701016020828501011115611d655750505050505090565b611d7460208286010187611467565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611e01908301846113f1565b97965050505050505056fea26469706673582212206a368559eec260411d584280a79e3e13cb4bb13c1cb75263b525fca91a6edebc64736f6c634300080f0033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203dda81f94e9df8dfbc0245285f59f26e0ee945efe5e2e28a24af729bdfc4c10b64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimOwnership()": {
        "details": "pending owner call this function to claim ownership"
      },
      "createAssetAndMint(address,uint256,string)": {
        "details": "create asset and mint to msg.sender address",
        "params": {
          "amount": "amount of asset",
          "collection": "which collection want to create",
          "uri": "new asset's metadata uri"
        }
      },
      "createCollection(string,string)": {
        "details": "create Collection",
        "params": {
          "contractURI": "contract-level metadata uri",
          "gameId": "a off-chain game id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Return the address of the pending owner"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setP12CoinFactory(address)": {
        "params": {
          "newP12CoinFactory": "address of p12CoinFactory"
        }
      },
      "transferOwnership(address,bool)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership"
      },
      "updateCollectionUri(address,string)": {
        "details": "update Collection Uri",
        "params": {
          "collection": "collection address",
          "newUri": "new Contract-level metadata uri"
        }
      },
      "updateSftUri(address,uint256,string)": {
        "details": "update Sft Uri",
        "params": {
          "collection": "collection address",
          "newUri": "new metadata uri",
          "tokenId": "token id"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "p12CoinFactory()": {
        "notice": "p12CoinFactory address, for reading game and developer relationship"
      },
      "setP12CoinFactory(address)": {
        "notice": "set new p12CoinFactory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8780,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "registry",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 8783,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "p12CoinFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8787,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 395,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "_initialized",
        "offset": 0,
        "slot": "51",
        "type": "t_uint8"
      },
      {
        "astId": 398,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "_initializing",
        "offset": 1,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 816,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "_status",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 860,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1540,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 377,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8312,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "_owner",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 8314,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 8516,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 696,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "_paused",
        "offset": 0,
        "slot": "252",
        "type": "t_bool"
      },
      {
        "astId": 801,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 674,
        "contract": "contracts/assetFactory/P12AssetFactoryUpgradable.sol:P12AssetFactoryUpgradable",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}