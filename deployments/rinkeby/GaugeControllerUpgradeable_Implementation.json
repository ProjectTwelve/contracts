{
  "address": "0xb2F832fB670c933c4aABb7519D42ad319D9b297A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "typeId",
          "type": "int128"
        }
      ],
      "name": "AddType",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "ApplyOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "CommitOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "gaugeType",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "NewGauge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "gaugeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        }
      ],
      "name": "NewGaugeWeight",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int128",
          "name": "typeId",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        }
      ],
      "name": "NewTypeWeight",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldP12Factory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newP12Factory",
          "type": "address"
        }
      ],
      "name": "SetP12Factory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IVotingEscrow",
          "name": "oldVotingEscrow",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IVotingEscrow",
          "name": "newVotingEscrow",
          "type": "address"
        }
      ],
      "name": "SetVotingEscrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "gaugeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "VoteForGauge",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEIGHT_VOTE_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "int128",
          "name": "gaugeType",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "addGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "addType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "changeGaugeWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "typeId",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "changeTypeWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "checkpointGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "gaugeRelativeWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "gaugeRelativeWeightWrite",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "name": "gaugeTypeNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gaugeTypes",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "name": "gauges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getGaugeTypes",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getGaugeWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "typeId",
          "type": "int128"
        }
      ],
      "name": "getTypeWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "typeId",
          "type": "int128"
        }
      ],
      "name": "getWeightsSumPerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "votingEscrow_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "p12CoinFactory_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUserVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nGaugeTypes",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nGauges",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "p12CoinFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointsSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bias",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slope",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointsTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointsTypeWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pointsWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bias",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slope",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newP12Factory",
          "type": "address"
        }
      ],
      "name": "setP12CoinFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "newVotingEscrow",
          "type": "address"
        }
      ],
      "name": "setVotingEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "name": "timeSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "name": "timeTypeWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "timeWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gaugeAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "userWeight",
          "type": "uint256"
        }
      ],
      "name": "voteForGaugeWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voteUserPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voteUserSlopes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "slope",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingEscrow",
      "outputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2eb69105788799639917eb0249b8fe26a02684db12d9a804fd70f8a262af533",
  "receipt": {
    "to": null,
    "from": "0xfeD03676c595DD1F1c6716a446cD44B4C90AD290",
    "contractAddress": "0xb2F832fB670c933c4aABb7519D42ad319D9b297A",
    "transactionIndex": 28,
    "gasUsed": "3035661",
    "logsBloom": "0x
    "blockHash": "0x8f85f862fd0ea18f31e43b2492e001a62a84c84e387a8bf98f31e420807f5c24",
    "transactionHash": "0xc2eb69105788799639917eb0249b8fe26a02684db12d9a804fd70f8a262af533",
    "logs": [],
    "blockNumber": 11228656,
    "cumulativeGasUsed": "4738846",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1f7f80fb95b6efcc6f464d7df403eaaa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"typeId\",\"type\":\"int128\"}],\"name\":\"AddType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ApplyOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CommitOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"gaugeType\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"NewGauge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gaugeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"name\":\"NewGaugeWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"typeId\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"}],\"name\":\"NewTypeWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldP12Factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newP12Factory\",\"type\":\"address\"}],\"name\":\"SetP12Factory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IVotingEscrow\",\"name\":\"oldVotingEscrow\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IVotingEscrow\",\"name\":\"newVotingEscrow\",\"type\":\"address\"}],\"name\":\"SetVotingEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gaugeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"VoteForGauge\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEIGHT_VOTE_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"gaugeType\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"addGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"addType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"changeGaugeWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"typeId\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"changeTypeWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkpointGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"gaugeRelativeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"gaugeRelativeWeightWrite\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"name\":\"gaugeTypeNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeTypes\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getGaugeTypes\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getGaugeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"typeId\",\"type\":\"int128\"}],\"name\":\"getTypeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"typeId\",\"type\":\"int128\"}],\"name\":\"getWeightsSumPerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"votingEscrow_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p12CoinFactory_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUserVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nGaugeTypes\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nGauges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p12CoinFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointsSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointsTypeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointsWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bias\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newP12Factory\",\"type\":\"address\"}],\"name\":\"setP12CoinFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"newVotingEscrow\",\"type\":\"address\"}],\"name\":\"setVotingEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"name\":\"timeSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"name\":\"timeTypeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gaugeAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userWeight\",\"type\":\"uint256\"}],\"name\":\"voteForGaugeWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteUserPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voteUserSlopes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addGauge(address,int128,uint256)\":{\"params\":{\"addr\":\"Gauge address\",\"gaugeType\":\"Gauge type\",\"weight\":\"Gauge weight\"}},\"addType(string,uint256)\":{\"params\":{\"name\":\"Name of gauge type\",\"weight\":\"Weight of gauge type\"}},\"changeGaugeWeight(address,uint256)\":{\"params\":{\"addr\":\"`GaugeController` contract address\",\"weight\":\"New Gauge weight\"}},\"changeTypeWeight(int128,uint256)\":{\"params\":{\"typeId\":\"Gauge type id\",\"weight\":\"New Gauge weight\"}},\"checkpointGauge(address)\":{\"params\":{\"addr\":\"Gauge address\"}},\"claimOwnership()\":{\"details\":\"pending owner call this function to claim ownership\"},\"gaugeRelativeWeight(address,uint256)\":{\"params\":{\"addr\":\"Gauge address\",\"time\":\"Relative weight at the specified timestamp in the past or present\"},\"returns\":{\"_0\":\"Value of relative weight normalized to 1e18\"}},\"gaugeRelativeWeightWrite(address,uint256)\":{\"details\":\"Any address can call, however nothing is recorded if the values are filled already\",\"params\":{\"addr\":\"Gauge address\",\"time\":\"Relative weight at the specified timestamp in the past or present\"},\"returns\":{\"_0\":\"Value of relative weight normalized to 1e18\"}},\"getGaugeTypes(address)\":{\"params\":{\"addr\":\"Gauge address\"},\"returns\":{\"_0\":\"Gauge type id\"}},\"getGaugeWeight(address)\":{\"params\":{\"addr\":\"Gauge address\"},\"returns\":{\"_0\":\"Gauge weight\"}},\"getTotalWeight()\":{\"returns\":{\"_0\":\"Total weight\"}},\"getTypeWeight(int128)\":{\"params\":{\"typeId\":\"Type id\"},\"returns\":{\"_0\":\"Type weight\"}},\"getWeightsSumPerType(int128)\":{\"params\":{\"typeId\":\"Type id\"},\"returns\":{\"_0\":\"Sum of gauge weights\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Return the address of the pending owner\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setP12CoinFactory(address)\":{\"params\":{\"newP12Factory\":\"address of newP12Factory\"}},\"setVotingEscrow(address)\":{\"params\":{\"newVotingEscrow\":\"address of votingEscrow\"}},\"transferOwnership(address,bool)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"voteForGaugeWeights(address,uint256)\":{\"params\":{\"gaugeAddr\":\"Gauge which `msg.sender` votes for\",\"userWeight\":\"Weight for a gauge in bps (units of 0.01%). Minimal is 0.01%. Ignored if 0\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGauge(address,int128,uint256)\":{\"notice\":\"Add gauge `addr` of type `gaugeType` with weight `weight`\"},\"addType(string,uint256)\":{\"notice\":\"Add gauge type with name `name` and weight `weight`\"},\"changeGaugeWeight(address,uint256)\":{\"notice\":\"Change weight of gauge `addr` to `weight`\"},\"changeTypeWeight(int128,uint256)\":{\"notice\":\"Change gauge type `typeId` weight to `weight`\"},\"checkpoint()\":{\"notice\":\"Checkpoint to fill data common for all gauges\"},\"checkpointGauge(address)\":{\"notice\":\"Checkpoint to fill data for both a specific gauge and common for all gauges\"},\"gaugeRelativeWeight(address,uint256)\":{\"notice\":\"Get Gauge relative weight (not more than 1.0) normalized to 1e18 (e.g. 1.0 == 1e18). Inflation which will be received by it is inflation_rate * relative_weight / 1e18\"},\"gaugeRelativeWeightWrite(address,uint256)\":{\"notice\":\"Get gauge weight normalized to 1e18 and also fill all the unfilled values for type and gauge records\"},\"getGaugeTypes(address)\":{\"notice\":\"Get gauge type for address\"},\"getGaugeWeight(address)\":{\"notice\":\"Get current gauge weight\"},\"getTotalWeight()\":{\"notice\":\"Get current total (type-weighted) weight\"},\"getTypeWeight(int128)\":{\"notice\":\"Get current type weight\"},\"getWeightsSumPerType(int128)\":{\"notice\":\"Get sum of gauge weights per type\"},\"setP12CoinFactory(address)\":{\"notice\":\"set new p12CoinFactory\"},\"setVotingEscrow(address)\":{\"notice\":\"set new votingEscrow\"},\"voteForGaugeWeights(address,uint256)\":{\"notice\":\"Allocate voting power for changing pool weights\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/GaugeControllerUpgradeable.sol\":\"GaugeControllerUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/access/SafeOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n// Refer to https://github.com/boringcrypto/BoringSolidity/blob/master/contracts/BoringOwnable.sol and https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/access/OwnableUpgradeable.sol\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\n\\ncontract SafeOwnableUpgradeable is Initializable, ContextUpgradeable {\\n  address private _owner;\\n  address private _pendingOwner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  function __Ownable_init() internal onlyInitializing {\\n    __Ownable_init_unchained();\\n  }\\n\\n  function __Ownable_init_unchained() internal onlyInitializing {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Return the address of the pending owner\\n   */\\n  function pendingOwner() public view virtual returns (address) {\\n    return _pendingOwner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), 'SafeOwnable: caller not owner');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   * Note If direct is false, it will set an pending owner and the OwnerShipTransferring\\n   * only happens when the pending owner claim the ownership\\n   */\\n  function transferOwnership(address newOwner, bool direct) public virtual onlyOwner {\\n    require(newOwner != address(0), 'SafeOwnable: new owner is 0');\\n    if (direct) {\\n      _transferOwnership(newOwner);\\n    } else {\\n      _transferPendingOwnership(newOwner);\\n    }\\n  }\\n\\n  /**\\n   * @dev pending owner call this function to claim ownership\\n   */\\n  function claimOwnership() public {\\n    require(msg.sender == _pendingOwner, 'SafeOwnable: caller != pending');\\n\\n    _claimOwnership();\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev set the pending owner address\\n   * Internal function without access restriction.\\n   */\\n  function _transferPendingOwnership(address newOwner) internal virtual {\\n    _pendingOwner = newOwner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _claimOwnership() internal virtual {\\n    address oldOwner = _owner;\\n    emit OwnershipTransferred(oldOwner, _pendingOwner);\\n\\n    _owner = _pendingOwner;\\n    _pendingOwner = address(0);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x8de5eb1e824cf860909d77028719522b6bcf5b4cb96293e7f95c2d1f4299147b\",\"license\":\"GPL-3.0-only\"},\"contracts/staking/ControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '../token/interfaces/IVotingEscrow.sol';\\n\\ncontract ControllerStorage {\\n  IVotingEscrow public votingEscrow; // Voting escrow\\n  address public p12CoinFactory;\\n  // Gauge parameters\\n  // All numbers are \\\"fixed point\\\" on the basis of 1e18\\n  int128 public nGaugeTypes;\\n  int128 public nGauges;\\n  uint256 public timeTotal; // last scheduled time\\n\\n  uint256[45] private __gap;\\n\\n  mapping(int128 => string) public gaugeTypeNames;\\n  // Needed for enumeration\\n  mapping(int128 => address) public gauges;\\n\\n  // we increment values by 1 prior to storing them here so we can rely on a value\\n  // of zero as meaning the gauge has not been set\\n  mapping(address => int128) public gaugeTypes;\\n\\n  mapping(address => mapping(address => VotedSlope)) public voteUserSlopes; // user -> gauge_addr -> VotedSlope\\n  mapping(address => uint256) public voteUserPower; // Total vote power used by user\\n  mapping(address => mapping(address => uint256)) public lastUserVote; // Last user vote's timestamp for each gauge address\\n\\n  // Past and scheduled points for gauge weight, sum of weights per type, total weight\\n  // Point is for bias+slope\\n  // changes_* are for changes in slope\\n  // time_* are for the last change timestamp\\n  // timestamps are rounded to whole weeks\\n\\n  mapping(address => mapping(uint256 => Point)) public pointsWeight; // gauge_addr -> time -> Point\\n  mapping(address => mapping(uint256 => uint256)) internal changesWeight; // gauge_addr -> time -> slope\\n  mapping(address => uint256) public timeWeight; // gauge_addr -> last scheduled time (next week)\\n\\n  mapping(int128 => mapping(uint256 => Point)) public pointsSum; // type_id -> time -> Point\\n  mapping(int128 => mapping(uint256 => uint256)) internal changesSum; // type_id -> time -> slope\\n  mapping(int128 => uint256) public timeSum; // type_id -> last scheduled time (next week)\\n\\n  mapping(uint256 => uint256) public pointsTotal; // time -> total weight\\n\\n  mapping(int128 => mapping(uint256 => uint256)) public pointsTypeWeight; // type_id -> time -> type weight\\n  mapping(int128 => uint256) public timeTypeWeight; // type_id -> last scheduled time (next week)\\n\\n  struct Point {\\n    uint256 bias;\\n    uint256 slope;\\n  }\\n\\n  struct VotedSlope {\\n    uint256 slope;\\n    uint256 power;\\n    uint256 end;\\n  }\\n\\n  struct TmpBiasAndSlope {\\n    uint256 oldWeightBias;\\n    uint256 oldWeightSlope;\\n    uint256 oldSumBias;\\n    uint256 oldSumSlope;\\n  }\\n\\n  struct TmpBias {\\n    uint256 oldBias;\\n    uint256 newBias;\\n  }\\n}\\n\",\"keccak256\":\"0x8d329c01561bee0d248a16f4022bb34287b3bd1536910b8c0d1452838b31a142\",\"license\":\"GPL-3.0-only\"},\"contracts/staking/GaugeControllerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport './interfaces/IGaugeController.sol';\\nimport '../token/interfaces/IVotingEscrow.sol';\\nimport './ControllerStorage.sol';\\nimport '../access/SafeOwnableUpgradeable.sol';\\n\\ncontract GaugeControllerUpgradeable is\\n  ControllerStorage,\\n  IGaugeController,\\n  UUPSUpgradeable,\\n  SafeOwnableUpgradeable,\\n  PausableUpgradeable\\n{\\n  using Math for uint256;\\n  // 7 * 86400 seconds - all future times are rounded by week\\n  uint256 public constant WEEK = 604800;\\n  uint256 public constant MULTIPLIER = 10**18;\\n\\n  // Cannot change weight votes more often than once in 10 days\\n  uint256 public constant WEIGHT_VOTE_DELAY = 10 * 86400;\\n\\n  /**\\n    @notice set new votingEscrow\\n    @param newVotingEscrow address of votingEscrow\\n   */\\n  function setVotingEscrow(IVotingEscrow newVotingEscrow) external virtual override onlyOwner {\\n    IVotingEscrow oldVotingEscrow = votingEscrow;\\n    require(address(newVotingEscrow) != address(0), 'GC: ve can not 0');\\n    votingEscrow = newVotingEscrow;\\n    emit SetVotingEscrow(oldVotingEscrow, newVotingEscrow);\\n  }\\n\\n  /**\\n    @notice set new p12CoinFactory\\n    @param newP12Factory address of newP12Factory\\n   */\\n  function setP12CoinFactory(address newP12Factory) external virtual override onlyOwner {\\n    address oldP12Factory = p12CoinFactory;\\n    require(newP12Factory != address(0), 'GC: ve can not 0');\\n    p12CoinFactory = newP12Factory;\\n    emit SetP12Factory(oldP12Factory, newP12Factory);\\n  }\\n\\n  /**\\n    @notice Get gauge type for address\\n    @param addr Gauge address\\n    @return Gauge type id\\n  */\\n  function getGaugeTypes(address addr) external view virtual override returns (int128) {\\n    int128 gaugeType = gaugeTypes[addr];\\n    require(gaugeType != 0, 'GC: wrong gauge type');\\n    return gaugeType - 1;\\n  }\\n\\n  /**\\n    @notice Add gauge `addr` of type `gaugeType` with weight `weight`\\n    @param addr Gauge address\\n    @param gaugeType Gauge type\\n    @param weight Gauge weight\\n     */\\n  function addGauge(\\n    address addr,\\n    int128 gaugeType,\\n    uint256 weight\\n  ) external virtual override {\\n    require(msg.sender == owner() || msg.sender == address(p12CoinFactory), 'GC: only admin or p12CoinFactory');\\n    require(gaugeType >= 0 && gaugeType < nGaugeTypes, 'GC: gaugeType error');\\n    require(gaugeTypes[addr] == 0, 'GC: duplicated gauge type'); //dev: cannot add the same gauge twice\\n\\n    int128 n = nGauges;\\n    nGauges = n + 1;\\n    gauges[n] = addr;\\n\\n    gaugeTypes[addr] = gaugeType + 1;\\n    uint256 nextTime = ((block.timestamp + WEEK) / WEEK) * WEEK;\\n\\n    if (weight > 0) {\\n      uint256 typeWeight = _getTypeWeight(gaugeType);\\n      uint256 oldSum = _getSum(gaugeType);\\n      uint256 oldTotal = _getTotal();\\n\\n      pointsSum[gaugeType][nextTime].bias = weight + oldSum;\\n      timeSum[gaugeType] = nextTime;\\n      pointsTotal[nextTime] = oldTotal + typeWeight * weight;\\n      timeTotal = nextTime;\\n\\n      pointsWeight[addr][nextTime].bias = weight;\\n    }\\n\\n    if (timeSum[gaugeType] == 0) {\\n      timeSum[gaugeType] = nextTime;\\n    }\\n    timeWeight[addr] = nextTime;\\n\\n    emit NewGauge(addr, gaugeType, weight);\\n  }\\n\\n  /**\\n    @notice Checkpoint to fill data common for all gauges\\n     */\\n  function checkpoint() external virtual override {\\n    _getTotal();\\n  }\\n\\n  /**\\n    @notice Checkpoint to fill data for both a specific gauge and common for all gauges\\n    @param addr Gauge address\\n     */\\n  function checkpointGauge(address addr) external virtual override {\\n    _getWeight(addr);\\n    _getTotal();\\n  }\\n\\n  /**\\n    @notice Get Gauge relative weight (not more than 1.0) normalized to 1e18\\n            (e.g. 1.0 == 1e18). Inflation which will be received by it is\\n            inflation_rate * relative_weight / 1e18\\n    @param addr Gauge address\\n    @param time Relative weight at the specified timestamp in the past or present\\n    @return Value of relative weight normalized to 1e18\\n     */\\n  function gaugeRelativeWeight(address addr, uint256 time) external view virtual override returns (uint256) {\\n    return _gaugeRelativeWeight(addr, time);\\n  }\\n\\n  /**\\n    @notice Get gauge weight normalized to 1e18 and also fill all the unfilled\\n        values for type and gauge records\\n    @dev Any address can call, however nothing is recorded if the values are filled already\\n    @param addr Gauge address\\n    @param time Relative weight at the specified timestamp in the past or present\\n    @return Value of relative weight normalized to 1e18\\n     */\\n  function gaugeRelativeWeightWrite(address addr, uint256 time) external virtual override returns (uint256) {\\n    _getWeight(addr);\\n    _getTotal(); // Also calculates get_sum\\n    return _gaugeRelativeWeight(addr, time);\\n  }\\n\\n  /**\\n    @notice Add gauge type with name `name` and weight `weight`\\n    @param name Name of gauge type\\n    @param weight Weight of gauge type\\n     */\\n  function addType(string memory name, uint256 weight) external virtual override onlyOwner {\\n    int128 typeId = nGaugeTypes;\\n    gaugeTypeNames[typeId] = name;\\n    nGaugeTypes = typeId + 1;\\n    if (weight != 0) {\\n      _changeTypeWeight(typeId, weight);\\n      emit AddType(name, typeId);\\n    }\\n  }\\n\\n  /**\\n    @notice Change gauge type `typeId` weight to `weight`\\n    @param typeId Gauge type id\\n    @param weight New Gauge weight\\n     */\\n  function changeTypeWeight(int128 typeId, uint256 weight) external virtual override onlyOwner {\\n    _changeTypeWeight(typeId, weight);\\n  }\\n\\n  /**\\n    @notice Change weight of gauge `addr` to `weight`\\n    @param addr `GaugeController` contract address\\n    @param weight New Gauge weight\\n     */\\n  function changeGaugeWeight(address addr, uint256 weight) external virtual override onlyOwner {\\n    _changeGaugeWeight(addr, weight);\\n  }\\n\\n  /**\\n        @notice Allocate voting power for changing pool weights\\n        @param gaugeAddr Gauge which `msg.sender` votes for\\n        @param userWeight Weight for a gauge in bps (units of 0.01%). Minimal is 0.01%. Ignored if 0\\n     */\\n  function voteForGaugeWeights(address gaugeAddr, uint256 userWeight) external virtual override whenNotPaused {\\n    uint256 slope = uint256(votingEscrow.getLastUserSlope(msg.sender));\\n    uint256 lockEnd = votingEscrow.lockedEnd(msg.sender);\\n    uint256 nextTime = ((block.timestamp + WEEK) / WEEK) * WEEK;\\n\\n    require(lockEnd > nextTime, 'GC: no valid ve');\\n    require(userWeight <= 10000, 'GC: no enough voting power');\\n    require(block.timestamp >= lastUserVote[msg.sender][gaugeAddr] + WEIGHT_VOTE_DELAY, 'GC: Cannot vote so often');\\n\\n    TmpBias memory tmp1;\\n    int128 gaugeType = gaugeTypes[gaugeAddr] - 1;\\n    require(gaugeType >= 0, 'GC: Gauge not added');\\n    // Prepare slopes and biases in memory\\n    VotedSlope memory oldSlope = voteUserSlopes[msg.sender][gaugeAddr];\\n    uint256 oldDt = 0;\\n    if (oldSlope.end > nextTime) {\\n      oldDt = oldSlope.end - nextTime;\\n    }\\n    tmp1.oldBias = oldSlope.slope * oldDt;\\n    VotedSlope memory newSlope = VotedSlope({ slope: (slope * userWeight) / 10000, end: lockEnd, power: userWeight });\\n    uint256 newDt = lockEnd - nextTime; // dev: raises when expired\\n    tmp1.newBias = newSlope.slope * newDt;\\n\\n    // Check and update powers (weights) used\\n    voteUserPower[msg.sender] = voteUserPower[msg.sender] + newSlope.power - oldSlope.power;\\n    require(voteUserPower[msg.sender] <= 10000, 'GC: Used too much power');\\n\\n    // Remove old and schedule new slope changes\\n    // Remove slope changes for old slopes\\n    // Schedule recording of initial slope for nextTime\\n\\n    {\\n      TmpBiasAndSlope memory tmp2;\\n      tmp2.oldWeightBias = _getWeight(gaugeAddr);\\n      tmp2.oldWeightSlope = pointsWeight[gaugeAddr][nextTime].slope;\\n      tmp2.oldSumBias = _getSum(gaugeType);\\n      tmp2.oldSumSlope = pointsSum[gaugeType][nextTime].slope;\\n\\n      pointsWeight[gaugeAddr][nextTime].bias = Math.max(tmp2.oldWeightBias + tmp1.newBias, tmp1.oldBias) - tmp1.oldBias;\\n      pointsSum[gaugeType][nextTime].bias = Math.max(tmp2.oldSumBias + tmp1.newBias, tmp1.oldBias) - tmp1.oldBias;\\n      if (oldSlope.end > nextTime) {\\n        pointsWeight[gaugeAddr][nextTime].slope =\\n          Math.max(tmp2.oldWeightSlope + newSlope.slope, oldSlope.slope) -\\n          oldSlope.slope;\\n        pointsSum[gaugeType][nextTime].slope = Math.max(tmp2.oldSumSlope + newSlope.slope, oldSlope.slope) - oldSlope.slope;\\n      } else {\\n        pointsWeight[gaugeAddr][nextTime].slope += newSlope.slope;\\n        pointsSum[gaugeType][nextTime].slope += newSlope.slope;\\n      }\\n    }\\n\\n    if (oldSlope.end > block.timestamp) {\\n      // Cancel old slope changes if they still didn't happen\\n      changesWeight[gaugeAddr][oldSlope.end] -= oldSlope.slope;\\n      changesSum[gaugeType][oldSlope.end] -= oldSlope.slope;\\n    }\\n\\n    // Add slope changes for new slopes\\n\\n    changesWeight[gaugeAddr][newSlope.end] += newSlope.slope;\\n    changesSum[gaugeType][newSlope.end] += newSlope.slope;\\n\\n    _getTotal();\\n\\n    voteUserSlopes[msg.sender][gaugeAddr] = newSlope;\\n\\n    // Record last action time\\n    lastUserVote[msg.sender][gaugeAddr] = block.timestamp;\\n    emit VoteForGauge(block.timestamp, msg.sender, gaugeAddr, userWeight);\\n  }\\n\\n  /**\\n        @notice Get current gauge weight\\n        @param addr Gauge address\\n        @return Gauge weight\\n     */\\n  function getGaugeWeight(address addr) external view virtual override returns (uint256) {\\n    return pointsWeight[addr][timeWeight[addr]].bias;\\n  }\\n\\n  /**\\n      @notice Get current type weight\\n      @param typeId Type id\\n      @return Type weight\\n     */\\n  function getTypeWeight(int128 typeId) external view virtual override returns (uint256) {\\n    return pointsTypeWeight[typeId][timeTypeWeight[typeId]];\\n  }\\n\\n  /**\\n        @notice Get current total (type-weighted) weight\\n        @return Total weight\\n    */\\n  function getTotalWeight() external view virtual override returns (uint256) {\\n    return pointsTotal[timeTotal];\\n  }\\n\\n  /**\\n        @notice Get sum of gauge weights per type\\n        @param typeId Type id\\n        @return Sum of gauge weights\\n    */\\n  function getWeightsSumPerType(int128 typeId) external view virtual override returns (uint256) {\\n    return pointsSum[typeId][timeSum[typeId]].bias;\\n  }\\n\\n  //-----------public----------\\n\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  function initialize(address votingEscrow_, address p12CoinFactory_) public initializer {\\n    require(votingEscrow_ != address(0) && p12CoinFactory_ != address(0), 'GC: address can not 0');\\n    votingEscrow = IVotingEscrow(votingEscrow_);\\n    p12CoinFactory = p12CoinFactory_;\\n\\n    __Pausable_init_unchained();\\n    __Ownable_init_unchained();\\n  }\\n\\n  //-----------internal----------\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n  /**\\n    @notice Fill historic type weights week-over-week for missed checkins\\n        and return the type weight for the future week\\n    @param gaugeType Gauge type id\\n    @return Type weight\\n  */\\n  function _getTypeWeight(int128 gaugeType) internal virtual returns (uint256) {\\n    uint256 t = timeTypeWeight[gaugeType];\\n    if (t > 0) {\\n      uint256 w = pointsTypeWeight[gaugeType][t];\\n      for (uint256 i = 0; i < 500; i++) {\\n        if (t > block.timestamp) {\\n          break;\\n        }\\n        t += WEEK;\\n        pointsTypeWeight[gaugeType][t] = w;\\n        if (t > block.timestamp) {\\n          timeTypeWeight[gaugeType] = t;\\n        }\\n      }\\n      return w;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n    @notice Fill sum of gauge weights for the same type week-over-week for\\n        missed checkins and return the sum for the future week\\n    @param gaugeType Gauge type id\\n    @return Sum of weights\\n  */\\n  function _getSum(int128 gaugeType) internal virtual returns (uint256) {\\n    uint256 t = timeSum[gaugeType];\\n    if (t > 0) {\\n      Point memory pt = pointsSum[gaugeType][t];\\n      for (uint256 i = 0; i < 500; i++) {\\n        if (t > block.timestamp) {\\n          break;\\n        }\\n        t += WEEK;\\n        uint256 dBias = pt.slope * WEEK;\\n        if (pt.bias > dBias) {\\n          pt.bias -= dBias;\\n          uint256 dSlope = changesSum[gaugeType][t];\\n          pt.slope -= dSlope;\\n        } else {\\n          pt.bias = 0;\\n          pt.slope = 0;\\n        }\\n        pointsSum[gaugeType][t] = pt;\\n        if (t > block.timestamp) {\\n          timeSum[gaugeType] = t;\\n        }\\n      }\\n      return pt.bias;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n    @notice Fill historic total weights week-over-week for missed checkins\\n      and return the total for the future week\\n    @return Total weight\\n  */\\n  function _getTotal() internal virtual returns (uint256) {\\n    uint256 t = timeTotal;\\n    int128 _nGaugeTypes = nGaugeTypes;\\n    if (t > block.timestamp) {\\n      // If we have already checkpointed - still need to change the value\\n      t -= WEEK;\\n    }\\n\\n    uint256 pt = pointsTotal[t];\\n    for (int128 gaugeType = 0; gaugeType < 100; gaugeType++) {\\n      if (gaugeType == _nGaugeTypes) {\\n        break;\\n      }\\n      _getSum(gaugeType);\\n      _getTypeWeight(gaugeType);\\n    }\\n\\n    for (uint256 i = 0; i < 500; i++) {\\n      if (t > block.timestamp) {\\n        break;\\n      }\\n\\n      t += WEEK;\\n      pt = 0;\\n      // Scales as n_types * n_unchecked_weeks (hopefully 1 at most)\\n      for (int128 gaugeType = 0; gaugeType < 100; gaugeType++) {\\n        if (gaugeType == nGaugeTypes) {\\n          break;\\n        }\\n        uint256 typeSum = pointsSum[gaugeType][t].bias;\\n        uint256 typeWeight = pointsTypeWeight[gaugeType][t];\\n        pt += typeSum * typeWeight;\\n      }\\n      pointsTotal[t] = pt;\\n\\n      if (t > block.timestamp) {\\n        timeTotal = t;\\n      }\\n    }\\n    return pt;\\n  }\\n\\n  /**\\n    @notice Fill historic gauge weights week-over-week for missed checkins\\n        and return the total for the future week\\n    @param gaugeAddr Address of the gauge\\n    @return Gauge weight\\n  */\\n  function _getWeight(address gaugeAddr) internal virtual returns (uint256) {\\n    uint256 t = timeWeight[gaugeAddr];\\n    if (t > 0) {\\n      Point memory pt = pointsWeight[gaugeAddr][t];\\n      for (uint256 i = 0; i < 500; i++) {\\n        if (t > block.timestamp) {\\n          break;\\n        }\\n        t += WEEK;\\n        uint256 dBias = pt.slope * WEEK;\\n        if (pt.bias > dBias) {\\n          pt.bias -= dBias;\\n          uint256 dSlope = changesWeight[gaugeAddr][t];\\n          pt.slope -= dSlope;\\n        } else {\\n          pt.bias = 0;\\n          pt.slope = 0;\\n        }\\n        pointsWeight[gaugeAddr][t] = pt;\\n        if (t > block.timestamp) {\\n          timeWeight[gaugeAddr] = t;\\n        }\\n      }\\n      return pt.bias;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n    @notice Get Gauge relative weight (not more than 1.0) normalized to 1e18\\n            (e.g. 1.0 == 1e18). Inflation which will be received by it is\\n            inflation_rate * relative_weight / 1e18\\n    @param addr Gauge address\\n    @param time Relative weight at the specified timestamp in the past or present\\n    @return Value of relative weight normalized to 1e18\\n     */\\n  function _gaugeRelativeWeight(address addr, uint256 time) internal view virtual returns (uint256) {\\n    uint256 t = (time / WEEK) * WEEK;\\n\\n    uint256 totalWeight = pointsTotal[t];\\n\\n    if (totalWeight > 0) {\\n      int128 gaugeType = gaugeTypes[addr] - 1;\\n      uint256 typeWeight = pointsTypeWeight[gaugeType][t];\\n      uint256 gaugeWeight = pointsWeight[addr][t].bias;\\n      return (MULTIPLIER * typeWeight * gaugeWeight) / totalWeight;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  function _changeTypeWeight(int128 typeId, uint256 weight) internal virtual {\\n    uint256 oldWeight = _getTypeWeight(typeId);\\n    uint256 oldSum = _getSum(typeId);\\n    uint256 totalWeight = _getTotal();\\n    uint256 nextTime = ((block.timestamp + WEEK) / WEEK) * WEEK;\\n\\n    totalWeight = totalWeight + oldSum * weight - oldSum * oldWeight;\\n    pointsTotal[nextTime] = totalWeight;\\n    pointsTypeWeight[typeId][nextTime] = weight;\\n    timeTotal = nextTime;\\n    timeTypeWeight[typeId] = nextTime;\\n\\n    emit NewTypeWeight(typeId, nextTime, weight, totalWeight);\\n  }\\n\\n  function _changeGaugeWeight(address addr, uint256 weight) internal virtual {\\n    // Change gauge weight\\n    // Only needed when testing in reality\\n    int128 gaugeType = gaugeTypes[addr] - 1;\\n    uint256 oldGaugeWeight = _getWeight(addr);\\n    uint256 typeWeight = _getTypeWeight(gaugeType);\\n    uint256 oldSum = _getSum(gaugeType);\\n    uint256 totalWeight = _getTotal();\\n    uint256 nextTime = ((block.timestamp + WEEK) / WEEK) * WEEK;\\n\\n    pointsWeight[addr][nextTime].bias = weight;\\n    timeWeight[addr] = nextTime;\\n\\n    uint256 newSum = oldSum + weight - oldGaugeWeight;\\n    pointsSum[gaugeType][nextTime].bias = newSum;\\n    timeSum[gaugeType] = nextTime;\\n\\n    totalWeight = totalWeight + newSum * typeWeight - oldSum * typeWeight;\\n    pointsTotal[nextTime] = totalWeight;\\n    timeTotal = nextTime;\\n\\n    emit NewGaugeWeight(addr, block.timestamp, weight, totalWeight);\\n  }\\n}\\n\",\"keccak256\":\"0x4440977d7d88a7d01f5493b0b531f9fff7f3f9eac4b23b1bf760c0f1feb96caf\",\"license\":\"GPL-3.0-only\"},\"contracts/staking/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\nimport '../../token/interfaces/IVotingEscrow.sol';\\n\\ninterface IGaugeController {\\n  event CommitOwnership(address admin);\\n\\n  event ApplyOwnership(address admin);\\n\\n  event AddType(string name, int128 typeId);\\n\\n  event NewTypeWeight(int128 typeId, uint256 time, uint256 weight, uint256 totalWeight);\\n\\n  event NewGaugeWeight(address gaugeAddress, uint256 time, uint256 weight, uint256 totalWeight);\\n\\n  event VoteForGauge(uint256 time, address user, address gaugeAddress, uint256 weight);\\n\\n  event NewGauge(address addr, int128 gaugeType, uint256 weight);\\n\\n  event SetVotingEscrow(IVotingEscrow oldVotingEscrow, IVotingEscrow newVotingEscrow);\\n\\n  event SetP12Factory(address oldP12Factory, address newP12Factory);\\n\\n  function getGaugeTypes(address addr) external returns (int128);\\n\\n  function checkpoint() external;\\n\\n  function gaugeRelativeWeightWrite(address addr, uint256 time) external returns (uint256);\\n\\n  function changeTypeWeight(int128 typeId, uint256 weight) external;\\n\\n  function changeGaugeWeight(address addr, uint256 weight) external;\\n\\n  function voteForGaugeWeights(address gaugeAddr, uint256 userWeight) external;\\n\\n  function checkpointGauge(address addr) external;\\n\\n  function gaugeRelativeWeight(address lpToken, uint256 time) external returns (uint256);\\n\\n  function getGaugeWeight(address addr) external returns (uint256);\\n\\n  function getTypeWeight(int128 typeId) external returns (uint256);\\n\\n  function getTotalWeight() external returns (uint256);\\n\\n  function getWeightsSumPerType(int128 typeId) external returns (uint256);\\n\\n  function addGauge(\\n    address addr,\\n    int128 gaugeType,\\n    uint256 weight\\n  ) external;\\n\\n  function addType(string memory name, uint256 weight) external;\\n\\n  function setVotingEscrow(IVotingEscrow newVotingEscrow) external;\\n\\n  function setP12CoinFactory(address newP12Factory) external;\\n}\\n\",\"keccak256\":\"0xf38a5b6d1b395e89a0b1d685ac8e7124debf96990552afbe1cd486ad8c726a0f\",\"license\":\"GPL-3.0-only\"},\"contracts/token/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.15;\\n\\ninterface IVotingEscrow {\\n  function getLastUserSlope(address addr) external returns (int256);\\n\\n  function lockedEnd(address addr) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b86f26484c0360029da65eb81b461fb0ec612c4ff3290dc82f5396b5733c6b9\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516135f961004c60003960008181610a9301528181610ad301528181610ddb01528181610e1b0152610eaa01526135f96000f3fe6080604052600436106102ae5760003560e01c806372be527611610175578063c685775a116100dc578063e4036c6d11610095578063ec73d9061161006f578063ec73d90614610998578063f4359ce5146109c5578063f763d1ff146109dc578063f89993f014610a1b57600080fd5b8063e4036c6d146108d1578063e75ec699146108fe578063eab9041e1461096057600080fd5b8063c685775a146107ec578063ce5ec92e14610822578063dd2b117f14610842578063e0ab067e14610863578063e24862e814610883578063e30c3978146108b357600080fd5b80639e08e3ef1161012e5780639e08e3ef146107095780639fbd4f6614610723578063b242e53414610743578063bb18d47a14610763578063c2c4c5c114610783578063c3a6ca131461079857600080fd5b806372be52761461062e5780637e183ba0146106765780638456cb5914610696578063870e3733146106ab5780638aca6a23146106cb5780638da5cb5b146106eb57600080fd5b8063491640411161021957806357f4cf27116101d257806357f4cf271461055d5780635c975abb1461059f57806365c60468146105c3578063688f3f1f146105e3578063715018a6146105f95780637244d9601461060e57600080fd5b806349164041146104b65780634e71e0c8146104e95780634f1ef286146104fe5780634f2bfe5b146105115780634f6ffd071461053157806352d1902d1461054857600080fd5b80632d1746911161026b5780632d174691146103da57806330928dc5146103fc5780633659cfe6146104295780633cd784f1146104495780633f4ba83a14610481578063485cc9551461049657600080fd5b8063057c9cb4146102b3578063059f8b16146102f357806306aba0e11461030f57806310d1ba581461033357806326f4ed5114610375578063289f338f146103ad575b600080fd5b3480156102bf57600080fd5b506102e06102ce366004612e40565b603d6020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156102ff57600080fd5b506102e0670de0b6b3a764000081565b34801561031b57600080fd5b506003546000908152603d60205260409020546102e0565b34801561033f57600080fd5b506102e061034e366004612e70565b600f0b6000908152603e60209081526040808320603f835281842054845290915290205490565b34801561038157600080fd5b506102e0610390366004612ea0565b603660209081526000928352604080842090915290825290205481565b3480156103b957600080fd5b506102e06103c8366004612ed9565b60396020526000908152604090205481565b3480156103e657600080fd5b506103fa6103f5366004612ef6565b610a48565b005b34801561040857600080fd5b506102e0610417366004612e70565b603f6020526000908152604090205481565b34801561043557600080fd5b506103fa610444366004612ed9565b610a89565b34801561045557600080fd5b50600154610469906001600160a01b031681565b6040516001600160a01b0390911681526020016102ea565b34801561048d57600080fd5b506103fa610b68565b3480156104a257600080fd5b506103fa6104b1366004612ea0565b610b9c565b3480156104c257600080fd5b506104d66104d1366004612ed9565b610cfb565b604051600f9190910b81526020016102ea565b3480156104f557600080fd5b506103fa610d6f565b6103fa61050c366004612fae565b610dd1565b34801561051d57600080fd5b50600054610469906001600160a01b031681565b34801561053d57600080fd5b506102e0620d2f0081565b34801561055457600080fd5b506102e0610e9d565b34801561056957600080fd5b506102e0610578366004612e70565b600f0b6000908152603a60209081526040808320603c835281842054845290915290205490565b3480156105ab57600080fd5b506101095460ff1660405190151581526020016102ea565b3480156105cf57600080fd5b506102e06105de366004612ef6565b610f50565b3480156105ef57600080fd5b506102e060035481565b34801561060557600080fd5b506103fa610f65565b34801561061a57600080fd5b506103fa610629366004612ef6565b610f99565b34801561063a57600080fd5b506102e0610649366004612ed9565b6001600160a01b031660009081526037602090815260408083206039835281842054845290915290205490565b34801561068257600080fd5b506103fa610691366004612ed9565b611849565b3480156106a257600080fd5b506103fa611923565b3480156106b757600080fd5b506103fa6106c6366004613012565b611955565b3480156106d757600080fd5b506103fa6106e6366004612ed9565b611a17565b3480156106f757600080fd5b5060d7546001600160a01b0316610469565b34801561071557600080fd5b506002546104d690600f0b81565b34801561072f57600080fd5b506103fa61073e36600461306b565b611a29565b34801561074f57600080fd5b506103fa61075e3660046130a9565b611d73565b34801561076f57600080fd5b506102e061077e366004612ef6565b611e21565b34801561078f57600080fd5b506103fa611e40565b3480156107a457600080fd5b506107d76107b3366004612ef6565b60376020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016102ea565b3480156107f857600080fd5b50610469610807366004612e70565b6032602052600090815260409020546001600160a01b031681565b34801561082e57600080fd5b506103fa61083d366004612ed9565b611e48565b34801561084e57600080fd5b506002546104d690600160801b9004600f0b81565b34801561086f57600080fd5b506103fa61087e3660046130dc565b611f1a565b34801561088f57600080fd5b506104d661089e366004612ed9565b603360205260009081526040902054600f0b81565b3480156108bf57600080fd5b5060d8546001600160a01b0316610469565b3480156108dd57600080fd5b506108f16108ec366004612e70565b611f4e565b6040516102ea9190613150565b34801561090a57600080fd5b50610945610919366004612ea0565b603460209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016102ea565b34801561096c57600080fd5b506102e061097b3660046130dc565b603e60209081526000928352604080842090915290825290205481565b3480156109a457600080fd5b506102e06109b3366004612ed9565b60356020526000908152604090205481565b3480156109d157600080fd5b506102e062093a8081565b3480156109e857600080fd5b506107d76109f73660046130dc565b603a6020908152600092835260408084209091529082529020805460019091015482565b348015610a2757600080fd5b506102e0610a36366004612e70565b603c6020526000908152604090205481565b60d7546001600160a01b03163314610a7b5760405162461bcd60e51b8152600401610a7290613163565b60405180910390fd5b610a858282611fe8565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ad15760405162461bcd60e51b8152600401610a729061319a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b1a60008051602061357d833981519152546001600160a01b031690565b6001600160a01b031614610b405760405162461bcd60e51b8152600401610a72906131e6565b610b4981612183565b60408051600080825260208201909252610b65918391906121ad565b50565b60d7546001600160a01b03163314610b925760405162461bcd60e51b8152600401610a7290613163565b610b9a612318565b565b604054610100900460ff16610bb75760405460ff1615610bbb565b303b155b610c1e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a72565b604054610100900460ff16158015610c40576040805461ffff19166101011790555b6001600160a01b03831615801590610c6057506001600160a01b03821615155b610ca45760405162461bcd60e51b8152602060048201526015602482015274047433a20616464726573732063616e206e6f74203605c1b6044820152606401610a72565b600080546001600160a01b038086166001600160a01b0319928316179092556001805492851692909116919091179055610cdc6123ad565b610ce46123e1565b8015610cf6576040805461ff00191690555b505050565b6001600160a01b038116600090815260336020526040812054600f0b808203610d5d5760405162461bcd60e51b815260206004820152601460248201527347433a2077726f6e67206761756765207479706560601b6044820152606401610a72565b610d68600182613248565b9392505050565b60d8546001600160a01b03163314610dc95760405162461bcd60e51b815260206004820152601e60248201527f536166654f776e61626c653a2063616c6c657220213d2070656e64696e6700006044820152606401610a72565b610b9a612411565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e195760405162461bcd60e51b8152600401610a729061319a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e6260008051602061357d833981519152546001600160a01b031690565b6001600160a01b031614610e885760405162461bcd60e51b8152600401610a72906131e6565b610e9182612183565b610a85828260016121ad565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f3d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a72565b5060008051602061357d83398151915290565b6000610f5c838361247a565b90505b92915050565b60d7546001600160a01b03163314610f8f5760405162461bcd60e51b8152600401610a7290613163565b610b9a6000612554565b6101095460ff1615610fe05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a72565b60008054604051631e74dac160e31b81523360048201526001600160a01b039091169063f3a6d608906024016020604051808303816000875af115801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f9190613298565b600080546040516326f57e5760e11b815233600482015292935090916001600160a01b0390911690634deafcae906024016020604051808303816000875af115801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190613298565b9050600062093a80806110d681426132b1565b6110e091906132c9565b6110ea91906132eb565b905080821161112d5760405162461bcd60e51b815260206004820152600f60248201526e47433a206e6f2076616c696420766560881b6044820152606401610a72565b61271084111561117f5760405162461bcd60e51b815260206004820152601a60248201527f47433a206e6f20656e6f75676820766f74696e6720706f7765720000000000006044820152606401610a72565b3360009081526036602090815260408083206001600160a01b03891684529091529020546111b190620d2f00906132b1565b4210156112005760405162461bcd60e51b815260206004820152601860248201527f47433a2043616e6e6f7420766f746520736f206f6674656e00000000000000006044820152606401610a72565b60408051808201909152600080825260208201526001600160a01b03861660009081526033602052604081205461123c90600190600f0b613248565b9050600081600f0b12156112885760405162461bcd60e51b815260206004820152601360248201527211d0ce8811d85d59d9481b9bdd081859191959606a1b6044820152606401610a72565b3360009081526034602090815260408083206001600160a01b038b1684528252808320815160608101835281548152600182015493810193909352600201549082018190529091908510156112ea578482604001516112e7919061330a565b90505b81516112f79082906132eb565b84526040805160608101909152600090806127106113158c8c6132eb565b61131f91906132c9565b8152602081018b90526040018890529050600061133c878961330a565b825190915061134c9082906132eb565b602080880191909152848101518382015133600090815260359093526040909220549091611379916132b1565b611383919061330a565b33600090815260356020526040902081905561271010156113e65760405162461bcd60e51b815260206004820152601760248201527f47433a205573656420746f6f206d75636820706f7765720000000000000000006044820152606401610a72565b6114116040518060800160405280600081526020016000815260200160008152602001600081525090565b61141a8c6125a6565b81526001600160a01b038c1660009081526037602090815260408083208b84528252909120600101549082015261145086612725565b604080830191909152600f87900b6000908152603a60209081528282208b83528152919020600101546060830152875190880151825161149a91611493916132b1565b8951612873565b6114a4919061330a565b6001600160a01b038d1660009081526037602090815260408083208c845282529182902092909255885191890151908301516114e391611493916132b1565b6114ed919061330a565b600f87900b6000908152603a602090815260408083208c845290915290819020919091558501518810156115b05784518351602083015161153891611531916132b1565b8751612873565b611542919061330a565b6001600160a01b038d1660009081526037602090815260408083208c845290915290206001015584518351606083015161157f91611531916132b1565b611589919061330a565b600f87900b6000908152603a602090815260408083208c8452909152902060010155611626565b82516001600160a01b038d1660009081526037602090815260408083208c8452909152812060010180549091906115e89084906132b1565b90915550508251600f87900b6000908152603a602090815260408083208c8452909152812060010180549091906116209084906132b1565b90915550505b5042846040015111156116a95783516001600160a01b038c1660009081526038602090815260408083208189015184529091528120805490919061166b90849061330a565b90915550508351600f86900b6000908152603b60209081526040808320818901518452909152812080549091906116a390849061330a565b90915550505b81516001600160a01b038c166000908152603860209081526040808320818701518452909152812080549091906116e19084906132b1565b90915550508151600f86900b6000908152603b60209081526040808320818701518452909152812080549091906117199084906132b1565b90915550611727905061288a565b508160346000336001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050504260366000336001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020819055507f45ca9a4c8d0119eb329e580d28fe689e484e1be230da8037ade9547d2d25cc9142338d8d60405161183494939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a15050505050505050505050565b60d7546001600160a01b031633146118735760405162461bcd60e51b8152600401610a7290613163565b6001546001600160a01b039081169082166118c35760405162461bcd60e51b815260206004820152601060248201526f047433a2076652063616e206e6f7420360841b6044820152606401610a72565b600180546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527fb5004c6dd32173c6ee128faa447de600665c96ba213f764d94599ca5ceda78b191015b60405180910390a15050565b60d7546001600160a01b0316331461194d5760405162461bcd60e51b8152600401610a7290613163565b610b9a6129de565b60d7546001600160a01b0316331461197f5760405162461bcd60e51b8152600401610a7290613163565b600254600f0b600081815260316020526040902061199d84826133a3565b506119a9816001613463565b600280546001600160801b0319166001600160801b03929092169190911790558115610cf6576119d98183612a5b565b7f6fbe76157c712f16b5a3c44ed48baa04e3450bc3fab0c020e848aca72bbccc848382604051611a0a9291906134b2565b60405180910390a1505050565b611a20816125a6565b50610a8561288a565b60d7546001600160a01b0316331480611a4c57506001546001600160a01b031633145b611a985760405162461bcd60e51b815260206004820181905260248201527f47433a206f6e6c792061646d696e206f7220703132436f696e466163746f72796044820152606401610a72565b600082600f0b12158015611ab55750600254600f90810b9083900b125b611af75760405162461bcd60e51b815260206004820152601360248201527223a19d1033b0bab3b2aa3cb8329032b93937b960691b6044820152606401610a72565b6001600160a01b038316600090815260336020526040902054600f0b15611b605760405162461bcd60e51b815260206004820152601960248201527f47433a206475706c6963617465642067617567652074797065000000000000006044820152606401610a72565b600254600160801b9004600f0b611b78816001613463565b600280546001600160801b03928316600160801b029216919091179055600f81900b600090815260326020526040902080546001600160a01b0386166001600160a01b0319909116179055611bce836001613463565b6001600160a01b038516600090815260336020526040812080546001600160801b0319166001600160801b03939093169290921790915562093a8080611c1481426132b1565b611c1e91906132c9565b611c2891906132eb565b90508215611cdc576000611c3b85612b5f565b90506000611c4886612725565b90506000611c5461288a565b9050611c6082876132b1565b600f88900b6000818152603a60209081526040808320898452825280832094909455918152603c90915220849055611c9886846132eb565b611ca290826132b1565b6000858152603d602090815260408083209390935560038790556001600160a01b038b168252603781528282208783529052208690555050505b600f84900b6000908152603c60205260408120549003611d0d57600f84900b6000908152603c602052604090208190555b6001600160a01b0385166000818152603960209081526040918290208490558151928352600f87900b9083015281018490527ffd55b3191f9c9dd92f4f134dd700e7d76f6a0c836a08687023d6d38f03ebd8779060600160405180910390a15050505050565b60d7546001600160a01b03163314611d9d5760405162461bcd60e51b8152600401610a7290613163565b6001600160a01b038216611df35760405162461bcd60e51b815260206004820152601b60248201527f536166654f776e61626c653a206e6577206f776e6572206973203000000000006044820152606401610a72565b8015611e0257610a8582612554565b60d880546001600160a01b0319166001600160a01b0384161790555050565b6000611e2c836125a6565b50611e3561288a565b50610f5c838361247a565b610b6561288a565b60d7546001600160a01b03163314611e725760405162461bcd60e51b8152600401610a7290613163565b6000546001600160a01b03908116908216611ec25760405162461bcd60e51b815260206004820152601060248201526f047433a2076652063616e206e6f7420360841b6044820152606401610a72565b600080546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527fd828f779f83b901159162ddcecf828d6a7983bf62746349df2da26aff0ac140b9101611917565b60d7546001600160a01b03163314611f445760405162461bcd60e51b8152600401610a7290613163565b610a858282612a5b565b60316020526000908152604090208054611f6790613321565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9390613321565b8015611fe05780601f10611fb557610100808354040283529160200191611fe0565b820191906000526020600020905b815481529060010190602001808311611fc357829003601f168201915b505050505081565b6001600160a01b03821660009081526033602052604081205461201090600190600f0b613248565b9050600061201d846125a6565b9050600061202a83612b5f565b9050600061203784612725565b9050600061204361288a565b9050600062093a808061205681426132b1565b61206091906132c9565b61206a91906132eb565b6001600160a01b038916600081815260376020908152604080832085845282528083208c905592825260399052908120829055909150856120ab89866132b1565b6120b5919061330a565b600f88900b6000818152603a602090815260408083208784528252808320859055928252603c90522083905590506120ed85856132eb565b6120f786836132eb565b61210190856132b1565b61210b919061330a565b6000838152603d6020908152604091829020839055600385905581516001600160a01b038d16815242918101919091529081018a9052606081018290529093507f54c0cf3647e6cdb2fc0a7876e60ba77563fceedf2e06c01c597f8dccb9e6bd729060800160405180910390a1505050505050505050565b60d7546001600160a01b03163314610b655760405162461bcd60e51b8152600401610a7290613163565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121e057610cf683612c0c565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561223a575060408051601f3d908101601f1916820190925261223791810190613298565b60015b61229d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a72565b60008051602061357d833981519152811461230c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a72565b50610cf6838383612ca8565b6101095460ff166123625760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a72565b610109805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604054610100900460ff166123d45760405162461bcd60e51b8152600401610a72906134d7565b610109805460ff19169055565b604054610100900460ff166124085760405162461bcd60e51b8152600401610a72906134d7565b610b9a33612554565b60d75460d8546040516001600160a01b03928316929091169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35060d8805460d780546001600160a01b03199081166001600160a01b03841617909155169055565b60008062093a8061248b81856132c9565b61249591906132eb565b6000818152603d60205260409020549091508015612549576001600160a01b0385166000908152603360205260408120546124d590600190600f0b613248565b600f81900b6000908152603e602090815260408083208784528252808320546001600160a01b038b168452603783528184208885529092529091205491925090838161252984670de0b6b3a76400006132eb565b61253391906132eb565b61253d91906132c9565b95505050505050610f5f565b600092505050610f5f565b60d780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166000908152603960205260408120548015612716576001600160a01b038316600090815260376020908152604080832084845282528083208151808301909252805482526001015491810191909152905b6101f481101561270d5742831161270d5761261f62093a80846132b1565b9250600062093a80836020015161263691906132eb565b9050808360000151111561269a578083600001818151612656919061330a565b9052506001600160a01b0386166000908152603860209081526040808320878452825290912054908401805182919061269090839061330a565b9052506126a59050565b600080845260208401525b6001600160a01b038616600090815260376020908152604080832087845282529091208451815590840151600190910155428411156126fa576001600160a01b03861660009081526039602052604090208490555b508061270581613522565b915050612601565b50519392505050565b50600092915050565b50919050565b600f81900b6000908152603c6020526040812054801561271657600f83900b6000908152603a6020908152604080832084845282528083208151808301909252805482526001015491810191909152905b6101f481101561270d5742831161270d5761279462093a80846132b1565b9250600062093a8083602001516127ab91906132eb565b9050808360000151111561280a5780836000018181516127cb919061330a565b905250600f86900b6000908152603b60209081526040808320878452825290912054908401805182919061280090839061330a565b9052506128159050565b600080845260208401525b600f86900b6000908152603a60209081526040808320878452825290912084518155908401516001909101554284111561286057600f86900b6000908152603c602052604090208490555b508061286b81613522565b915050612776565b6000818310156128835781610f5c565b5090919050565b60035460025460009190600f0b428211156128af576128ac62093a808361330a565b91505b6000828152603d6020526040812054905b606481600f0b12156129005782600f0b81600f0b0315612900576128e381612725565b506128ed81612b5f565b50806128f88161353b565b9150506128c0565b5060005b6101f48110156129d6574284116129d65761292262093a80856132b1565b93506000915060005b606481600f0b12156129a457600254600f82810b91900b146129a457600f81900b6000818152603a60209081526040808320898452825280832054938352603e825280832089845290915290205461298381836132eb565b61298d90866132b1565b94505050808061299c9061353b565b91505061292b565b506000848152603d60205260409020829055428411156129c45760038490555b806129ce81613522565b915050612904565b509392505050565b6101095460ff1615612a255760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a72565b610109805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123903390565b6000612a6683612b5f565b90506000612a7384612725565b90506000612a7f61288a565b9050600062093a8080612a9281426132b1565b612a9c91906132c9565b612aa691906132eb565b9050612ab284846132eb565b612abc86856132eb565b612ac690846132b1565b612ad0919061330a565b6000828152603d60209081526040808320849055600f8a900b808452603e835281842086855283528184208a90556003869055808452603f83529281902085905580519283529082018490528101879052606081018290529092507e170bcdc909b6ac6e12d020fe8942256312cdcd555fb6d712899eba56d2f9019060800160405180910390a1505050505050565b600f81900b6000908152603f6020526040812054801561271657600f83900b6000908152603e60209081526040808320848452909152812054905b6101f48110156129d6574283116129d657612bb862093a80846132b1565b600f86900b6000908152603e602090815260408083208484529091529020839055925042831115612bfa57600f85900b6000908152603f602052604090208390555b80612c0481613522565b915050612b9a565b6001600160a01b0381163b612c795760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a72565b60008051602061357d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612cb183612cd3565b600082511180612cbe5750805b15610cf657612ccd8383612d13565b50505050565b612cdc81612c0c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612d7b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a72565b600080846001600160a01b031684604051612d969190613560565b600060405180830381855af49150503d8060008114612dd1576040519150601f19603f3d011682016040523d82523d6000602084013e612dd6565b606091505b5091509150612dfe828260405180606001604052806027815260200161359d60279139612e07565b95945050505050565b60608315612e16575081610d68565b825115612e265782518084602001fd5b8160405162461bcd60e51b8152600401610a729190613150565b600060208284031215612e5257600080fd5b5035919050565b8035600f81900b8114612e6b57600080fd5b919050565b600060208284031215612e8257600080fd5b610f5c82612e59565b6001600160a01b0381168114610b6557600080fd5b60008060408385031215612eb357600080fd5b8235612ebe81612e8b565b91506020830135612ece81612e8b565b809150509250929050565b600060208284031215612eeb57600080fd5b8135610d6881612e8b565b60008060408385031215612f0957600080fd5b8235612f1481612e8b565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612f5357612f53612f22565b604051601f8501601f19908116603f01168101908282118183101715612f7b57612f7b612f22565b81604052809350858152868686011115612f9457600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215612fc157600080fd5b8235612fcc81612e8b565b9150602083013567ffffffffffffffff811115612fe857600080fd5b8301601f81018513612ff957600080fd5b61300885823560208401612f38565b9150509250929050565b6000806040838503121561302557600080fd5b823567ffffffffffffffff81111561303c57600080fd5b8301601f8101851361304d57600080fd5b61305c85823560208401612f38565b95602094909401359450505050565b60008060006060848603121561308057600080fd5b833561308b81612e8b565b925061309960208501612e59565b9150604084013590509250925092565b600080604083850312156130bc57600080fd5b82356130c781612e8b565b915060208301358015158114612ece57600080fd5b600080604083850312156130ef57600080fd5b612f1483612e59565b60005b838110156131135781810151838201526020016130fb565b83811115612ccd5750506000910152565b6000815180845261313c8160208601602086016130f8565b601f01601f19169290920160200192915050565b602081526000610f5c6020830184613124565b6020808252601d908201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e6572000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600f0b83600f0b600081128160016001607f1b03190183128115161561327357613273613232565b8160016001607f1b0301831381161561328e5761328e613232565b5090039392505050565b6000602082840312156132aa57600080fd5b5051919050565b600082198211156132c4576132c4613232565b500190565b6000826132e657634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561330557613305613232565b500290565b60008282101561331c5761331c613232565b500390565b600181811c9082168061333557607f821691505b60208210810361271f57634e487b7160e01b600052602260045260246000fd5b601f821115610cf657600081815260208120601f850160051c8101602086101561337c5750805b601f850160051c820191505b8181101561339b57828155600101613388565b505050505050565b815167ffffffffffffffff8111156133bd576133bd612f22565b6133d1816133cb8454613321565b84613355565b602080601f83116001811461340657600084156133ee5750858301515b600019600386901b1c1916600185901b17855561339b565b600085815260208120601f198616915b8281101561343557888601518255948401946001909101908401613416565b50858210156134535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081600f0b83600f0b600082128260016001607f1b030382138115161561348d5761348d613232565b8260016001607f1b03190382128116156134a9576134a9613232565b50019392505050565b6040815260006134c56040830185613124565b905082600f0b60208301529392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006001820161353457613534613232565b5060010190565b600081600f0b60016001607f1b03810361355757613557613232565b60010192915050565b600082516135728184602087016130f8565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f40a363ea445421a91a52abb6b574ea86b214e3dc828157ad43806787c7b430164736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106102ae5760003560e01c806372be527611610175578063c685775a116100dc578063e4036c6d11610095578063ec73d9061161006f578063ec73d90614610998578063f4359ce5146109c5578063f763d1ff146109dc578063f89993f014610a1b57600080fd5b8063e4036c6d146108d1578063e75ec699146108fe578063eab9041e1461096057600080fd5b8063c685775a146107ec578063ce5ec92e14610822578063dd2b117f14610842578063e0ab067e14610863578063e24862e814610883578063e30c3978146108b357600080fd5b80639e08e3ef1161012e5780639e08e3ef146107095780639fbd4f6614610723578063b242e53414610743578063bb18d47a14610763578063c2c4c5c114610783578063c3a6ca131461079857600080fd5b806372be52761461062e5780637e183ba0146106765780638456cb5914610696578063870e3733146106ab5780638aca6a23146106cb5780638da5cb5b146106eb57600080fd5b8063491640411161021957806357f4cf27116101d257806357f4cf271461055d5780635c975abb1461059f57806365c60468146105c3578063688f3f1f146105e3578063715018a6146105f95780637244d9601461060e57600080fd5b806349164041146104b65780634e71e0c8146104e95780634f1ef286146104fe5780634f2bfe5b146105115780634f6ffd071461053157806352d1902d1461054857600080fd5b80632d1746911161026b5780632d174691146103da57806330928dc5146103fc5780633659cfe6146104295780633cd784f1146104495780633f4ba83a14610481578063485cc9551461049657600080fd5b8063057c9cb4146102b3578063059f8b16146102f357806306aba0e11461030f57806310d1ba581461033357806326f4ed5114610375578063289f338f146103ad575b600080fd5b3480156102bf57600080fd5b506102e06102ce366004612e40565b603d6020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156102ff57600080fd5b506102e0670de0b6b3a764000081565b34801561031b57600080fd5b506003546000908152603d60205260409020546102e0565b34801561033f57600080fd5b506102e061034e366004612e70565b600f0b6000908152603e60209081526040808320603f835281842054845290915290205490565b34801561038157600080fd5b506102e0610390366004612ea0565b603660209081526000928352604080842090915290825290205481565b3480156103b957600080fd5b506102e06103c8366004612ed9565b60396020526000908152604090205481565b3480156103e657600080fd5b506103fa6103f5366004612ef6565b610a48565b005b34801561040857600080fd5b506102e0610417366004612e70565b603f6020526000908152604090205481565b34801561043557600080fd5b506103fa610444366004612ed9565b610a89565b34801561045557600080fd5b50600154610469906001600160a01b031681565b6040516001600160a01b0390911681526020016102ea565b34801561048d57600080fd5b506103fa610b68565b3480156104a257600080fd5b506103fa6104b1366004612ea0565b610b9c565b3480156104c257600080fd5b506104d66104d1366004612ed9565b610cfb565b604051600f9190910b81526020016102ea565b3480156104f557600080fd5b506103fa610d6f565b6103fa61050c366004612fae565b610dd1565b34801561051d57600080fd5b50600054610469906001600160a01b031681565b34801561053d57600080fd5b506102e0620d2f0081565b34801561055457600080fd5b506102e0610e9d565b34801561056957600080fd5b506102e0610578366004612e70565b600f0b6000908152603a60209081526040808320603c835281842054845290915290205490565b3480156105ab57600080fd5b506101095460ff1660405190151581526020016102ea565b3480156105cf57600080fd5b506102e06105de366004612ef6565b610f50565b3480156105ef57600080fd5b506102e060035481565b34801561060557600080fd5b506103fa610f65565b34801561061a57600080fd5b506103fa610629366004612ef6565b610f99565b34801561063a57600080fd5b506102e0610649366004612ed9565b6001600160a01b031660009081526037602090815260408083206039835281842054845290915290205490565b34801561068257600080fd5b506103fa610691366004612ed9565b611849565b3480156106a257600080fd5b506103fa611923565b3480156106b757600080fd5b506103fa6106c6366004613012565b611955565b3480156106d757600080fd5b506103fa6106e6366004612ed9565b611a17565b3480156106f757600080fd5b5060d7546001600160a01b0316610469565b34801561071557600080fd5b506002546104d690600f0b81565b34801561072f57600080fd5b506103fa61073e36600461306b565b611a29565b34801561074f57600080fd5b506103fa61075e3660046130a9565b611d73565b34801561076f57600080fd5b506102e061077e366004612ef6565b611e21565b34801561078f57600080fd5b506103fa611e40565b3480156107a457600080fd5b506107d76107b3366004612ef6565b60376020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016102ea565b3480156107f857600080fd5b50610469610807366004612e70565b6032602052600090815260409020546001600160a01b031681565b34801561082e57600080fd5b506103fa61083d366004612ed9565b611e48565b34801561084e57600080fd5b506002546104d690600160801b9004600f0b81565b34801561086f57600080fd5b506103fa61087e3660046130dc565b611f1a565b34801561088f57600080fd5b506104d661089e366004612ed9565b603360205260009081526040902054600f0b81565b3480156108bf57600080fd5b5060d8546001600160a01b0316610469565b3480156108dd57600080fd5b506108f16108ec366004612e70565b611f4e565b6040516102ea9190613150565b34801561090a57600080fd5b50610945610919366004612ea0565b603460209081526000928352604080842090915290825290208054600182015460029092015490919083565b604080519384526020840192909252908201526060016102ea565b34801561096c57600080fd5b506102e061097b3660046130dc565b603e60209081526000928352604080842090915290825290205481565b3480156109a457600080fd5b506102e06109b3366004612ed9565b60356020526000908152604090205481565b3480156109d157600080fd5b506102e062093a8081565b3480156109e857600080fd5b506107d76109f73660046130dc565b603a6020908152600092835260408084209091529082529020805460019091015482565b348015610a2757600080fd5b506102e0610a36366004612e70565b603c6020526000908152604090205481565b60d7546001600160a01b03163314610a7b5760405162461bcd60e51b8152600401610a7290613163565b60405180910390fd5b610a858282611fe8565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ad15760405162461bcd60e51b8152600401610a729061319a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b1a60008051602061357d833981519152546001600160a01b031690565b6001600160a01b031614610b405760405162461bcd60e51b8152600401610a72906131e6565b610b4981612183565b60408051600080825260208201909252610b65918391906121ad565b50565b60d7546001600160a01b03163314610b925760405162461bcd60e51b8152600401610a7290613163565b610b9a612318565b565b604054610100900460ff16610bb75760405460ff1615610bbb565b303b155b610c1e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a72565b604054610100900460ff16158015610c40576040805461ffff19166101011790555b6001600160a01b03831615801590610c6057506001600160a01b03821615155b610ca45760405162461bcd60e51b8152602060048201526015602482015274047433a20616464726573732063616e206e6f74203605c1b6044820152606401610a72565b600080546001600160a01b038086166001600160a01b0319928316179092556001805492851692909116919091179055610cdc6123ad565b610ce46123e1565b8015610cf6576040805461ff00191690555b505050565b6001600160a01b038116600090815260336020526040812054600f0b808203610d5d5760405162461bcd60e51b815260206004820152601460248201527347433a2077726f6e67206761756765207479706560601b6044820152606401610a72565b610d68600182613248565b9392505050565b60d8546001600160a01b03163314610dc95760405162461bcd60e51b815260206004820152601e60248201527f536166654f776e61626c653a2063616c6c657220213d2070656e64696e6700006044820152606401610a72565b610b9a612411565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e195760405162461bcd60e51b8152600401610a729061319a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e6260008051602061357d833981519152546001600160a01b031690565b6001600160a01b031614610e885760405162461bcd60e51b8152600401610a72906131e6565b610e9182612183565b610a85828260016121ad565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f3d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a72565b5060008051602061357d83398151915290565b6000610f5c838361247a565b90505b92915050565b60d7546001600160a01b03163314610f8f5760405162461bcd60e51b8152600401610a7290613163565b610b9a6000612554565b6101095460ff1615610fe05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a72565b60008054604051631e74dac160e31b81523360048201526001600160a01b039091169063f3a6d608906024016020604051808303816000875af115801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f9190613298565b600080546040516326f57e5760e11b815233600482015292935090916001600160a01b0390911690634deafcae906024016020604051808303816000875af115801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190613298565b9050600062093a80806110d681426132b1565b6110e091906132c9565b6110ea91906132eb565b905080821161112d5760405162461bcd60e51b815260206004820152600f60248201526e47433a206e6f2076616c696420766560881b6044820152606401610a72565b61271084111561117f5760405162461bcd60e51b815260206004820152601a60248201527f47433a206e6f20656e6f75676820766f74696e6720706f7765720000000000006044820152606401610a72565b3360009081526036602090815260408083206001600160a01b03891684529091529020546111b190620d2f00906132b1565b4210156112005760405162461bcd60e51b815260206004820152601860248201527f47433a2043616e6e6f7420766f746520736f206f6674656e00000000000000006044820152606401610a72565b60408051808201909152600080825260208201526001600160a01b03861660009081526033602052604081205461123c90600190600f0b613248565b9050600081600f0b12156112885760405162461bcd60e51b815260206004820152601360248201527211d0ce8811d85d59d9481b9bdd081859191959606a1b6044820152606401610a72565b3360009081526034602090815260408083206001600160a01b038b1684528252808320815160608101835281548152600182015493810193909352600201549082018190529091908510156112ea578482604001516112e7919061330a565b90505b81516112f79082906132eb565b84526040805160608101909152600090806127106113158c8c6132eb565b61131f91906132c9565b8152602081018b90526040018890529050600061133c878961330a565b825190915061134c9082906132eb565b602080880191909152848101518382015133600090815260359093526040909220549091611379916132b1565b611383919061330a565b33600090815260356020526040902081905561271010156113e65760405162461bcd60e51b815260206004820152601760248201527f47433a205573656420746f6f206d75636820706f7765720000000000000000006044820152606401610a72565b6114116040518060800160405280600081526020016000815260200160008152602001600081525090565b61141a8c6125a6565b81526001600160a01b038c1660009081526037602090815260408083208b84528252909120600101549082015261145086612725565b604080830191909152600f87900b6000908152603a60209081528282208b83528152919020600101546060830152875190880151825161149a91611493916132b1565b8951612873565b6114a4919061330a565b6001600160a01b038d1660009081526037602090815260408083208c845282529182902092909255885191890151908301516114e391611493916132b1565b6114ed919061330a565b600f87900b6000908152603a602090815260408083208c845290915290819020919091558501518810156115b05784518351602083015161153891611531916132b1565b8751612873565b611542919061330a565b6001600160a01b038d1660009081526037602090815260408083208c845290915290206001015584518351606083015161157f91611531916132b1565b611589919061330a565b600f87900b6000908152603a602090815260408083208c8452909152902060010155611626565b82516001600160a01b038d1660009081526037602090815260408083208c8452909152812060010180549091906115e89084906132b1565b90915550508251600f87900b6000908152603a602090815260408083208c8452909152812060010180549091906116209084906132b1565b90915550505b5042846040015111156116a95783516001600160a01b038c1660009081526038602090815260408083208189015184529091528120805490919061166b90849061330a565b90915550508351600f86900b6000908152603b60209081526040808320818901518452909152812080549091906116a390849061330a565b90915550505b81516001600160a01b038c166000908152603860209081526040808320818701518452909152812080549091906116e19084906132b1565b90915550508151600f86900b6000908152603b60209081526040808320818701518452909152812080549091906117199084906132b1565b90915550611727905061288a565b508160346000336001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050504260366000336001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b03168152602001908152602001600020819055507f45ca9a4c8d0119eb329e580d28fe689e484e1be230da8037ade9547d2d25cc9142338d8d60405161183494939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a15050505050505050505050565b60d7546001600160a01b031633146118735760405162461bcd60e51b8152600401610a7290613163565b6001546001600160a01b039081169082166118c35760405162461bcd60e51b815260206004820152601060248201526f047433a2076652063616e206e6f7420360841b6044820152606401610a72565b600180546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527fb5004c6dd32173c6ee128faa447de600665c96ba213f764d94599ca5ceda78b191015b60405180910390a15050565b60d7546001600160a01b0316331461194d5760405162461bcd60e51b8152600401610a7290613163565b610b9a6129de565b60d7546001600160a01b0316331461197f5760405162461bcd60e51b8152600401610a7290613163565b600254600f0b600081815260316020526040902061199d84826133a3565b506119a9816001613463565b600280546001600160801b0319166001600160801b03929092169190911790558115610cf6576119d98183612a5b565b7f6fbe76157c712f16b5a3c44ed48baa04e3450bc3fab0c020e848aca72bbccc848382604051611a0a9291906134b2565b60405180910390a1505050565b611a20816125a6565b50610a8561288a565b60d7546001600160a01b0316331480611a4c57506001546001600160a01b031633145b611a985760405162461bcd60e51b815260206004820181905260248201527f47433a206f6e6c792061646d696e206f7220703132436f696e466163746f72796044820152606401610a72565b600082600f0b12158015611ab55750600254600f90810b9083900b125b611af75760405162461bcd60e51b815260206004820152601360248201527223a19d1033b0bab3b2aa3cb8329032b93937b960691b6044820152606401610a72565b6001600160a01b038316600090815260336020526040902054600f0b15611b605760405162461bcd60e51b815260206004820152601960248201527f47433a206475706c6963617465642067617567652074797065000000000000006044820152606401610a72565b600254600160801b9004600f0b611b78816001613463565b600280546001600160801b03928316600160801b029216919091179055600f81900b600090815260326020526040902080546001600160a01b0386166001600160a01b0319909116179055611bce836001613463565b6001600160a01b038516600090815260336020526040812080546001600160801b0319166001600160801b03939093169290921790915562093a8080611c1481426132b1565b611c1e91906132c9565b611c2891906132eb565b90508215611cdc576000611c3b85612b5f565b90506000611c4886612725565b90506000611c5461288a565b9050611c6082876132b1565b600f88900b6000818152603a60209081526040808320898452825280832094909455918152603c90915220849055611c9886846132eb565b611ca290826132b1565b6000858152603d602090815260408083209390935560038790556001600160a01b038b168252603781528282208783529052208690555050505b600f84900b6000908152603c60205260408120549003611d0d57600f84900b6000908152603c602052604090208190555b6001600160a01b0385166000818152603960209081526040918290208490558151928352600f87900b9083015281018490527ffd55b3191f9c9dd92f4f134dd700e7d76f6a0c836a08687023d6d38f03ebd8779060600160405180910390a15050505050565b60d7546001600160a01b03163314611d9d5760405162461bcd60e51b8152600401610a7290613163565b6001600160a01b038216611df35760405162461bcd60e51b815260206004820152601b60248201527f536166654f776e61626c653a206e6577206f776e6572206973203000000000006044820152606401610a72565b8015611e0257610a8582612554565b60d880546001600160a01b0319166001600160a01b0384161790555050565b6000611e2c836125a6565b50611e3561288a565b50610f5c838361247a565b610b6561288a565b60d7546001600160a01b03163314611e725760405162461bcd60e51b8152600401610a7290613163565b6000546001600160a01b03908116908216611ec25760405162461bcd60e51b815260206004820152601060248201526f047433a2076652063616e206e6f7420360841b6044820152606401610a72565b600080546001600160a01b0319166001600160a01b0384811691821790925560408051928416835260208301919091527fd828f779f83b901159162ddcecf828d6a7983bf62746349df2da26aff0ac140b9101611917565b60d7546001600160a01b03163314611f445760405162461bcd60e51b8152600401610a7290613163565b610a858282612a5b565b60316020526000908152604090208054611f6790613321565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9390613321565b8015611fe05780601f10611fb557610100808354040283529160200191611fe0565b820191906000526020600020905b815481529060010190602001808311611fc357829003601f168201915b505050505081565b6001600160a01b03821660009081526033602052604081205461201090600190600f0b613248565b9050600061201d846125a6565b9050600061202a83612b5f565b9050600061203784612725565b9050600061204361288a565b9050600062093a808061205681426132b1565b61206091906132c9565b61206a91906132eb565b6001600160a01b038916600081815260376020908152604080832085845282528083208c905592825260399052908120829055909150856120ab89866132b1565b6120b5919061330a565b600f88900b6000818152603a602090815260408083208784528252808320859055928252603c90522083905590506120ed85856132eb565b6120f786836132eb565b61210190856132b1565b61210b919061330a565b6000838152603d6020908152604091829020839055600385905581516001600160a01b038d16815242918101919091529081018a9052606081018290529093507f54c0cf3647e6cdb2fc0a7876e60ba77563fceedf2e06c01c597f8dccb9e6bd729060800160405180910390a1505050505050505050565b60d7546001600160a01b03163314610b655760405162461bcd60e51b8152600401610a7290613163565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121e057610cf683612c0c565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561223a575060408051601f3d908101601f1916820190925261223791810190613298565b60015b61229d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a72565b60008051602061357d833981519152811461230c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a72565b50610cf6838383612ca8565b6101095460ff166123625760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a72565b610109805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604054610100900460ff166123d45760405162461bcd60e51b8152600401610a72906134d7565b610109805460ff19169055565b604054610100900460ff166124085760405162461bcd60e51b8152600401610a72906134d7565b610b9a33612554565b60d75460d8546040516001600160a01b03928316929091169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35060d8805460d780546001600160a01b03199081166001600160a01b03841617909155169055565b60008062093a8061248b81856132c9565b61249591906132eb565b6000818152603d60205260409020549091508015612549576001600160a01b0385166000908152603360205260408120546124d590600190600f0b613248565b600f81900b6000908152603e602090815260408083208784528252808320546001600160a01b038b168452603783528184208885529092529091205491925090838161252984670de0b6b3a76400006132eb565b61253391906132eb565b61253d91906132c9565b95505050505050610f5f565b600092505050610f5f565b60d780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166000908152603960205260408120548015612716576001600160a01b038316600090815260376020908152604080832084845282528083208151808301909252805482526001015491810191909152905b6101f481101561270d5742831161270d5761261f62093a80846132b1565b9250600062093a80836020015161263691906132eb565b9050808360000151111561269a578083600001818151612656919061330a565b9052506001600160a01b0386166000908152603860209081526040808320878452825290912054908401805182919061269090839061330a565b9052506126a59050565b600080845260208401525b6001600160a01b038616600090815260376020908152604080832087845282529091208451815590840151600190910155428411156126fa576001600160a01b03861660009081526039602052604090208490555b508061270581613522565b915050612601565b50519392505050565b50600092915050565b50919050565b600f81900b6000908152603c6020526040812054801561271657600f83900b6000908152603a6020908152604080832084845282528083208151808301909252805482526001015491810191909152905b6101f481101561270d5742831161270d5761279462093a80846132b1565b9250600062093a8083602001516127ab91906132eb565b9050808360000151111561280a5780836000018181516127cb919061330a565b905250600f86900b6000908152603b60209081526040808320878452825290912054908401805182919061280090839061330a565b9052506128159050565b600080845260208401525b600f86900b6000908152603a60209081526040808320878452825290912084518155908401516001909101554284111561286057600f86900b6000908152603c602052604090208490555b508061286b81613522565b915050612776565b6000818310156128835781610f5c565b5090919050565b60035460025460009190600f0b428211156128af576128ac62093a808361330a565b91505b6000828152603d6020526040812054905b606481600f0b12156129005782600f0b81600f0b0315612900576128e381612725565b506128ed81612b5f565b50806128f88161353b565b9150506128c0565b5060005b6101f48110156129d6574284116129d65761292262093a80856132b1565b93506000915060005b606481600f0b12156129a457600254600f82810b91900b146129a457600f81900b6000818152603a60209081526040808320898452825280832054938352603e825280832089845290915290205461298381836132eb565b61298d90866132b1565b94505050808061299c9061353b565b91505061292b565b506000848152603d60205260409020829055428411156129c45760038490555b806129ce81613522565b915050612904565b509392505050565b6101095460ff1615612a255760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a72565b610109805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123903390565b6000612a6683612b5f565b90506000612a7384612725565b90506000612a7f61288a565b9050600062093a8080612a9281426132b1565b612a9c91906132c9565b612aa691906132eb565b9050612ab284846132eb565b612abc86856132eb565b612ac690846132b1565b612ad0919061330a565b6000828152603d60209081526040808320849055600f8a900b808452603e835281842086855283528184208a90556003869055808452603f83529281902085905580519283529082018490528101879052606081018290529092507e170bcdc909b6ac6e12d020fe8942256312cdcd555fb6d712899eba56d2f9019060800160405180910390a1505050505050565b600f81900b6000908152603f6020526040812054801561271657600f83900b6000908152603e60209081526040808320848452909152812054905b6101f48110156129d6574283116129d657612bb862093a80846132b1565b600f86900b6000908152603e602090815260408083208484529091529020839055925042831115612bfa57600f85900b6000908152603f602052604090208390555b80612c0481613522565b915050612b9a565b6001600160a01b0381163b612c795760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a72565b60008051602061357d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612cb183612cd3565b600082511180612cbe5750805b15610cf657612ccd8383612d13565b50505050565b612cdc81612c0c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612d7b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a72565b600080846001600160a01b031684604051612d969190613560565b600060405180830381855af49150503d8060008114612dd1576040519150601f19603f3d011682016040523d82523d6000602084013e612dd6565b606091505b5091509150612dfe828260405180606001604052806027815260200161359d60279139612e07565b95945050505050565b60608315612e16575081610d68565b825115612e265782518084602001fd5b8160405162461bcd60e51b8152600401610a729190613150565b600060208284031215612e5257600080fd5b5035919050565b8035600f81900b8114612e6b57600080fd5b919050565b600060208284031215612e8257600080fd5b610f5c82612e59565b6001600160a01b0381168114610b6557600080fd5b60008060408385031215612eb357600080fd5b8235612ebe81612e8b565b91506020830135612ece81612e8b565b809150509250929050565b600060208284031215612eeb57600080fd5b8135610d6881612e8b565b60008060408385031215612f0957600080fd5b8235612f1481612e8b565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612f5357612f53612f22565b604051601f8501601f19908116603f01168101908282118183101715612f7b57612f7b612f22565b81604052809350858152868686011115612f9457600080fd5b858560208301376000602087830101525050509392505050565b60008060408385031215612fc157600080fd5b8235612fcc81612e8b565b9150602083013567ffffffffffffffff811115612fe857600080fd5b8301601f81018513612ff957600080fd5b61300885823560208401612f38565b9150509250929050565b6000806040838503121561302557600080fd5b823567ffffffffffffffff81111561303c57600080fd5b8301601f8101851361304d57600080fd5b61305c85823560208401612f38565b95602094909401359450505050565b60008060006060848603121561308057600080fd5b833561308b81612e8b565b925061309960208501612e59565b9150604084013590509250925092565b600080604083850312156130bc57600080fd5b82356130c781612e8b565b915060208301358015158114612ece57600080fd5b600080604083850312156130ef57600080fd5b612f1483612e59565b60005b838110156131135781810151838201526020016130fb565b83811115612ccd5750506000910152565b6000815180845261313c8160208601602086016130f8565b601f01601f19169290920160200192915050565b602081526000610f5c6020830184613124565b6020808252601d908201527f536166654f776e61626c653a2063616c6c6572206e6f74206f776e6572000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600f0b83600f0b600081128160016001607f1b03190183128115161561327357613273613232565b8160016001607f1b0301831381161561328e5761328e613232565b5090039392505050565b6000602082840312156132aa57600080fd5b5051919050565b600082198211156132c4576132c4613232565b500190565b6000826132e657634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561330557613305613232565b500290565b60008282101561331c5761331c613232565b500390565b600181811c9082168061333557607f821691505b60208210810361271f57634e487b7160e01b600052602260045260246000fd5b601f821115610cf657600081815260208120601f850160051c8101602086101561337c5750805b601f850160051c820191505b8181101561339b57828155600101613388565b505050505050565b815167ffffffffffffffff8111156133bd576133bd612f22565b6133d1816133cb8454613321565b84613355565b602080601f83116001811461340657600084156133ee5750858301515b600019600386901b1c1916600185901b17855561339b565b600085815260208120601f198616915b8281101561343557888601518255948401946001909101908401613416565b50858210156134535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081600f0b83600f0b600082128260016001607f1b030382138115161561348d5761348d613232565b8260016001607f1b03190382128116156134a9576134a9613232565b50019392505050565b6040815260006134c56040830185613124565b905082600f0b60208301529392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006001820161353457613534613232565b5060010190565b600081600f0b60016001607f1b03810361355757613557613232565b60010192915050565b600082516135728184602087016130f8565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f40a363ea445421a91a52abb6b574ea86b214e3dc828157ad43806787c7b430164736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addGauge(address,int128,uint256)": {
        "params": {
          "addr": "Gauge address",
          "gaugeType": "Gauge type",
          "weight": "Gauge weight"
        }
      },
      "addType(string,uint256)": {
        "params": {
          "name": "Name of gauge type",
          "weight": "Weight of gauge type"
        }
      },
      "changeGaugeWeight(address,uint256)": {
        "params": {
          "addr": "`GaugeController` contract address",
          "weight": "New Gauge weight"
        }
      },
      "changeTypeWeight(int128,uint256)": {
        "params": {
          "typeId": "Gauge type id",
          "weight": "New Gauge weight"
        }
      },
      "checkpointGauge(address)": {
        "params": {
          "addr": "Gauge address"
        }
      },
      "claimOwnership()": {
        "details": "pending owner call this function to claim ownership"
      },
      "gaugeRelativeWeight(address,uint256)": {
        "params": {
          "addr": "Gauge address",
          "time": "Relative weight at the specified timestamp in the past or present"
        },
        "returns": {
          "_0": "Value of relative weight normalized to 1e18"
        }
      },
      "gaugeRelativeWeightWrite(address,uint256)": {
        "details": "Any address can call, however nothing is recorded if the values are filled already",
        "params": {
          "addr": "Gauge address",
          "time": "Relative weight at the specified timestamp in the past or present"
        },
        "returns": {
          "_0": "Value of relative weight normalized to 1e18"
        }
      },
      "getGaugeTypes(address)": {
        "params": {
          "addr": "Gauge address"
        },
        "returns": {
          "_0": "Gauge type id"
        }
      },
      "getGaugeWeight(address)": {
        "params": {
          "addr": "Gauge address"
        },
        "returns": {
          "_0": "Gauge weight"
        }
      },
      "getTotalWeight()": {
        "returns": {
          "_0": "Total weight"
        }
      },
      "getTypeWeight(int128)": {
        "params": {
          "typeId": "Type id"
        },
        "returns": {
          "_0": "Type weight"
        }
      },
      "getWeightsSumPerType(int128)": {
        "params": {
          "typeId": "Type id"
        },
        "returns": {
          "_0": "Sum of gauge weights"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Return the address of the pending owner"
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setP12CoinFactory(address)": {
        "params": {
          "newP12Factory": "address of newP12Factory"
        }
      },
      "setVotingEscrow(address)": {
        "params": {
          "newVotingEscrow": "address of votingEscrow"
        }
      },
      "transferOwnership(address,bool)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner. Note If direct is false, it will set an pending owner and the OwnerShipTransferring only happens when the pending owner claim the ownership"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "voteForGaugeWeights(address,uint256)": {
        "params": {
          "gaugeAddr": "Gauge which `msg.sender` votes for",
          "userWeight": "Weight for a gauge in bps (units of 0.01%). Minimal is 0.01%. Ignored if 0"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGauge(address,int128,uint256)": {
        "notice": "Add gauge `addr` of type `gaugeType` with weight `weight`"
      },
      "addType(string,uint256)": {
        "notice": "Add gauge type with name `name` and weight `weight`"
      },
      "changeGaugeWeight(address,uint256)": {
        "notice": "Change weight of gauge `addr` to `weight`"
      },
      "changeTypeWeight(int128,uint256)": {
        "notice": "Change gauge type `typeId` weight to `weight`"
      },
      "checkpoint()": {
        "notice": "Checkpoint to fill data common for all gauges"
      },
      "checkpointGauge(address)": {
        "notice": "Checkpoint to fill data for both a specific gauge and common for all gauges"
      },
      "gaugeRelativeWeight(address,uint256)": {
        "notice": "Get Gauge relative weight (not more than 1.0) normalized to 1e18 (e.g. 1.0 == 1e18). Inflation which will be received by it is inflation_rate * relative_weight / 1e18"
      },
      "gaugeRelativeWeightWrite(address,uint256)": {
        "notice": "Get gauge weight normalized to 1e18 and also fill all the unfilled values for type and gauge records"
      },
      "getGaugeTypes(address)": {
        "notice": "Get gauge type for address"
      },
      "getGaugeWeight(address)": {
        "notice": "Get current gauge weight"
      },
      "getTotalWeight()": {
        "notice": "Get current total (type-weighted) weight"
      },
      "getTypeWeight(int128)": {
        "notice": "Get current type weight"
      },
      "getWeightsSumPerType(int128)": {
        "notice": "Get sum of gauge weights per type"
      },
      "setP12CoinFactory(address)": {
        "notice": "set new p12CoinFactory"
      },
      "setVotingEscrow(address)": {
        "notice": "set new votingEscrow"
      },
      "voteForGaugeWeights(address,uint256)": {
        "notice": "Allocate voting power for changing pool weights"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11905,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "votingEscrow",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IVotingEscrow)18464"
      },
      {
        "astId": 11907,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "p12CoinFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11909,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "nGaugeTypes",
        "offset": 0,
        "slot": "2",
        "type": "t_int128"
      },
      {
        "astId": 11911,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "nGauges",
        "offset": 16,
        "slot": "2",
        "type": "t_int128"
      },
      {
        "astId": 11913,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "timeTotal",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 11917,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 11921,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "gaugeTypeNames",
        "offset": 0,
        "slot": "49",
        "type": "t_mapping(t_int128,t_string_storage)"
      },
      {
        "astId": 11925,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "gauges",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_int128,t_address)"
      },
      {
        "astId": 11929,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "gaugeTypes",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_int128)"
      },
      {
        "astId": 11936,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "voteUserSlopes",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(VotedSlope)12006_storage))"
      },
      {
        "astId": 11940,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "voteUserPower",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11946,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "lastUserVote",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11953,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "pointsWeight",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Point)11999_storage))"
      },
      {
        "astId": 11959,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "changesWeight",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 11963,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "timeWeight",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11970,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "pointsSum",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_int128,t_mapping(t_uint256,t_struct(Point)11999_storage))"
      },
      {
        "astId": 11976,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "changesSum",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_int128,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 11980,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "timeSum",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_int128,t_uint256)"
      },
      {
        "astId": 11984,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "pointsTotal",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11990,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "pointsTypeWeight",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_int128,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 11994,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "timeTypeWeight",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_int128,t_uint256)"
      },
      {
        "astId": 395,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "64",
        "type": "t_bool"
      },
      {
        "astId": 398,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "64",
        "type": "t_bool"
      },
      {
        "astId": 377,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "65",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 597,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "115",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1354,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "165",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7440,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "215",
        "type": "t_address"
      },
      {
        "astId": 7442,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "216",
        "type": "t_address"
      },
      {
        "astId": 7625,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "217",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 619,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "_paused",
        "offset": 0,
        "slot": "265",
        "type": "t_bool"
      },
      {
        "astId": 708,
        "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "266",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IVotingEscrow)18464": {
        "encoding": "inplace",
        "label": "contract IVotingEscrow",
        "numberOfBytes": "20"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_int128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(VotedSlope)12006_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ControllerStorage.VotedSlope))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(VotedSlope)12006_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Point)11999_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct ControllerStorage.Point))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Point)11999_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(VotedSlope)12006_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ControllerStorage.VotedSlope)",
        "numberOfBytes": "32",
        "value": "t_struct(VotedSlope)12006_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_int128,t_address)": {
        "encoding": "mapping",
        "key": "t_int128",
        "label": "mapping(int128 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_int128,t_mapping(t_uint256,t_struct(Point)11999_storage))": {
        "encoding": "mapping",
        "key": "t_int128",
        "label": "mapping(int128 => mapping(uint256 => struct ControllerStorage.Point))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Point)11999_storage)"
      },
      "t_mapping(t_int128,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_int128",
        "label": "mapping(int128 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_int128,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_int128",
        "label": "mapping(int128 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_int128,t_uint256)": {
        "encoding": "mapping",
        "key": "t_int128",
        "label": "mapping(int128 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Point)11999_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ControllerStorage.Point)",
        "numberOfBytes": "32",
        "value": "t_struct(Point)11999_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Point)11999_storage": {
        "encoding": "inplace",
        "label": "struct ControllerStorage.Point",
        "members": [
          {
            "astId": 11996,
            "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11998,
            "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
            "label": "slope",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VotedSlope)12006_storage": {
        "encoding": "inplace",
        "label": "struct ControllerStorage.VotedSlope",
        "members": [
          {
            "astId": 12001,
            "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
            "label": "slope",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12003,
            "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
            "label": "power",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12005,
            "contract": "contracts/staking/GaugeControllerUpgradeable.sol:GaugeControllerUpgradeable",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}