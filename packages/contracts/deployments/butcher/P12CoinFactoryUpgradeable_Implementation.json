{
  "address": "0x496007980d08bf88A12C93Abd14e3cCCbb937284",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "mintId",
          "type": "bytes32"
        }
      ],
      "name": "ExecutedMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "coin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "MisMatchCoinWithGameId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "mintId",
          "type": "bytes32"
        }
      ],
      "name": "NonExistenceMintId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "NotGameDeveloper",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotP12Signer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "mintId",
          "type": "bytes32"
        }
      ],
      "name": "NotTimeToMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "developer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGameCoin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountP12",
          "type": "uint256"
        }
      ],
      "name": "CreateGameCoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "mintId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "ExecuteMintCoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "mintId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountP12",
          "type": "uint256"
        }
      ],
      "name": "QueueMintCoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "developer",
          "type": "address"
        }
      ],
      "name": "RegisterGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDelayB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDelayB",
          "type": "uint256"
        }
      ],
      "name": "SetDelayB",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDelayK",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDelayK",
          "type": "uint256"
        }
      ],
      "name": "SetDelayK",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDev",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDev",
          "type": "address"
        }
      ],
      "name": "SetDev",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "SignerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGameCoin",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "coinGameIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "coinMintRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountGameCoin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountP12",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "mintId",
          "type": "bytes32"
        }
      ],
      "name": "executeMintCoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameCoinImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameDev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGameDev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGameNextCoinAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountGameCoin",
          "type": "uint256"
        }
      ],
      "name": "getMintDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountGameCoin",
          "type": "uint256"
        }
      ],
      "name": "getMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountP12",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "p12_",
          "type": "address"
        },
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "uniswapPosManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gameCoinImpl_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "p12",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "preMintIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountGameCoin",
          "type": "uint256"
        }
      ],
      "name": "queueMintCoin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "developer",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDelayB",
          "type": "uint256"
        }
      ],
      "name": "setDelayB",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDelayK",
          "type": "uint256"
        }
      ],
      "name": "setDelayK",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapPosManager",
      "outputs": [
        {
          "internalType": "contract INonfungiblePositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "toAdd",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "toRemove",
          "type": "address[]"
        }
      ],
      "name": "updateSigners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gameCoinAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountGameCoin",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x983a3ac19ccc8875a6ee67c164e5a1bfd1cdb35209ea75d4d1e34911b73b51a3",
  "receipt": {
    "to": null,
    "from": "0xe6CAB02B0CF13F9638083Fa2C144A3E463a7b16f",
    "contractAddress": "0x496007980d08bf88A12C93Abd14e3cCCbb937284",
    "transactionIndex": 0,
    "gasUsed": "2627298",
    "logsBloom": "0x
    "blockHash": "0x496f5856d9f667270b4f3c2886dbbc3109cdec98e427d47dffa0fb6c8f31c752",
    "transactionHash": "0x983a3ac19ccc8875a6ee67c164e5a1bfd1cdb35209ea75d4d1e34911b73b51a3",
    "logs": [],
    "blockNumber": 60,
    "cumulativeGasUsed": "2627298",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "3c9d77b9eaf6db5bc7b05bd2beed366a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mintId\",\"type\":\"bytes32\"}],\"name\":\"ExecutedMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"MisMatchCoinWithGameId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mintId\",\"type\":\"bytes32\"}],\"name\":\"NonExistenceMintId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"NotGameDeveloper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotP12Signer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mintId\",\"type\":\"bytes32\"}],\"name\":\"NotTimeToMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGameCoin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountP12\",\"type\":\"uint256\"}],\"name\":\"CreateGameCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"mintId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecuteMintCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"mintId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountP12\",\"type\":\"uint256\"}],\"name\":\"QueueMintCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"}],\"name\":\"RegisterGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelayB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelayB\",\"type\":\"uint256\"}],\"name\":\"SetDelayB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDelayK\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDelayK\",\"type\":\"uint256\"}],\"name\":\"SetDelayK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDev\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"SignerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGameCoin\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinGameIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"coinMintRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountGameCoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountP12\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"mintId\",\"type\":\"bytes32\"}],\"name\":\"executeMintCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCoinImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameDev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameDev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameNextCoinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGameCoin\",\"type\":\"uint256\"}],\"name\":\"getMintDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGameCoin\",\"type\":\"uint256\"}],\"name\":\"getMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountP12\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p12_\",\"type\":\"address\"},{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"uniswapPosManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gameCoinImpl_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p12\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preMintIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGameCoin\",\"type\":\"uint256\"}],\"name\":\"queueMintCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelayB\",\"type\":\"uint256\"}],\"name\":\"setDelayB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelayK\",\"type\":\"uint256\"}],\"name\":\"setDelayK\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPosManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toRemove\",\"type\":\"address[]\"}],\"name\":\"updateSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gameCoinAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGameCoin\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"create(string,string,string,uint256,uint256,uint256)\":{\"details\":\"developer first create their game coin\",\"params\":{\"amountGameCoin\":\"how many coin first mint\",\"gameId\":\"the game's id\",\"name\":\"new game coin's name\",\"symbol\":\"game coin's symbol\"},\"returns\":{\"gameCoinAddress\":\"the address of the new game coin\"}},\"executeMintCoin(address,bytes32)\":{\"details\":\"when time is up, anyone can call this function to make the mint executed\",\"params\":{\"gameCoinAddress\":\"address of the game coin\",\"mintId\":\"a unique id to identify a mint, developer can get it after declare\"},\"returns\":{\"_0\":\"bool whether the operation success\"}},\"getGameNextCoinAddress(uint256)\":{\"details\":\"get a specific game next coin's deterministic address\",\"params\":{\"gameId\":\"off chain game Id\"}},\"getMintDelay(address,uint256)\":{\"details\":\"linear function to calculate the delay timedelayB is the minimum delay period, even someone mint zero token,there still be delayB period before someone can really mint zero tokendelayK is the parameter to take the ratio of new amount in to accountFor example, the initial supply of Game Coin is 100k. If developer wantto mint 100k, developer needs to real mint it after `delayK + delayB`. Ifdeveloper want to mint 200k, developer has to real mint it after `2DelayK +delayB`. ^ t +            / |          / |        / 2k+b|      / |    / k+b|  /  |/  b| 0----p---2p---------> amount\"},\"getMintFee(address,uint256)\":{\"details\":\"calculate the MintFee in P12\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"queueMintCoin(uint256,address,uint256)\":{\"details\":\"if developer want to mint after create coin, developer must declare first\",\"params\":{\"amountGameCoin\":\"how many developer want to mint\",\"gameCoinAddress\":\"game coin's address\",\"gameId\":\"game's id\",\"success\":\"whether the operation success\"}},\"register(uint256,address)\":{\"details\":\"create binding between game and developer, only called by p12 backend\",\"params\":{\"developer\":\"developer address, who own this game\",\"gameId\":\"game id\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDelayB(uint256)\":{\"details\":\"set linear function's B parameter\",\"params\":{\"newDelayB\":\"new B parameter\"}},\"setDelayK(uint256)\":{\"details\":\"set linear function's K parameter\",\"params\":{\"newDelayK\":\"new K parameter\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"updateSigners(address[],address[])\":{\"details\":\"update signers\",\"params\":{\"toAdd\":\"list of to be added signer\",\"toRemove\":\"list of to be removed signer\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(address,address,uint256)\":{\"params\":{\"amountGameCoin\":\"how many user want to withdraw\",\"gameCoinAddress\":\"gameCoin's address\",\"userAddress\":\"user's address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"gameCoinImpl()\":{\"notice\":\"game coin implmentation address\"},\"withdraw(address,address,uint256)\":{\"notice\":\"called when user want to withdraw his game coin from custodian address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/coinFactory/P12CoinFactoryUpgradeable.sol\":\"P12CoinFactoryUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363930313930353231363032\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x3d98edeb5d5be8410fca707b73dabe7544d1dd11e35b73dd907c473fe43cc3ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x4dae161227d332808312ee2caf6384929321b83c16cc89b5642985fbec6b814c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"src/coinFactory/P12CoinFactoryStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport { IUniswapV3Factory } from '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\nimport { INonfungiblePositionManager } from 'src/interfaces/external/uniswap/INonfungiblePositionManager.sol';\\nimport { IP12CoinFactoryDef } from 'src/coinFactory/interfaces/IP12CoinFactoryUpgradeable.sol';\\n\\ncontract P12CoinFactoryStorage {\\n  /**\\n   * @dev p12 ERC20 address\\n   */\\n  address public p12;\\n  /**\\n   * @dev uniswap position manager address\\n   */\\n  INonfungiblePositionManager public uniswapPosManager;\\n\\n  /**\\n   * @notice game coin implmentation address\\n   */\\n  address public gameCoinImpl;\\n  /**\\n   * @dev length of cast delay time is a linear function of percentage of additional issues,\\n   * @dev delayK and delayB is the linear function's parameter which could be changed later\\n   */\\n  uint256 public delayK;\\n  uint256 public delayB;\\n\\n  mapping(address => bool) public signers;\\n\\n  // gameId => developer address\\n  mapping(uint256 => address) public gameDev;\\n  // gameCoinAddress => gameId\\n  mapping(address => uint256) public coinGameIds;\\n  // gameCoinAddress => declareMintId => MintCoinInfo\\n  mapping(address => mapping(bytes32 => IP12CoinFactoryDef.MintCoinInfo)) public coinMintRecords;\\n  // gameCoinAddress => declareMintId\\n  mapping(address => bytes32) public preMintIds;\\n\\n  // gameId => coin amount\\n  mapping(uint256 => uint256) internal _gameCoinCount;\\n\\n  uint256[39] private __gap;\\n}\\n\",\"keccak256\":\"0xcbf51e78097c968cc26c3070a0d72e34342bd897f1ceea57f3bacc653dfb60b6\",\"license\":\"GPL-3.0-only\"},\"src/coinFactory/P12CoinFactoryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport { INonfungiblePositionManager } from 'src/interfaces/external/uniswap/INonfungiblePositionManager.sol';\\nimport { IERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport { ClonesUpgradeable } from '@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol';\\nimport { Ownable2StepUpgradeable } from '@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol';\\nimport { UUPSUpgradeable } from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport { ReentrancyGuardUpgradeable } from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport { SafeERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport { IERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport { MathUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol';\\nimport { IP12CoinFactoryUpgradeable } from 'src/coinFactory/interfaces/IP12CoinFactoryUpgradeable.sol';\\nimport { IP12MineUpgradeable } from '../staking/interfaces/IP12MineUpgradeable.sol';\\nimport { P12CoinFactoryStorage } from './P12CoinFactoryStorage.sol';\\nimport { IP12GameCoin } from 'src/coinFactory/interfaces/IP12GameCoin.sol';\\nimport { CommonError } from 'src/libraries/CommonError.sol';\\n\\ncontract P12CoinFactoryUpgradeable is\\n  P12CoinFactoryStorage,\\n  UUPSUpgradeable,\\n  IP12CoinFactoryUpgradeable,\\n  Ownable2StepUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  PausableUpgradeable\\n{\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /**\\n   * @dev create binding between game and developer, only called by p12 backend\\n   * @param gameId game id\\n   * @param developer developer address, who own this game\\n   */\\n  function register(uint256 gameId, address developer) external virtual override onlySigner {\\n    if (address(developer) == address(0)) revert CommonError.ZeroAddressSet();\\n    gameDev[gameId] = developer;\\n    emit RegisterGame(gameId, developer);\\n  }\\n\\n  /**\\n   * @dev developer first create their game coin\\n   * @param name new game coin's name\\n   * @param symbol game coin's symbol\\n   * @param gameId the game's id\\n   * @param amountGameCoin how many coin first mint\\n   * @return gameCoinAddress the address of the new game coin\\n   */\\n  function create(\\n    string calldata name,\\n    string calldata symbol,\\n    string calldata uri,\\n    uint256 gameId,\\n    uint256 amountGameCoin,\\n    uint256 amountP12\\n  ) external virtual override nonReentrant whenNotPaused returns (address gameCoinAddress) {\\n    if (msg.sender != gameDev[gameId]) revert CommonError.NotGameDeveloper(msg.sender, gameId);\\n    gameCoinAddress = _create(name, symbol, uri, gameId, amountGameCoin);\\n\\n    uint256 amountGameCoinForLiquidity = amountGameCoin / 2;\\n\\n    address token0;\\n    uint256 token0Amount;\\n    address token1;\\n    uint256 token1Amount;\\n    uint256 priceSqrtX96;\\n\\n    if (address(gameCoinAddress) < p12) {\\n      token0 = address(gameCoinAddress);\\n      token0Amount = amountGameCoinForLiquidity;\\n      token1 = p12;\\n      token1Amount = amountP12;\\n\\n      priceSqrtX96 = MathUpgradeable.sqrt(((amountP12 / 1 ether) * 2 ** 192) / (amountGameCoinForLiquidity / 1 ether));\\n    } else {\\n      token0 = p12;\\n      token0Amount = amountP12;\\n      token1 = address(gameCoinAddress);\\n      token1Amount = amountGameCoinForLiquidity;\\n\\n      priceSqrtX96 = MathUpgradeable.sqrt(((amountGameCoinForLiquidity / 1 ether) * 2 ** 192) / (amountP12 / 1 ether));\\n    }\\n\\n    // transfer P12 to address this for later liquidity create\\n    IERC20Upgradeable(p12).safeTransferFrom(msg.sender, address(this), amountP12);\\n\\n    // aprove gamecoin\\n    IERC20Upgradeable(gameCoinAddress).approve(address(uniswapPosManager), type(uint256).max);\\n\\n    // fee 0.3% tickSpacing 60\\n    uniswapPosManager.createAndInitializePoolIfNecessary(token0, token1, 3000, uint160(priceSqrtX96));\\n\\n    // create initial liquidity and givev nft to msg.sender\\n    uniswapPosManager.mint(\\n      INonfungiblePositionManager.MintParams(\\n        token0,\\n        token1,\\n        3000,\\n        // Tick range should be an integer multiple of the tick space\\n        -887220,\\n        887220,\\n        token0Amount,\\n        token1Amount,\\n        0,\\n        0,\\n        msg.sender,\\n        block.timestamp + 1\\n      )\\n    );\\n\\n    coinGameIds[gameCoinAddress] = gameId;\\n    emit CreateGameCoin(msg.sender, gameCoinAddress, gameId, amountGameCoin, amountP12);\\n    return gameCoinAddress;\\n  }\\n\\n  /**\\n   * @dev if developer want to mint after create coin, developer must declare first\\n   * @param gameId game's id\\n   * @param gameCoinAddress game coin's address\\n   * @param amountGameCoin how many developer want to mint\\n   * @param success whether the operation success\\n   */\\n  function queueMintCoin(\\n    uint256 gameId,\\n    address gameCoinAddress,\\n    uint256 amountGameCoin\\n  ) external virtual override nonReentrant whenNotPaused returns (bool success) {\\n    if (msg.sender != gameDev[gameId]) revert CommonError.NotGameDeveloper(msg.sender, gameId);\\n    if (coinGameIds[gameCoinAddress] != gameId) revert MisMatchCoinWithGameId(gameCoinAddress, gameId);\\n\\n    bytes32 preMintId = preMintIds[gameCoinAddress];\\n    uint256 lastUnlockTimestamp = coinMintRecords[gameCoinAddress][preMintId].unlockTimestamp;\\n\\n    // Set the correct unlock time\\n    uint256 time = MathUpgradeable.max(_getBlockTimestamp(), lastUnlockTimestamp);\\n\\n    // minting fee for p12\\n    uint256 p12Fee = getMintFee(gameCoinAddress, amountGameCoin);\\n\\n    // transfer the p12 to this contract\\n    IERC20Upgradeable(p12).safeTransferFrom(msg.sender, address(this), p12Fee);\\n\\n    uint256 delayD = getMintDelay(address(gameCoinAddress), amountGameCoin);\\n\\n    bytes32 mintId = _hashOperation(gameCoinAddress, msg.sender, amountGameCoin, time);\\n\\n    coinMintRecords[gameCoinAddress][mintId] = MintCoinInfo(amountGameCoin, delayD + time, false);\\n\\n    emit QueueMintCoin(mintId, gameCoinAddress, amountGameCoin, delayD + time, p12Fee);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev when time is up, anyone can call this function to make the mint executed\\n   * @param gameCoinAddress address of the game coin\\n   * @param mintId a unique id to identify a mint, developer can get it after declare\\n   * @return bool whether the operation success\\n   */\\n  function executeMintCoin(\\n    address gameCoinAddress,\\n    bytes32 mintId\\n  ) external virtual override nonReentrant whenNotPaused returns (bool) {\\n    if (coinMintRecords[gameCoinAddress][mintId].unlockTimestamp == 0) revert NonExistenceMintId(mintId);\\n    // check if it has been executed\\n    if (coinMintRecords[gameCoinAddress][mintId].executed) revert ExecutedMint(mintId);\\n\\n    uint256 time = _getBlockTimestamp();\\n\\n    // check that the current time is greater than the unlock time\\n    if (time <= coinMintRecords[gameCoinAddress][mintId].unlockTimestamp) revert NotTimeToMint(mintId);\\n\\n    // Modify status\\n    coinMintRecords[gameCoinAddress][mintId].executed = true;\\n\\n    // transfer the gameCoin to this contract first\\n    IP12GameCoin(gameCoinAddress).mint(address(this), coinMintRecords[gameCoinAddress][mintId].amount);\\n\\n    emit ExecuteMintCoin(mintId, gameCoinAddress, msg.sender);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev update signers\\n   * @param toAdd list of to be added signer\\n   * @param toRemove list of to be removed signer\\n   */\\n  function updateSigners(address[] calldata toAdd, address[] calldata toRemove) public onlyOwner {\\n    for (uint256 i = 0; i < toAdd.length; i++) {\\n      signers[toAdd[i]] = true;\\n      emit SignerUpdate(toAdd[i], true);\\n    }\\n    for (uint256 i = 0; i < toRemove.length; i++) {\\n      delete signers[toRemove[i]];\\n      emit SignerUpdate(toRemove[i], false);\\n    }\\n  }\\n\\n  /**\\n   * @notice called when user want to withdraw his game coin from custodian address\\n   * @param userAddress user's address\\n   * @param gameCoinAddress gameCoin's address\\n   * @param amountGameCoin how many user want to withdraw\\n   */\\n  function withdraw(\\n    address userAddress,\\n    address gameCoinAddress,\\n    uint256 amountGameCoin\\n  ) external virtual override onlySigner returns (bool) {\\n    IERC20Upgradeable(address(gameCoinAddress)).safeTransfer(userAddress, amountGameCoin);\\n    emit Withdraw(userAddress, gameCoinAddress, amountGameCoin);\\n    return true;\\n  }\\n\\n  //============ Public ============\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  function initialize(\\n    address owner_,\\n    address p12_,\\n    INonfungiblePositionManager uniswapPosManager_,\\n    address gameCoinImpl_\\n  ) public initializer {\\n    if (address(p12_) == address(0)) revert CommonError.ZeroAddressSet();\\n    if (address(uniswapPosManager_) == address(0)) revert CommonError.ZeroAddressSet();\\n\\n    p12 = p12_;\\n    uniswapPosManager = uniswapPosManager_;\\n    gameCoinImpl = gameCoinImpl_;\\n    IERC20Upgradeable(p12).safeApprove(address(uniswapPosManager_), type(uint256).max);\\n    __ReentrancyGuard_init_unchained();\\n    __Pausable_init_unchained();\\n    __Ownable2Step_init();\\n    _transferOwnership(owner_);\\n  }\\n\\n  /**\\n   * @dev set linear function's K parameter\\n   * @param newDelayK new K parameter\\n   */\\n  function setDelayK(uint256 newDelayK) public virtual override onlyOwner returns (bool) {\\n    uint256 oldDelayK = delayK;\\n    delayK = newDelayK;\\n    emit SetDelayK(oldDelayK, delayK);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev set linear function's B parameter\\n   * @param newDelayB new B parameter\\n   */\\n  function setDelayB(uint256 newDelayB) public virtual override onlyOwner returns (bool) {\\n    uint256 oldDelayB = delayB;\\n    delayB = newDelayB;\\n    emit SetDelayB(oldDelayB, delayB);\\n    return true;\\n  }\\n\\n  function getGameDev(uint256 gameId) public view override returns (address) {\\n    return gameDev[gameId];\\n  }\\n\\n  /**\\n   * @dev calculate the MintFee in P12\\n   */\\n  function getMintFee(\\n    address gameCoinAddress,\\n    uint256 amountGameCoin\\n  ) public view virtual override returns (uint256 amountP12) {\\n    // uint256 gameCoinReserved;\\n    // uint256 p12Reserved;\\n    // if (p12 < address(gameCoinAddress)) {\\n    //   (p12Reserved, gameCoinReserved, ) = IUniswapV2Pair(uniswapFactory.getPair(address(gameCoinAddress), p12)).getReserves();\\n    // } else {\\n    //   (gameCoinReserved, p12Reserved, ) = IUniswapV2Pair(uniswapFactory.getPair(address(gameCoinAddress), p12)).getReserves();\\n    // }\\n    // // overflow when p12Reserved * amountGameCoin > 2^256 ~= 10^77\\n    // amountP12 = (p12Reserved * amountGameCoin) / (gameCoinReserved * 100);\\n    // return amountP12;\\n  }\\n\\n  /**\\n   * @dev linear function to calculate the delay time\\n   * @dev delayB is the minimum delay period, even someone mint zero token,\\n   * @dev there still be delayB period before someone can really mint zero token\\n   * @dev delayK is the parameter to take the ratio of new amount in to account\\n   * @dev For example, the initial supply of Game Coin is 100k. If developer want\\n   * @dev to mint 100k, developer needs to real mint it after `delayK + delayB`. If\\n   * @dev developer want to mint 200k, developer has to real mint it after `2DelayK +\\n   * @dev delayB`.\\n          ^\\n        t +            /\\n          |          /\\n          |        /\\n      2k+b|      /\\n          |    /\\n       k+b|  / \\n          |/ \\n         b|\\n          0----p---2p---------> amount\\n            \\n   */\\n  function getMintDelay(address gameCoinAddress, uint256 amountGameCoin) public view virtual override returns (uint256 time) {\\n    time = (amountGameCoin * delayK) / (IERC20Upgradeable(gameCoinAddress).totalSupply()) + delayB;\\n  }\\n\\n  //============ Internal ============\\n\\n  /**\\n   * @dev function to create a game coin contract\\n   * @param name game coin name\\n   * @param symbol game coin symbol\\n   * @param gameId game id\\n   * @param amountGameCoin how many for first mint\\n   */\\n  function _create(\\n    string calldata name,\\n    string calldata symbol,\\n    string calldata uri,\\n    uint256 gameId,\\n    uint256 amountGameCoin\\n  ) internal virtual returns (address gameCoinAddress) {\\n    bytes32 salt = keccak256(abi.encode(gameId, ++_gameCoinCount[gameId]));\\n    // erc1167 deterministic clone\\n    gameCoinAddress = ClonesUpgradeable.cloneDeterministic(gameCoinImpl, salt);\\n    // initialize\\n    IP12GameCoin(gameCoinAddress).initialize(address(this), name, symbol, uri, gameId);\\n    // mint initial amount\\n    IP12GameCoin(gameCoinAddress).mint(address(this), amountGameCoin);\\n  }\\n\\n  /**\\n   * @dev hash function to general mintId\\n   * @param gameCoinAddress game coin address\\n   * @param declarer address which declare to mint game coin\\n   * @param amount how much to mint\\n   * @param timestamp time when declare\\n   * @return hash mintId\\n   */\\n  function _hashOperation(\\n    address gameCoinAddress,\\n    address declarer,\\n    uint256 amount,\\n    uint256 timestamp\\n  ) internal virtual returns (bytes32 hash) {\\n    bytes32 preMintId = preMintIds[gameCoinAddress];\\n\\n    bytes32 preMintIdNew = keccak256(abi.encode(gameCoinAddress, declarer, amount, timestamp, preMintId));\\n    preMintIds[gameCoinAddress] = preMintIdNew;\\n    return preMintIdNew;\\n  }\\n\\n  /** upgrade function */\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n  /**\\n   * @dev get a specific game next coin's deterministic address\\n   * @param gameId off chain game Id\\n   */\\n  function getGameNextCoinAddress(uint256 gameId) public view override returns (address gameCoinAddress) {\\n    bytes32 salt = keccak256(abi.encode(gameId, _gameCoinCount[gameId] + 1));\\n    gameCoinAddress = ClonesUpgradeable.predictDeterministicAddress(gameCoinImpl, salt);\\n  }\\n\\n  /**\\n   * @dev get current block's timestamp\\n   */\\n  function _getBlockTimestamp() internal view virtual returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  function _verifySigner() internal view {\\n    if (!signers[msg.sender]) {\\n      revert NotP12Signer();\\n    }\\n  }\\n\\n  function _verifyGameDev(address token) internal view {\\n    if (msg.sender != gameDev[coinGameIds[token]]) revert CommonError.NotGameDeveloper(msg.sender, coinGameIds[token]);\\n  }\\n\\n  /**\\n   * @dev compare two string and judge whether they are the same\\n   */\\n  function _compareStrings(string memory a, string memory b) internal pure virtual returns (bool) {\\n    return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n  }\\n\\n  // ============= Modifier ================\\n  modifier onlySigner() {\\n    _verifySigner();\\n    _;\\n  }\\n\\n  modifier onlyGameDev(address token) {\\n    _verifyGameDev(token);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x13a65e7260d34b03236a657864f49a3eb10a5a2290d848a12bb7183e1bacc27f\",\"license\":\"GPL-3.0-only\"},\"src/coinFactory/interfaces/IERC1046.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.19;\\n\\n/// @notice ERC1046 https://eips.ethereum.org/EIPS/eip-1046\\ninterface IERC1046 {\\n  /// @notice     Gets an ERC-721-like token URI\\n  /// @dev        The resolved data MUST be in JSON format and support ERC-1046's ERC-20 Token Metadata Schema\\n  function tokenURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x2f09cb6838b186c8d8fba3d803055951cef1a3719d0ebd333f923675b4199307\",\"license\":\"GPL-3.0-only\"},\"src/coinFactory/interfaces/IP12CoinFactoryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport { IUniswapV3Factory } from '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\nimport { INonfungiblePositionManager } from 'src/interfaces/external/uniswap/INonfungiblePositionManager.sol';\\n\\ninterface IP12CoinFactoryDef {\\n  /**\\n   * @dev struct of each mint request\\n   */\\n  struct MintCoinInfo {\\n    uint256 amount;\\n    uint256 unlockTimestamp;\\n    bool executed;\\n  }\\n}\\n\\ninterface IP12CoinFactoryUpgradeable is IP12CoinFactoryDef {\\n  // register gameId =>developer\\n  function register(uint256 gameId, address developer) external;\\n\\n  // mint game coin\\n  function create(\\n    string calldata name,\\n    string calldata symbol,\\n    string calldata uri,\\n    uint256 gameId,\\n    uint256 amountGameCoin,\\n    uint256 amountP12\\n  ) external returns (address);\\n\\n  //  mint coin and Launch a statement\\n  function queueMintCoin(uint256 gameId, address gameCoinAddress, uint256 amountGameCoin) external returns (bool);\\n\\n  // execute Mint coin\\n  function executeMintCoin(address gameCoinAddress, bytes32 mintId) external returns (bool);\\n\\n  function withdraw(address userAddress, address gameCoinAddress, uint256 amountGameCoin) external returns (bool);\\n\\n  function getGameDev(uint256) external returns (address);\\n\\n  function getGameNextCoinAddress(uint256 gameId) external view returns (address gameCoinAddress);\\n\\n  // get mintFee\\n  function getMintFee(address gameCoinAddress, uint256 amountGameCoin) external view returns (uint256);\\n\\n  // get mintDelay\\n  function getMintDelay(address gameCoinAddress, uint256 amountGameCoin) external view returns (uint256);\\n\\n  // get delayK\\n  function setDelayK(uint256 delayK) external returns (bool);\\n\\n  // get delayB\\n  function setDelayB(uint256 delayB) external returns (bool);\\n\\n  error MisMatchCoinWithGameId(address coin, uint256 gameId);\\n  // not existent mint id\\n  error NonExistenceMintId(bytes32 mintId);\\n  // mintId is already executed\\n  error ExecutedMint(bytes32 mintId);\\n  // it's not time to mint this batch of coins\\n  error NotTimeToMint(bytes32 mintId);\\n  // don't have p12 dev role\\n  error NotP12Signer();\\n  // invalid liquidity when first create coin and create swap pool\\n  error InvalidLiquidity();\\n\\n  // register Game developer log\\n  event RegisterGame(uint256 gameId, address indexed developer);\\n\\n  // register Game coin log\\n  event CreateGameCoin(\\n    address indexed developer,\\n    address indexed gameCoinAddress,\\n    uint256 indexed gameId,\\n    uint256 amountGameCoin,\\n    uint256 amountP12\\n  );\\n\\n  // mint coin in future log\\n  event QueueMintCoin(\\n    bytes32 indexed mintId,\\n    address indexed gameCoinAddress,\\n    uint256 mintAmount,\\n    uint256 unlockTimestamp,\\n    uint256 amountP12\\n  );\\n\\n  event SignerUpdate(address signer, bool valid);\\n\\n  // mint coin success log\\n  event ExecuteMintCoin(bytes32 indexed mintId, address indexed gameCoinAddress, address indexed executor);\\n\\n  // game player withdraw gameCoin\\n  event Withdraw(address userAddress, address gameCoinAddress, uint256 amountGameCoin);\\n\\n  event SetDev(address oldDev, address newDev);\\n\\n  // change delayB log\\n  event SetDelayB(uint256 oldDelayB, uint256 newDelayB);\\n\\n  // change delayK log\\n  event SetDelayK(uint256 oldDelayK, uint256 newDelayK);\\n}\\n\",\"keccak256\":\"0x97587ec029b8a28c287d434eed27124ecd1dba3a146bc26ae754722d51c91af4\",\"license\":\"GPL-3.0-only\"},\"src/coinFactory/interfaces/IP12GameCoin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.19;\\n\\nimport { IERC1046 } from 'src/coinFactory/interfaces/IERC1046.sol';\\n\\ninterface IP12GameCoin is IERC1046 {\\n  /**\\n   * @dev record the event that transfer coin with a off-chain account, which will be used when someone want to deposit his coin to off-chain game.\\n   */\\n  event DepositToAccount(address indexed recipient, bytes32 indexed account, uint256 amount);\\n\\n  function mint(address to, uint256 amount) external;\\n\\n  function gameId() external view returns (uint256);\\n\\n  function depositToAccount(address recipient, uint256 amount, bytes32 account) external;\\n\\n  function initialize(\\n    address owner_,\\n    string calldata name_,\\n    string calldata symbol_,\\n    string calldata uri_,\\n    uint256 gameId_\\n  ) external;\\n}\\n\",\"keccak256\":\"0xc3d49b2e691f97f1fcb2b2d1cd258863b722fad5b1c1ea92bf09daff6f368652\",\"license\":\"GPL-3.0-only\"},\"src/interfaces/external/uniswap/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n  /// @notice The permit typehash used in the permit signature\\n  /// @return The typehash for the permit\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  /// @notice The domain separator used in the permit signature\\n  /// @return The domain separator used in encoding of permit signature\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /// @notice Approve of a specific token ID for spending by spender via signature\\n  /// @param spender The account that is being approved\\n  /// @param tokenId The ID of the token that is being approved for spending\\n  /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n  /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n  /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n  /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n  function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external payable;\\n}\\n\",\"keccak256\":\"0xd567e350498ecf14af54b40cfe5940598a01f20a3f9d25f80b2084e0ebcc436e\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/external/uniswap/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\n\\n// import '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n  IPoolInitializer,\\n  IPeripheryPayments,\\n  IPeripheryImmutableState,\\n  IERC721Metadata,\\n  IERC721Enumerable,\\n  IERC721Permit\\n{\\n  /// @notice Emitted when liquidity is increased for a position NFT\\n  /// @dev Also emitted when a token is minted\\n  /// @param tokenId The ID of the token for which liquidity was increased\\n  /// @param liquidity The amount by which liquidity for the NFT position was increased\\n  /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n  /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n  event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n  /// @notice Emitted when liquidity is decreased for a position NFT\\n  /// @param tokenId The ID of the token for which liquidity was decreased\\n  /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n  /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n  /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n  event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n  /// @notice Emitted when tokens are collected for a position NFT\\n  /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n  /// @param tokenId The ID of the token for which underlying tokens were collected\\n  /// @param recipient The address of the account that received the collected tokens\\n  /// @param amount0 The amount of token0 owed to the position that was collected\\n  /// @param amount1 The amount of token1 owed to the position that was collected\\n  event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n  /// @notice Returns the position information associated with a given token ID.\\n  /// @dev Throws if the token ID is not valid.\\n  /// @param tokenId The ID of the token that represents the position\\n  /// @return nonce The nonce for permits\\n  /// @return operator The address that is approved for spending\\n  /// @return token0 The address of the token0 for a specific pool\\n  /// @return token1 The address of the token1 for a specific pool\\n  /// @return fee The fee associated with the pool\\n  /// @return tickLower The lower end of the tick range for the position\\n  /// @return tickUpper The higher end of the tick range for the position\\n  /// @return liquidity The liquidity of the position\\n  /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n  /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n  /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n  /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n  function positions(\\n    uint256 tokenId\\n  )\\n    external\\n    view\\n    returns (\\n      uint96 nonce,\\n      address operator,\\n      address token0,\\n      address token1,\\n      uint24 fee,\\n      int24 tickLower,\\n      int24 tickUpper,\\n      uint128 liquidity,\\n      uint256 feeGrowthInside0LastX128,\\n      uint256 feeGrowthInside1LastX128,\\n      uint128 tokensOwed0,\\n      uint128 tokensOwed1\\n    );\\n\\n  struct MintParams {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    address recipient;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Creates a new position wrapped in a NFT\\n  /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n  /// a method does not exist, i.e. the pool is assumed to be initialized.\\n  /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n  /// @return tokenId The ID of the token that represents the minted position\\n  /// @return liquidity The amount of liquidity for this position\\n  /// @return amount0 The amount of token0\\n  /// @return amount1 The amount of token1\\n  function mint(\\n    MintParams calldata params\\n  ) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n  struct IncreaseLiquidityParams {\\n    uint256 tokenId;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n  /// @param params tokenId The ID of the token for which liquidity is being increased,\\n  /// amount0Desired The desired amount of token0 to be spent,\\n  /// amount1Desired The desired amount of token1 to be spent,\\n  /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n  /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n  /// deadline The time by which the transaction must be included to effect the change\\n  /// @return liquidity The new liquidity amount as a result of the increase\\n  /// @return amount0 The amount of token0 to achieve resulting liquidity\\n  /// @return amount1 The amount of token1 to achieve resulting liquidity\\n  function increaseLiquidity(\\n    IncreaseLiquidityParams calldata params\\n  ) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n  struct DecreaseLiquidityParams {\\n    uint256 tokenId;\\n    uint128 liquidity;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n  /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n  /// amount The amount by which liquidity will be decreased,\\n  /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n  /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n  /// deadline The time by which the transaction must be included to effect the change\\n  /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n  /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n  function decreaseLiquidity(\\n    DecreaseLiquidityParams calldata params\\n  ) external payable returns (uint256 amount0, uint256 amount1);\\n\\n  struct CollectParams {\\n    uint256 tokenId;\\n    address recipient;\\n    uint128 amount0Max;\\n    uint128 amount1Max;\\n  }\\n\\n  /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n  /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n  /// recipient The account that should receive the tokens,\\n  /// amount0Max The maximum amount of token0 to collect,\\n  /// amount1Max The maximum amount of token1 to collect\\n  /// @return amount0 The amount of fees collected in token0\\n  /// @return amount1 The amount of fees collected in token1\\n  function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n  /// must be collected first.\\n  /// @param tokenId The ID of the token that is being burned\\n  function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xc14b0f82f9c4ede02a8120367cbf6b4f38d14b86bfb2108beed4531b36908ac9\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/external/uniswap/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/external/uniswap/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/external/uniswap/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x36b29f3e6725c3df4d330e654034c40a272fee89350cb12b2d9cbea9304cc111\",\"license\":\"GPL-2.0-or-later\"},\"src/libraries/CommonError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nlibrary CommonError {\\n  // pass zero address as args\\n  error ZeroAddressSet();\\n  // pass zero uint as args;\\n  error ZeroUintSet();\\n  // not game developer and no permit to do something\\n  error NotGameDeveloper(address user, uint256 gameId);\\n  // not enough p12, pass zero value for p12 amount\\n  error NotEnoughP12();\\n  // no permission to do something\\n  error NoPermission();\\n}\\n\",\"keccak256\":\"0xb6988b9d09886a28105f3b9d064b73d22e83293a33393c4040536f1baba171e7\",\"license\":\"GPL-3.0-only\"},\"src/staking/interfaces/IGaugeController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport '../../token/interfaces/IVotingEscrow.sol';\\n\\ninterface IGaugeController {\\n  event CommitOwnership(address admin);\\n\\n  event ApplyOwnership(address admin);\\n\\n  event AddType(string name, int128 typeId);\\n\\n  event NewTypeWeight(int128 typeId, uint256 time, uint256 weight, uint256 totalWeight);\\n\\n  event NewGaugeWeight(address gaugeAddress, uint256 time, uint256 weight, uint256 totalWeight);\\n\\n  event VoteForGauge(uint256 time, address user, address gaugeAddress, uint256 weight);\\n\\n  event NewGauge(address addr, int128 gaugeType, uint256 weight);\\n\\n  event SetVotingEscrow(IVotingEscrow oldVotingEscrow, IVotingEscrow newVotingEscrow);\\n\\n  event SetP12Factory(address oldP12Factory, address newP12Factory);\\n\\n  // invalid gauge type\\n  error InvalidGaugeType();\\n  // duplicate gauge type\\n  error DuplicatedGaugeType();\\n  //\\n  error AddGaugeFail();\\n  // weight should be between 1,10000 \\n  error InvalidWeight();\\n  // user's token will be unlock util next epoch start\\n  error UnLockTooSoon();\\n  // user already vote for this epoch\\n  error VoteTooOften();\\n\\n  function getGaugeTypes(address addr) external returns (int128);\\n\\n  function checkpoint() external;\\n\\n  function gaugeRelativeWeightWrite(address addr, uint256 time) external returns (uint256);\\n\\n  function changeTypeWeight(int128 typeId, uint256 weight) external;\\n\\n  function changeGaugeWeight(address addr, uint256 weight) external;\\n\\n  function voteForGaugeWeights(address gaugeAddr, uint256 userWeight) external;\\n\\n  function checkpointGauge(address addr) external;\\n\\n  function gaugeRelativeWeight(address lpToken, uint256 time) external returns (uint256);\\n\\n  function getGaugeWeight(address addr) external returns (uint256);\\n\\n  function getTypeWeight(int128 typeId) external returns (uint256);\\n\\n  function getTotalWeight() external returns (uint256);\\n\\n  function getWeightsSumPerType(int128 typeId) external returns (uint256);\\n\\n  function addGauge(\\n    address addr,\\n    int128 gaugeType,\\n    uint256 weight\\n  ) external;\\n\\n  function addType(string memory name, uint256 weight) external;\\n\\n  function setVotingEscrow(IVotingEscrow newVotingEscrow) external;\\n\\n  function setP12CoinFactory(address newP12Factory) external;\\n}\\n\",\"keccak256\":\"0x3a08b6e34048f52f63610b2b0dbfa0d2d087b927cad46678e13b700e35663cce\",\"license\":\"GPL-3.0-only\"},\"src/staking/interfaces/IP12MineUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport '../../token/interfaces/IVotingEscrow.sol';\\nimport './IGaugeController.sol';\\n\\ninterface IP12MineUpgradeable {\\n  event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 userAmount, uint256 poolAmount); // deposit lpToken log\\n  event ExecuteWithdraw(\\n    address indexed user,\\n    uint256 indexed pid,\\n    bytes32 indexed withdrawId,\\n    uint256 amount,\\n    uint256 userAmount,\\n    uint256 poolAmount\\n  ); // withdraw lpToken log\\n  event QueueWithdraw(\\n    address indexed user,\\n    uint256 pid,\\n    uint256 indexed amount,\\n    bytes32 indexed newWithdrawId,\\n    uint256 unlockTimestamp\\n  ); // delayed unStaking mining log\\n  event Claim(address indexed user, uint256 amount,address lpToken); // get rewards\\n  event SetDelayB(uint256 oldDelayB, uint256 newDelayB); // change delayB log\\n  event SetDelayK(uint256 oldDelayK, uint256 newDelayK); // change delayK log\\n  event SetRate(uint256 oldRate, uint256 newRate); // set new rate\\n  event SetP12Factory(address oldP12Factory, address newP12Factory);\\n  event SetGaugeController(IGaugeController oldGaugeController, IGaugeController newGaugeController);\\n  event WithdrawLpTokenEmergency(address lpToken, uint256 amount);\\n\\n  event Emergency(address executor, uint256 emergencyUnlockTime);\\n  event Checkpoint(address indexed lpToken, uint256 indexed poolAmount, uint256 accP12PerShare);\\n\\n  // Emergency status is already set\\n  error EmergencyAlreadySet();\\n  // no emergency now\\n  error NoEmergencyNow();\\n  // emergency withdraw status unlock yet\\n  error EmergencyUnlockYet();\\n  // invalid lp amount to add\\n  error InvalidLpAmount(uint256 amount);\\n  // lp token pool already exist\\n  error LpTokenExist();\\n  // lp token pool not exist yet\\n  error LpTokenNotExist();\\n  // withdraw much more token than user can\\n  error WithDrawTooMuch(uint256 max, uint256 request);\\n  // user has not stake token yet\\n  error NotStakeTokenYet();\\n  // this withdraw deal is already executed\\n  error AlreadyWithdrawn();\\n  // it's too early to withdrawn\\n  error TooEarlyToWithdrawn();\\n  // it's too early to check point\\n  error TooEarlyToCheck();\\n\\n\\n  function poolLength() external returns (uint256);\\n\\n  function getPid(address lpToken) external returns (uint256);\\n\\n  function getUserLpBalance(address lpToken, address user) external returns (uint256);\\n\\n  function checkpointAll() external;\\n\\n  function getWithdrawUnlockTimestamp(address lpToken, uint256 amount) external returns (uint256);\\n\\n  function withdrawEmergency() external;\\n\\n  function withdrawLpTokenEmergency(address lpToken) external;\\n\\n  function withdrawAllLpTokenEmergency() external;\\n\\n  function emergency() external;\\n\\n  function createPool(address lpToken) external; // new pool\\n\\n  function setDelayK(uint256 delayK) external returns (bool);\\n\\n  function setDelayB(uint256 delayB) external returns (bool);\\n\\n  function deposit(address lpToken, uint256 amount) external; // deposit lpToken\\n\\n  function setRate(uint256 newRate) external returns (bool);\\n\\n  function setP12CoinFactory(address newP12Factory) external;\\n\\n  function setGaugeController(IGaugeController newGaugeController) external;\\n\\n  function executeWithdraw(address lpToken, bytes32 id) external; // withdraw lpToken\\n\\n  function queueWithdraw(address lpToken, uint256 amount) external; // delayed unStaking mining\\n\\n  function addLpTokenInfoForGameCreator(\\n    address lpToken,\\n    uint256 amount,\\n    address gameCoinCreator\\n  ) external; // add lpToken info for gameCoin creator when first time\\n\\n  function claim(address lpToken) external returns (uint256); // get pending rewards\\n\\n  function claimAll() external returns (uint256); // get all pending rewards\\n\\n  function checkpoint(address lpToken) external;\\n}\\n\",\"keccak256\":\"0xa99df6ea5ab70a357a37642cbc2d4af12196b8a77240e88024d8ba192c49a8ec\",\"license\":\"GPL-3.0-only\"},\"src/token/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\ninterface IVotingEscrow {\\n\\n  error InValidBlockNumber();\\n\\n  error InvalidValue();\\n  // user have not lock token before\\n  error NoExistedLock();\\n  // user have locked token\\n  error LockExisted();\\n  // lock created before is expired, cannot increase amount or time\\n  error LockExpired();\\n  // lock time set is too short\\n  error LockTimeTooShort();\\n  // lock time set is too long\\n  error LockTimeTooLong();\\n  // contract is stopped in case of emergency\\n  error ContractStopped();\\n  // withdraw conditions are not met\\n  error CannotWithdraw();\\n\\n  function getLastUserSlope(address addr) external returns (int256);\\n\\n  function lockedEnd(address addr) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x09474db57d08c2cdd65341cdb828d69681b05260525267efaffbab483d927f08\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b50608051612e9561004c6000396000818161087f015281816108c801528181610979015281816109b90152610a4c0152612e956000f3fe6080604052600436106101f95760003560e01c80639be55f511161010d578063d9caed12116100a0578063e48f427b1161006f578063e48f427b14610622578063e6fdb39614610638578063eb26c09c14610658578063f2fde38b14610678578063f8c8765e1461069857600080fd5b8063d9caed1214610597578063dbbdf083146105b7578063e30c3978146105d7578063e3f9206e146105f557600080fd5b8063b40680eb116100dc578063b40680eb14610514578063beb54e5314610534578063bfe3695314610557578063c45ef4821461057757600080fd5b80639be55f5114610471578063afdbf3c21461049e578063b2cb8d63146104be578063b309bc98146104f457600080fd5b806359f8fa0411610190578063736c0d5b1161015f578063736c0d5b146103d957806379ba5097146104095780638456cb591461041e5780638a1ff45d146104335780638da5cb5b1461045357600080fd5b806359f8fa04146103755780635c975abb14610395578063614bb60a146103ae578063715018a6146103c457600080fd5b806350605c94116101cc57806350605c941461026857806352d1902d146102bb5780635348e304146102de5780635377210f1461030e57600080fd5b8063350b2369146101fe5780633659cfe6146102205780633f4ba83a146102405780634f1ef28614610255575b600080fd5b34801561020a57600080fd5b5061021e6102193660046126a4565b6106b8565b005b34801561022c57600080fd5b5061021e61023b366004612725565b610875565b34801561024c57600080fd5b5061021e61095d565b61021e610263366004612758565b61096f565b34801561027457600080fd5b5061029e61028336600461281c565b6000908152600660205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102c757600080fd5b506102d0610a3f565b6040519081526020016102b2565b3480156102ea57600080fd5b506102fe6102f9366004612835565b610af2565b60405190151581526020016102b2565b34801561031a57600080fd5b50610358610329366004612835565b600860209081526000928352604080842090915290825290208054600182015460029092015490919060ff1683565b6040805193845260208401929092521515908201526060016102b2565b34801561038157600080fd5b5060015461029e906001600160a01b031681565b3480156103a157600080fd5b5061015f5460ff166102fe565b3480156103ba57600080fd5b506102d060045481565b3480156103d057600080fd5b5061021e610cbb565b3480156103e557600080fd5b506102fe6103f4366004612725565b60056020526000908152604090205460ff1681565b34801561041557600080fd5b5061021e610ccd565b34801561042a57600080fd5b5061021e610d44565b34801561043f57600080fd5b5060025461029e906001600160a01b031681565b34801561045f57600080fd5b5060c9546001600160a01b031661029e565b34801561047d57600080fd5b506102d061048c366004612725565b60096020526000908152604090205481565b3480156104aa57600080fd5b506102fe6104b936600461281c565b610d54565b3480156104ca57600080fd5b5061029e6104d936600461281c565b6006602052600090815260409020546001600160a01b031681565b34801561050057600080fd5b506102fe61050f36600461281c565b610da9565b34801561052057600080fd5b506102fe61052f366004612861565b610df1565b34801561054057600080fd5b506102d061054f366004612835565b600092915050565b34801561056357600080fd5b5060005461029e906001600160a01b031681565b34801561058357600080fd5b506102d0610592366004612835565b610fd7565b3480156105a357600080fd5b506102fe6105b2366004612899565b61105f565b3480156105c357600080fd5b5061021e6105d23660046128c9565b6110d2565b3480156105e357600080fd5b5060fb546001600160a01b031661029e565b34801561060157600080fd5b506102d0610610366004612725565b60076020526000908152604090205481565b34801561062e57600080fd5b506102d060035481565b34801561064457600080fd5b5061029e61065336600461293b565b611163565b34801561066457600080fd5b5061029e61067336600461281c565b611513565b34801561068457600080fd5b5061021e610693366004612725565b611574565b3480156106a457600080fd5b5061021e6106b33660046129ed565b6115e5565b6106c06117a8565b60005b8381101561079b576001600560008787858181106106e3576106e3612a49565b90506020020160208101906106f89190612725565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557fc648f6265408cc54c0dc26d24ba51dfc9f35ce1a63baa2228f65d93aaf11cc6785858381811061075357610753612a49565b90506020020160208101906107689190612725565b604080516001600160a01b039092168252600160208301520160405180910390a18061079381612a75565b9150506106c3565b5060005b8181101561086e57600560008484848181106107bd576107bd612a49565b90506020020160208101906107d29190612725565b6001600160a01b031681526020810191909152604001600020805460ff191690557fc648f6265408cc54c0dc26d24ba51dfc9f35ce1a63baa2228f65d93aaf11cc6783838381811061082657610826612a49565b905060200201602081019061083b9190612725565b604080516001600160a01b039092168252600060208301520160405180910390a18061086681612a75565b91505061079f565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108c65760405162461bcd60e51b81526004016108bd90612a8e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661090f600080516020612e42833981519152546001600160a01b031690565b6001600160a01b0316146109355760405162461bcd60e51b81526004016108bd90612ada565b61093e81611802565b6040805160008082526020820190925261095a9183919061180a565b50565b6109656117a8565b61096d61197a565b565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109b75760405162461bcd60e51b81526004016108bd90612a8e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a00600080516020612e42833981519152546001600160a01b031690565b6001600160a01b031614610a265760405162461bcd60e51b81526004016108bd90612ada565b610a2f82611802565b610a3b8282600161180a565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610adf5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108bd565b50600080516020612e4283398151915290565b6000610afc6119cd565b610b04611a28565b6001600160a01b03831660009081526008602090815260408083208584529091528120600101549003610b4d5760405163ba86627b60e01b8152600481018390526024016108bd565b6001600160a01b038316600090815260086020908152604080832085845290915290206002015460ff1615610b985760405163222f1d3d60e11b8152600481018390526024016108bd565b6001600160a01b038316600090815260086020908152604080832085845290915290206001015442908111610be35760405163d3d4d9c360e01b8152600481018490526024016108bd565b6001600160a01b03841660008181526008602090815260408083208784529091529081902060028101805460ff191660011790555490516340c10f1960e01b815230600482015260248101919091526340c10f1990604401600060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b50506040513392506001600160a01b038716915085907f2da35f6537bd80d9cac4d158e23a0ab942e7fb1fd4a25243fcad824c3433e37990600090a46001915050610cb5600161012d55565b92915050565b610cc36117a8565b61096d6000611a77565b60fb5433906001600160a01b03168114610d3b5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016108bd565b61095a81611a77565b610d4c6117a8565b61096d611a90565b6000610d5e6117a8565b600380549083905560408051828152602081018590527fb936e6dfcf3fec6bfb7d23d91ce9406c4ce74825de73cf38c764ed900731d7a491015b60405180910390a150600192915050565b6000610db36117a8565b600480549083905560408051828152602081018590527f43c057f209152d56f2de0fa1d79291670facf6161810b2392b949bf1647cc2369101610d98565b6000610dfb6119cd565b610e03611a28565b6000848152600660205260409020546001600160a01b03163314610e43576040516335638f4d60e11b8152336004820152602481018590526044016108bd565b6001600160a01b0383166000908152600760205260409020548414610e8d576040516328cc1fe360e11b81526001600160a01b0384166004820152602481018590526044016108bd565b6001600160a01b038316600090815260096020908152604080832054600883528184208185529092528220600101549091610ec84283611ace565b6000805491925090610ee5906001600160a01b0316333084611ae4565b6000610ef18888610fd7565b90506000610f0189338a87611b55565b905060405180606001604052808981526020018584610f209190612b26565b8152600060209182018190526001600160a01b038c16808252600883526040808320868452845291829020845181559284015160018401559201516002909101805460ff1916911515919091179055817f192dbb596f99b94785518ef174823fd46e8962b95010f6ddc9fd529a129dbe778a610f9c8887612b26565b604080519283526020830191909152810187905260600160405180910390a360019650505050505050610fd0600161012d55565b9392505050565b6000600454836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e9190612b39565b60035461104b9085612b52565b6110559190612b7f565b610fd09190612b26565b6000611069611bc7565b61107d6001600160a01b0384168584611bf7565b604080516001600160a01b038087168252851660208201529081018390527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060600160405180910390a15060019392505050565b6110da611bc7565b6001600160a01b03811661110157604051630ae8f22360e21b815260040160405180910390fd5b60008281526006602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915591518481527f6968e0ca91155227d05a7efa746b77e16777b4a79785bc4d1e8a24e8d250f04a910160405180910390a25050565b600061116d6119cd565b611175611a28565b6000848152600660205260409020546001600160a01b031633146111b5576040516335638f4d60e11b8152336004820152602481018590526044016108bd565b6111c58a8a8a8a8a8a8a8a611c27565b905060006111d4600285612b7f565b600080549192509081908190819081906001600160a01b03908116908816101561125a576000548795508694506001600160a01b03169250879150611253611224670de0b6b3a764000086612b7f565b611236670de0b6b3a76400008b612b7f565b61124490600160c01b612b52565b61124e9190612b7f565b611d6a565b905061129b565b6000546001600160a01b03169450879350869250859150611298611286670de0b6b3a764000086612b7f565b611236670de0b6b3a764000089612b7f565b90505b6000546112b3906001600160a01b031633308b611ae4565b60015460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529088169063095ea7b3906044016020604051808303816000875af1158015611307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132b9190612ba1565b506001546040516309f56ab160e11b81526001600160a01b0387811660048301528581166024830152610bb860448301528381166064830152909116906313ead562906084016020604051808303816000875af1158015611390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b49190612bc3565b506001805460408051610160810182526001600160a01b0389811682528781166020830152610bb892820192909252620d89b3196060820152620d89b4608082015260a0810188905260c08101869052600060e082018190526101008201523361012082015291169163883164569190610140820190611435904290612b26565b8152506040518263ffffffff1660e01b81526004016114549190612be0565b6080604051808303816000875af1158015611473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114979190612ca4565b505050506001600160a01b0387166000818152600760209081526040918290208d905581518c81529081018b90528c929133917fdc7b59b2c9ffd67846a3b59e7d1b402809ae1a82df9a879a8e5df293ed23eb72910160405180910390a4505050505050611506600161012d55565b9998505050505050505050565b6000818152600a602052604081205481908390611531906001612b26565b60408051602081019390935282015260600160408051601f198184030181529190528051602090910120600254909150610fd0906001600160a01b031682611e52565b61157c6117a8565b60fb80546001600160a01b0383166001600160a01b031990911681179091556115ad60c9546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b603254610100900460ff16158080156116055750603254600160ff909116105b8061161f5750303b15801561161f575060325460ff166001145b6116825760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108bd565b6032805460ff1916600117905580156116a5576032805461ff0019166101001790555b6001600160a01b0384166116cc57604051630ae8f22360e21b815260040160405180910390fd5b6001600160a01b0383166116f357604051630ae8f22360e21b815260040160405180910390fd5b600080546001600160a01b038087166001600160a01b0319928316811790935560018054878316908416179055600280549186169190921617905561173b9084600019611eb2565b611743611fc7565b61174b611fee565b611753612022565b61175c85611a77565b801561086e576032805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60c9546001600160a01b0316331461096d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bd565b61095a6117a8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156118425761183d83612051565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561189c575060408051601f3d908101601f1916820190925261189991810190612b39565b60015b6118ff5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016108bd565b600080516020612e42833981519152811461196e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016108bd565b5061183d8383836120ed565b611982612112565b61015f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600261012d5403611a205760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108bd565b600261012d55565b61015f5460ff161561096d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016108bd565b600161012d55565b60fb80546001600160a01b031916905561095a8161215c565b611a98611a28565b61015f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119b03390565b6000818311611add5781610fd0565b5090919050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b4f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121ae565b50505050565b6001600160a01b03848116600081815260096020818152604080842080548251808501889052978b1688840152606088018a90526080880189905260a0808901919091528251808903909101815260c0909701909152855195820195909520939092529052908190555b949350505050565b3360009081526005602052604090205460ff1661096d576040516369021caf60e01b815260040160405180910390fd5b6040516001600160a01b03831660248201526044810182905261183d90849063a9059cbb60e01b90606401611b18565b6000828152600a602052604081208054829185918390611c4690612a75565b918290555060408051602081019390935282015260600160408051601f198184030181529190528051602090910120600254909150611c8e906001600160a01b031682612283565b604051634823e6bd60e11b81529092506001600160a01b03831690639047cd7a90611ccb9030908e908e908e908e908e908e908e90600401612d20565b600060405180830381600087803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b50506040516340c10f1960e01b8152306004820152602481018690526001600160a01b03851692506340c10f199150604401600060405180830381600087803b158015611d4557600080fd5b505af1158015611d59573d6000803e3d6000fd5b505050505098975050505050505050565b600081600003611d7c57506000919050565b60006001611d8984612320565b901c6001901b90506001818481611da257611da2612b69565b048201901c90506001818481611dba57611dba612b69565b048201901c90506001818481611dd257611dd2612b69565b048201901c90506001818481611dea57611dea612b69565b048201901c90506001818481611e0257611e02612b69565b048201901c90506001818481611e1a57611e1a612b69565b048201901c90506001818481611e3257611e32612b69565b048201901c9050610fd081828581611e4c57611e4c612b69565b046123b4565b6040513060388201526f5af43d82803e903d91602b57fd5bf3ff602482015260148101839052733d602d80600a3d3981f3363d3d373d3d3d363d738152605881018290526037600c82012060788201526055604390910120600090610fd0565b801580611f2c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2a9190612b39565b155b611f975760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108bd565b6040516001600160a01b03831660248201526044810182905261183d90849063095ea7b360e01b90606401611b18565b603254610100900460ff16611a6f5760405162461bcd60e51b81526004016108bd90612d83565b603254610100900460ff166120155760405162461bcd60e51b81526004016108bd90612d83565b61015f805460ff19169055565b603254610100900460ff166120495760405162461bcd60e51b81526004016108bd90612d83565b61096d6123c3565b6001600160a01b0381163b6120be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108bd565b600080516020612e4283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6120f6836123f3565b6000825111806121035750805b1561183d57611b4f8383612433565b61015f5460ff1661096d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016108bd565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612203826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124589092919063ffffffff16565b90508051600014806122245750808060200190518101906122249190612ba1565b61183d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108bd565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f590506001600160a01b038116610cb55760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016108bd565b600080608083901c1561233557608092831c92015b604083901c1561234757604092831c92015b602083901c1561235957602092831c92015b601083901c1561236b57601092831c92015b600883901c1561237d57600892831c92015b600483901c1561238f57600492831c92015b600283901c156123a157600292831c92015b600183901c15610cb55760010192915050565b6000818310611add5781610fd0565b603254610100900460ff166123ea5760405162461bcd60e51b81526004016108bd90612d83565b61096d33611a77565b6123fc81612051565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610fd08383604051806060016040528060278152602001612e6260279139612467565b6060611bbf84846000856124df565b6060600080856001600160a01b0316856040516124849190612df2565b600060405180830381855af49150503d80600081146124bf576040519150601f19603f3d011682016040523d82523d6000602084013e6124c4565b606091505b50915091506124d5868383876125ba565b9695505050505050565b6060824710156125405760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108bd565b600080866001600160a01b0316858760405161255c9190612df2565b60006040518083038185875af1925050503d8060008114612599576040519150601f19603f3d011682016040523d82523d6000602084013e61259e565b606091505b50915091506125af878383876125ba565b979650505050505050565b60608315612629578251600003612622576001600160a01b0385163b6126225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108bd565b5081611bbf565b611bbf838381511561263e5781518083602001fd5b8060405162461bcd60e51b81526004016108bd9190612e0e565b60008083601f84011261266a57600080fd5b50813567ffffffffffffffff81111561268257600080fd5b6020830191508360208260051b850101111561269d57600080fd5b9250929050565b600080600080604085870312156126ba57600080fd5b843567ffffffffffffffff808211156126d257600080fd5b6126de88838901612658565b909650945060208701359150808211156126f757600080fd5b5061270487828801612658565b95989497509550505050565b6001600160a01b038116811461095a57600080fd5b60006020828403121561273757600080fd5b8135610fd081612710565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561276b57600080fd5b823561277681612710565b9150602083013567ffffffffffffffff8082111561279357600080fd5b818501915085601f8301126127a757600080fd5b8135818111156127b9576127b9612742565b604051601f8201601f19908116603f011681019083821181831017156127e1576127e1612742565b816040528281528860208487010111156127fa57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561282e57600080fd5b5035919050565b6000806040838503121561284857600080fd5b823561285381612710565b946020939093013593505050565b60008060006060848603121561287657600080fd5b83359250602084013561288881612710565b929592945050506040919091013590565b6000806000606084860312156128ae57600080fd5b83356128b981612710565b9250602084013561288881612710565b600080604083850312156128dc57600080fd5b8235915060208301356128ee81612710565b809150509250929050565b60008083601f84011261290b57600080fd5b50813567ffffffffffffffff81111561292357600080fd5b60208301915083602082850101111561269d57600080fd5b600080600080600080600080600060c08a8c03121561295957600080fd5b893567ffffffffffffffff8082111561297157600080fd5b61297d8d838e016128f9565b909b50995060208c013591508082111561299657600080fd5b6129a28d838e016128f9565b909950975060408c01359150808211156129bb57600080fd5b506129c88c828d016128f9565b9a9d999c50979a969997986060880135976080810135975060a0013595509350505050565b60008060008060808587031215612a0357600080fd5b8435612a0e81612710565b93506020850135612a1e81612710565b92506040850135612a2e81612710565b91506060850135612a3e81612710565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612a8757612a87612a5f565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b80820180821115610cb557610cb5612a5f565b600060208284031215612b4b57600080fd5b5051919050565b8082028115828204841417610cb557610cb5612a5f565b634e487b7160e01b600052601260045260246000fd5b600082612b9c57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612bb357600080fd5b81518015158114610fd057600080fd5b600060208284031215612bd557600080fd5b8151610fd081612710565b81516001600160a01b0316815261016081016020830151612c0c60208401826001600160a01b03169052565b506040830151612c23604084018262ffffff169052565b506060830151612c38606084018260020b9052565b506080830151612c4d608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151612c93828501826001600160a01b03169052565b505061014092830151919092015290565b60008060008060808587031215612cba57600080fd5b8451935060208501516fffffffffffffffffffffffffffffffff81168114612ce157600080fd5b6040860151606090960151949790965092505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038916815260a060208201819052600090612d45908301898b612cf7565b8281036040840152612d5881888a612cf7565b90508281036060840152612d6d818688612cf7565b9150508260808301529998505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015612de9578181015183820152602001612dd1565b50506000910152565b60008251612e04818460208701612dce565b9190910192915050565b6020815260008251806020840152612e2d816040850160208701612dce565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000813000a",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c80639be55f511161010d578063d9caed12116100a0578063e48f427b1161006f578063e48f427b14610622578063e6fdb39614610638578063eb26c09c14610658578063f2fde38b14610678578063f8c8765e1461069857600080fd5b8063d9caed1214610597578063dbbdf083146105b7578063e30c3978146105d7578063e3f9206e146105f557600080fd5b8063b40680eb116100dc578063b40680eb14610514578063beb54e5314610534578063bfe3695314610557578063c45ef4821461057757600080fd5b80639be55f5114610471578063afdbf3c21461049e578063b2cb8d63146104be578063b309bc98146104f457600080fd5b806359f8fa0411610190578063736c0d5b1161015f578063736c0d5b146103d957806379ba5097146104095780638456cb591461041e5780638a1ff45d146104335780638da5cb5b1461045357600080fd5b806359f8fa04146103755780635c975abb14610395578063614bb60a146103ae578063715018a6146103c457600080fd5b806350605c94116101cc57806350605c941461026857806352d1902d146102bb5780635348e304146102de5780635377210f1461030e57600080fd5b8063350b2369146101fe5780633659cfe6146102205780633f4ba83a146102405780634f1ef28614610255575b600080fd5b34801561020a57600080fd5b5061021e6102193660046126a4565b6106b8565b005b34801561022c57600080fd5b5061021e61023b366004612725565b610875565b34801561024c57600080fd5b5061021e61095d565b61021e610263366004612758565b61096f565b34801561027457600080fd5b5061029e61028336600461281c565b6000908152600660205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102c757600080fd5b506102d0610a3f565b6040519081526020016102b2565b3480156102ea57600080fd5b506102fe6102f9366004612835565b610af2565b60405190151581526020016102b2565b34801561031a57600080fd5b50610358610329366004612835565b600860209081526000928352604080842090915290825290208054600182015460029092015490919060ff1683565b6040805193845260208401929092521515908201526060016102b2565b34801561038157600080fd5b5060015461029e906001600160a01b031681565b3480156103a157600080fd5b5061015f5460ff166102fe565b3480156103ba57600080fd5b506102d060045481565b3480156103d057600080fd5b5061021e610cbb565b3480156103e557600080fd5b506102fe6103f4366004612725565b60056020526000908152604090205460ff1681565b34801561041557600080fd5b5061021e610ccd565b34801561042a57600080fd5b5061021e610d44565b34801561043f57600080fd5b5060025461029e906001600160a01b031681565b34801561045f57600080fd5b5060c9546001600160a01b031661029e565b34801561047d57600080fd5b506102d061048c366004612725565b60096020526000908152604090205481565b3480156104aa57600080fd5b506102fe6104b936600461281c565b610d54565b3480156104ca57600080fd5b5061029e6104d936600461281c565b6006602052600090815260409020546001600160a01b031681565b34801561050057600080fd5b506102fe61050f36600461281c565b610da9565b34801561052057600080fd5b506102fe61052f366004612861565b610df1565b34801561054057600080fd5b506102d061054f366004612835565b600092915050565b34801561056357600080fd5b5060005461029e906001600160a01b031681565b34801561058357600080fd5b506102d0610592366004612835565b610fd7565b3480156105a357600080fd5b506102fe6105b2366004612899565b61105f565b3480156105c357600080fd5b5061021e6105d23660046128c9565b6110d2565b3480156105e357600080fd5b5060fb546001600160a01b031661029e565b34801561060157600080fd5b506102d0610610366004612725565b60076020526000908152604090205481565b34801561062e57600080fd5b506102d060035481565b34801561064457600080fd5b5061029e61065336600461293b565b611163565b34801561066457600080fd5b5061029e61067336600461281c565b611513565b34801561068457600080fd5b5061021e610693366004612725565b611574565b3480156106a457600080fd5b5061021e6106b33660046129ed565b6115e5565b6106c06117a8565b60005b8381101561079b576001600560008787858181106106e3576106e3612a49565b90506020020160208101906106f89190612725565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790557fc648f6265408cc54c0dc26d24ba51dfc9f35ce1a63baa2228f65d93aaf11cc6785858381811061075357610753612a49565b90506020020160208101906107689190612725565b604080516001600160a01b039092168252600160208301520160405180910390a18061079381612a75565b9150506106c3565b5060005b8181101561086e57600560008484848181106107bd576107bd612a49565b90506020020160208101906107d29190612725565b6001600160a01b031681526020810191909152604001600020805460ff191690557fc648f6265408cc54c0dc26d24ba51dfc9f35ce1a63baa2228f65d93aaf11cc6783838381811061082657610826612a49565b905060200201602081019061083b9190612725565b604080516001600160a01b039092168252600060208301520160405180910390a18061086681612a75565b91505061079f565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108c65760405162461bcd60e51b81526004016108bd90612a8e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661090f600080516020612e42833981519152546001600160a01b031690565b6001600160a01b0316146109355760405162461bcd60e51b81526004016108bd90612ada565b61093e81611802565b6040805160008082526020820190925261095a9183919061180a565b50565b6109656117a8565b61096d61197a565b565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036109b75760405162461bcd60e51b81526004016108bd90612a8e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a00600080516020612e42833981519152546001600160a01b031690565b6001600160a01b031614610a265760405162461bcd60e51b81526004016108bd90612ada565b610a2f82611802565b610a3b8282600161180a565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610adf5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108bd565b50600080516020612e4283398151915290565b6000610afc6119cd565b610b04611a28565b6001600160a01b03831660009081526008602090815260408083208584529091528120600101549003610b4d5760405163ba86627b60e01b8152600481018390526024016108bd565b6001600160a01b038316600090815260086020908152604080832085845290915290206002015460ff1615610b985760405163222f1d3d60e11b8152600481018390526024016108bd565b6001600160a01b038316600090815260086020908152604080832085845290915290206001015442908111610be35760405163d3d4d9c360e01b8152600481018490526024016108bd565b6001600160a01b03841660008181526008602090815260408083208784529091529081902060028101805460ff191660011790555490516340c10f1960e01b815230600482015260248101919091526340c10f1990604401600060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b50506040513392506001600160a01b038716915085907f2da35f6537bd80d9cac4d158e23a0ab942e7fb1fd4a25243fcad824c3433e37990600090a46001915050610cb5600161012d55565b92915050565b610cc36117a8565b61096d6000611a77565b60fb5433906001600160a01b03168114610d3b5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016108bd565b61095a81611a77565b610d4c6117a8565b61096d611a90565b6000610d5e6117a8565b600380549083905560408051828152602081018590527fb936e6dfcf3fec6bfb7d23d91ce9406c4ce74825de73cf38c764ed900731d7a491015b60405180910390a150600192915050565b6000610db36117a8565b600480549083905560408051828152602081018590527f43c057f209152d56f2de0fa1d79291670facf6161810b2392b949bf1647cc2369101610d98565b6000610dfb6119cd565b610e03611a28565b6000848152600660205260409020546001600160a01b03163314610e43576040516335638f4d60e11b8152336004820152602481018590526044016108bd565b6001600160a01b0383166000908152600760205260409020548414610e8d576040516328cc1fe360e11b81526001600160a01b0384166004820152602481018590526044016108bd565b6001600160a01b038316600090815260096020908152604080832054600883528184208185529092528220600101549091610ec84283611ace565b6000805491925090610ee5906001600160a01b0316333084611ae4565b6000610ef18888610fd7565b90506000610f0189338a87611b55565b905060405180606001604052808981526020018584610f209190612b26565b8152600060209182018190526001600160a01b038c16808252600883526040808320868452845291829020845181559284015160018401559201516002909101805460ff1916911515919091179055817f192dbb596f99b94785518ef174823fd46e8962b95010f6ddc9fd529a129dbe778a610f9c8887612b26565b604080519283526020830191909152810187905260600160405180910390a360019650505050505050610fd0600161012d55565b9392505050565b6000600454836001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e9190612b39565b60035461104b9085612b52565b6110559190612b7f565b610fd09190612b26565b6000611069611bc7565b61107d6001600160a01b0384168584611bf7565b604080516001600160a01b038087168252851660208201529081018390527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060600160405180910390a15060019392505050565b6110da611bc7565b6001600160a01b03811661110157604051630ae8f22360e21b815260040160405180910390fd5b60008281526006602090815260409182902080546001600160a01b0319166001600160a01b03851690811790915591518481527f6968e0ca91155227d05a7efa746b77e16777b4a79785bc4d1e8a24e8d250f04a910160405180910390a25050565b600061116d6119cd565b611175611a28565b6000848152600660205260409020546001600160a01b031633146111b5576040516335638f4d60e11b8152336004820152602481018590526044016108bd565b6111c58a8a8a8a8a8a8a8a611c27565b905060006111d4600285612b7f565b600080549192509081908190819081906001600160a01b03908116908816101561125a576000548795508694506001600160a01b03169250879150611253611224670de0b6b3a764000086612b7f565b611236670de0b6b3a76400008b612b7f565b61124490600160c01b612b52565b61124e9190612b7f565b611d6a565b905061129b565b6000546001600160a01b03169450879350869250859150611298611286670de0b6b3a764000086612b7f565b611236670de0b6b3a764000089612b7f565b90505b6000546112b3906001600160a01b031633308b611ae4565b60015460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529088169063095ea7b3906044016020604051808303816000875af1158015611307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132b9190612ba1565b506001546040516309f56ab160e11b81526001600160a01b0387811660048301528581166024830152610bb860448301528381166064830152909116906313ead562906084016020604051808303816000875af1158015611390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b49190612bc3565b506001805460408051610160810182526001600160a01b0389811682528781166020830152610bb892820192909252620d89b3196060820152620d89b4608082015260a0810188905260c08101869052600060e082018190526101008201523361012082015291169163883164569190610140820190611435904290612b26565b8152506040518263ffffffff1660e01b81526004016114549190612be0565b6080604051808303816000875af1158015611473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114979190612ca4565b505050506001600160a01b0387166000818152600760209081526040918290208d905581518c81529081018b90528c929133917fdc7b59b2c9ffd67846a3b59e7d1b402809ae1a82df9a879a8e5df293ed23eb72910160405180910390a4505050505050611506600161012d55565b9998505050505050505050565b6000818152600a602052604081205481908390611531906001612b26565b60408051602081019390935282015260600160408051601f198184030181529190528051602090910120600254909150610fd0906001600160a01b031682611e52565b61157c6117a8565b60fb80546001600160a01b0383166001600160a01b031990911681179091556115ad60c9546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b603254610100900460ff16158080156116055750603254600160ff909116105b8061161f5750303b15801561161f575060325460ff166001145b6116825760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016108bd565b6032805460ff1916600117905580156116a5576032805461ff0019166101001790555b6001600160a01b0384166116cc57604051630ae8f22360e21b815260040160405180910390fd5b6001600160a01b0383166116f357604051630ae8f22360e21b815260040160405180910390fd5b600080546001600160a01b038087166001600160a01b0319928316811790935560018054878316908416179055600280549186169190921617905561173b9084600019611eb2565b611743611fc7565b61174b611fee565b611753612022565b61175c85611a77565b801561086e576032805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60c9546001600160a01b0316331461096d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108bd565b61095a6117a8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156118425761183d83612051565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561189c575060408051601f3d908101601f1916820190925261189991810190612b39565b60015b6118ff5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016108bd565b600080516020612e42833981519152811461196e5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016108bd565b5061183d8383836120ed565b611982612112565b61015f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600261012d5403611a205760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108bd565b600261012d55565b61015f5460ff161561096d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016108bd565b600161012d55565b60fb80546001600160a01b031916905561095a8161215c565b611a98611a28565b61015f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119b03390565b6000818311611add5781610fd0565b5090919050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b4f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121ae565b50505050565b6001600160a01b03848116600081815260096020818152604080842080548251808501889052978b1688840152606088018a90526080880189905260a0808901919091528251808903909101815260c0909701909152855195820195909520939092529052908190555b949350505050565b3360009081526005602052604090205460ff1661096d576040516369021caf60e01b815260040160405180910390fd5b6040516001600160a01b03831660248201526044810182905261183d90849063a9059cbb60e01b90606401611b18565b6000828152600a602052604081208054829185918390611c4690612a75565b918290555060408051602081019390935282015260600160408051601f198184030181529190528051602090910120600254909150611c8e906001600160a01b031682612283565b604051634823e6bd60e11b81529092506001600160a01b03831690639047cd7a90611ccb9030908e908e908e908e908e908e908e90600401612d20565b600060405180830381600087803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b50506040516340c10f1960e01b8152306004820152602481018690526001600160a01b03851692506340c10f199150604401600060405180830381600087803b158015611d4557600080fd5b505af1158015611d59573d6000803e3d6000fd5b505050505098975050505050505050565b600081600003611d7c57506000919050565b60006001611d8984612320565b901c6001901b90506001818481611da257611da2612b69565b048201901c90506001818481611dba57611dba612b69565b048201901c90506001818481611dd257611dd2612b69565b048201901c90506001818481611dea57611dea612b69565b048201901c90506001818481611e0257611e02612b69565b048201901c90506001818481611e1a57611e1a612b69565b048201901c90506001818481611e3257611e32612b69565b048201901c9050610fd081828581611e4c57611e4c612b69565b046123b4565b6040513060388201526f5af43d82803e903d91602b57fd5bf3ff602482015260148101839052733d602d80600a3d3981f3363d3d373d3d3d363d738152605881018290526037600c82012060788201526055604390910120600090610fd0565b801580611f2c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2a9190612b39565b155b611f975760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108bd565b6040516001600160a01b03831660248201526044810182905261183d90849063095ea7b360e01b90606401611b18565b603254610100900460ff16611a6f5760405162461bcd60e51b81526004016108bd90612d83565b603254610100900460ff166120155760405162461bcd60e51b81526004016108bd90612d83565b61015f805460ff19169055565b603254610100900460ff166120495760405162461bcd60e51b81526004016108bd90612d83565b61096d6123c3565b6001600160a01b0381163b6120be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108bd565b600080516020612e4283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6120f6836123f3565b6000825111806121035750805b1561183d57611b4f8383612433565b61015f5460ff1661096d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016108bd565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612203826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124589092919063ffffffff16565b90508051600014806122245750808060200190518101906122249190612ba1565b61183d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108bd565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f590506001600160a01b038116610cb55760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016108bd565b600080608083901c1561233557608092831c92015b604083901c1561234757604092831c92015b602083901c1561235957602092831c92015b601083901c1561236b57601092831c92015b600883901c1561237d57600892831c92015b600483901c1561238f57600492831c92015b600283901c156123a157600292831c92015b600183901c15610cb55760010192915050565b6000818310611add5781610fd0565b603254610100900460ff166123ea5760405162461bcd60e51b81526004016108bd90612d83565b61096d33611a77565b6123fc81612051565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610fd08383604051806060016040528060278152602001612e6260279139612467565b6060611bbf84846000856124df565b6060600080856001600160a01b0316856040516124849190612df2565b600060405180830381855af49150503d80600081146124bf576040519150601f19603f3d011682016040523d82523d6000602084013e6124c4565b606091505b50915091506124d5868383876125ba565b9695505050505050565b6060824710156125405760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108bd565b600080866001600160a01b0316858760405161255c9190612df2565b60006040518083038185875af1925050503d8060008114612599576040519150601f19603f3d011682016040523d82523d6000602084013e61259e565b606091505b50915091506125af878383876125ba565b979650505050505050565b60608315612629578251600003612622576001600160a01b0385163b6126225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108bd565b5081611bbf565b611bbf838381511561263e5781518083602001fd5b8060405162461bcd60e51b81526004016108bd9190612e0e565b60008083601f84011261266a57600080fd5b50813567ffffffffffffffff81111561268257600080fd5b6020830191508360208260051b850101111561269d57600080fd5b9250929050565b600080600080604085870312156126ba57600080fd5b843567ffffffffffffffff808211156126d257600080fd5b6126de88838901612658565b909650945060208701359150808211156126f757600080fd5b5061270487828801612658565b95989497509550505050565b6001600160a01b038116811461095a57600080fd5b60006020828403121561273757600080fd5b8135610fd081612710565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561276b57600080fd5b823561277681612710565b9150602083013567ffffffffffffffff8082111561279357600080fd5b818501915085601f8301126127a757600080fd5b8135818111156127b9576127b9612742565b604051601f8201601f19908116603f011681019083821181831017156127e1576127e1612742565b816040528281528860208487010111156127fa57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561282e57600080fd5b5035919050565b6000806040838503121561284857600080fd5b823561285381612710565b946020939093013593505050565b60008060006060848603121561287657600080fd5b83359250602084013561288881612710565b929592945050506040919091013590565b6000806000606084860312156128ae57600080fd5b83356128b981612710565b9250602084013561288881612710565b600080604083850312156128dc57600080fd5b8235915060208301356128ee81612710565b809150509250929050565b60008083601f84011261290b57600080fd5b50813567ffffffffffffffff81111561292357600080fd5b60208301915083602082850101111561269d57600080fd5b600080600080600080600080600060c08a8c03121561295957600080fd5b893567ffffffffffffffff8082111561297157600080fd5b61297d8d838e016128f9565b909b50995060208c013591508082111561299657600080fd5b6129a28d838e016128f9565b909950975060408c01359150808211156129bb57600080fd5b506129c88c828d016128f9565b9a9d999c50979a969997986060880135976080810135975060a0013595509350505050565b60008060008060808587031215612a0357600080fd5b8435612a0e81612710565b93506020850135612a1e81612710565b92506040850135612a2e81612710565b91506060850135612a3e81612710565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612a8757612a87612a5f565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b80820180821115610cb557610cb5612a5f565b600060208284031215612b4b57600080fd5b5051919050565b8082028115828204841417610cb557610cb5612a5f565b634e487b7160e01b600052601260045260246000fd5b600082612b9c57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612bb357600080fd5b81518015158114610fd057600080fd5b600060208284031215612bd557600080fd5b8151610fd081612710565b81516001600160a01b0316815261016081016020830151612c0c60208401826001600160a01b03169052565b506040830151612c23604084018262ffffff169052565b506060830151612c38606084018260020b9052565b506080830151612c4d608084018260020b9052565b5060a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151612c93828501826001600160a01b03169052565b505061014092830151919092015290565b60008060008060808587031215612cba57600080fd5b8451935060208501516fffffffffffffffffffffffffffffffff81168114612ce157600080fd5b6040860151606090960151949790965092505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038916815260a060208201819052600090612d45908301898b612cf7565b8281036040840152612d5881888a612cf7565b90508281036060840152612d6d818688612cf7565b9150508260808301529998505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015612de9578181015183820152602001612dd1565b50506000910152565b60008251612e04818460208701612dce565b9190910192915050565b6020815260008251806020840152612e2d816040850160208701612dce565b601f01601f1916919091016040019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "create(string,string,string,uint256,uint256,uint256)": {
        "details": "developer first create their game coin",
        "params": {
          "amountGameCoin": "how many coin first mint",
          "gameId": "the game's id",
          "name": "new game coin's name",
          "symbol": "game coin's symbol"
        },
        "returns": {
          "gameCoinAddress": "the address of the new game coin"
        }
      },
      "executeMintCoin(address,bytes32)": {
        "details": "when time is up, anyone can call this function to make the mint executed",
        "params": {
          "gameCoinAddress": "address of the game coin",
          "mintId": "a unique id to identify a mint, developer can get it after declare"
        },
        "returns": {
          "_0": "bool whether the operation success"
        }
      },
      "getGameNextCoinAddress(uint256)": {
        "details": "get a specific game next coin's deterministic address",
        "params": {
          "gameId": "off chain game Id"
        }
      },
      "getMintDelay(address,uint256)": {
        "details": "linear function to calculate the delay timedelayB is the minimum delay period, even someone mint zero token,there still be delayB period before someone can really mint zero tokendelayK is the parameter to take the ratio of new amount in to accountFor example, the initial supply of Game Coin is 100k. If developer wantto mint 100k, developer needs to real mint it after `delayK + delayB`. Ifdeveloper want to mint 200k, developer has to real mint it after `2DelayK +delayB`. ^ t +            / |          / |        / 2k+b|      / |    / k+b|  /  |/  b| 0----p---2p---------> amount"
      },
      "getMintFee(address,uint256)": {
        "details": "calculate the MintFee in P12"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "queueMintCoin(uint256,address,uint256)": {
        "details": "if developer want to mint after create coin, developer must declare first",
        "params": {
          "amountGameCoin": "how many developer want to mint",
          "gameCoinAddress": "game coin's address",
          "gameId": "game's id",
          "success": "whether the operation success"
        }
      },
      "register(uint256,address)": {
        "details": "create binding between game and developer, only called by p12 backend",
        "params": {
          "developer": "developer address, who own this game",
          "gameId": "game id"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDelayB(uint256)": {
        "details": "set linear function's B parameter",
        "params": {
          "newDelayB": "new B parameter"
        }
      },
      "setDelayK(uint256)": {
        "details": "set linear function's K parameter",
        "params": {
          "newDelayK": "new K parameter"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "updateSigners(address[],address[])": {
        "details": "update signers",
        "params": {
          "toAdd": "list of to be added signer",
          "toRemove": "list of to be removed signer"
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "amountGameCoin": "how many user want to withdraw",
          "gameCoinAddress": "gameCoin's address",
          "userAddress": "user's address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "gameCoinImpl()": {
        "notice": "game coin implmentation address"
      },
      "withdraw(address,address,uint256)": {
        "notice": "called when user want to withdraw his game coin from custodian address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13916,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "p12",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13920,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "uniswapPosManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(INonfungiblePositionManager)15941"
      },
      {
        "astId": 13923,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "gameCoinImpl",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13926,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "delayK",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13928,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "delayB",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13932,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "signers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13936,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "gameDev",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13940,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "coinGameIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13947,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "coinMintRecords",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(MintCoinInfo)15215_storage))"
      },
      {
        "astId": 13951,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "preMintIds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 13955,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "_gameCoinCount",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13959,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)39_storage"
      },
      {
        "astId": 714,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "_initialized",
        "offset": 0,
        "slot": "50",
        "type": "t_uint8"
      },
      {
        "astId": 717,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "_initializing",
        "offset": 1,
        "slot": "50",
        "type": "t_bool"
      },
      {
        "astId": 696,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1011,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2979,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1153,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "_status",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 1222,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1033,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "_paused",
        "offset": 0,
        "slot": "351",
        "type": "t_bool"
      },
      {
        "astId": 1138,
        "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)39_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[39]",
        "numberOfBytes": "1248"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(INonfungiblePositionManager)15941": {
        "encoding": "inplace",
        "label": "contract INonfungiblePositionManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(MintCoinInfo)15215_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct IP12CoinFactoryDef.MintCoinInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(MintCoinInfo)15215_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(MintCoinInfo)15215_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IP12CoinFactoryDef.MintCoinInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MintCoinInfo)15215_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MintCoinInfo)15215_storage": {
        "encoding": "inplace",
        "label": "struct IP12CoinFactoryDef.MintCoinInfo",
        "members": [
          {
            "astId": 15210,
            "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15212,
            "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
            "label": "unlockTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15214,
            "contract": "src/coinFactory/P12CoinFactoryUpgradeable.sol:P12CoinFactoryUpgradeable",
            "label": "executed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}